-- Compiled with the following packages:
--   WCSharp.Api: v3.0.0 (decompiled)
--   WCSharp.Buffs: v3.0.0 (decompiled)
--   WCSharp.DateTime: v3.0.0 (decompiled)
--   WCSharp.Dummies: v3.0.0 (decompiled)
--   WCSharp.Effects: v3.0.0 (decompiled)
--   WCSharp.Events: v3.0.0 (decompiled)
--   WCSharp.Json: v3.0.0 (decompiled)
--   WCSharp.Knockbacks: v3.0.0 (decompiled)
--   WCSharp.Lightnings: v3.0.0 (decompiled)
--   WCSharp.Missiles: v3.0.0 (decompiled)
--   WCSharp.SaveLoad: v3.0.0 (decompiled)
--   WCSharp.Shared: v3.0.0 (decompiled)
--   WCSharp.Sync: v3.0.0 (decompiled)
--   WCSharp.W3MMD: v3.0.0 (decompiled)

CSharpLuaSingleFile = true

-- CoreSystemLib: Natives.lua
do
-- math functions are faster than natives, but may return different results when incorrect input values are given.
Deg2Rad = math.deg
Rad2Deg = math.rad

Sin = math.sin
Cos = math.cos
Tan = math.tan

Asin = math.asin
Acos = math.acos
Atan = math.atan
Atan2 = math.atan

SquareRoot = math.sqrt
Pow = function(x,power) return x ^ power end

end

-- CoreSystemLib: Core.lua
do
local setmetatable = setmetatable
local getmetatable = getmetatable
local type = type
local pairs  = pairs
local assert = assert
local table = table
local tremove = table.remove
local tconcat = table.concat
local floor = math.floor
local ceil = math.ceil
local error = error
local select = select
local xpcall = xpcall
local rawget = rawget
local rawset = rawset
local rawequal = rawequal
local tostring = tostring
local string = string
local sfind = string.find
local ssub = string.sub
local debug = debug
local global = _G
local prevSystem = rawget(global, "System")

local emptyFn = function() end
local nilFn = function() return nil end
local falseFn = function() return false end
local trueFn = function() return true end
local identityFn = function(x) return x end
local lengthFn = function (t) return #t end
local zeroFn = function() return 0 end
local oneFn = function() return 1 end
local equals = function(x, y) return x == y end
local getCurrent = function(t) return t.current end
local assembly, metadatas
local System, Object, ValueType

local function new(cls, ...)
  local this = setmetatable({}, cls)
  return this, cls.__ctor__(this, ...)
end

local function throw(e, lv)
  if e == nil then e = System.NullReferenceException() end
  e:traceback(lv)
  error(e)
end

local function xpcallErr(e)
  if e == nil then
    e = System.Exception("script error")
    e:traceback()
  elseif type(e) == "string" then
    if sfind(e, "attempt to index") then
      e = System.NullReferenceException(e)
    elseif sfind(e, "attempt to divide by zero") then
      e = System.DivideByZeroException(e)
    else
      e = System.Exception(e)
    end
    e:traceback()
  end
  return e
end

local function try(try, catch, finally)
  local ok, status, result = xpcall(try, xpcallErr)
  if not ok then
    if catch then
      if finally then
        ok, status, result = xpcall(catch, xpcallErr, status)
      else
        ok, status, result = true, catch(status)
      end
      if ok then
        if status == 1 then
          ok = false
          status = result
        end
      end
    end
  end
  if finally then
    finally()
  end
  if not ok then
    error(status)
  end
  return status, result
end

local function set(className, cls)
  local scope = global
  local starIndex = 1
  while true do
    local pos = sfind(className, "[%.+]", starIndex) or 0
    local name = ssub(className, starIndex, pos -1)
    if pos ~= 0 then
      local t = rawget(scope, name)
      if t == nil then
        if cls then
          t = {}
          rawset(scope, name, t)
        else
          return nil
        end
      end
      scope = t
      starIndex = pos + 1
    else
      if cls then
        assert(rawget(scope, name) == nil, className)
        rawset(scope, name, cls)
        return cls
      else
        return rawget(scope, name)
      end
    end
  end
end

local function multiKey(t, f, ...)
  local n, i, k = select("#", ...), 1
  while true do
    local arg = assert(select(i, ...))
    if f then
      k = f(arg)
    else
      k = arg
    end
    if i == n then
      break
    end
    local tk = t[k]
    if tk == nil then
      tk = {}
      t[k] = tk
    end
    t = tk
    i = i + 1
  end
  return t, k
end

local function genericName(name, ...)
  local n = select("#", ...)
  local t = { name, "`", n, "[" }
  local count = 5
  local hascomma
  for i = 1, n do
    local cls = select(i, ...)
    if hascomma then
      t[count] = ","
      count = count + 1
    else
      hascomma = true
    end
    t[count] = cls.__name__
    count = count + 1
  end
  t[count] = "]"
  return tconcat(t)
end

local enumMetatable = { class = "E", default = zeroFn, __index = false, interface = false, __call = function (_, v) return v or 0 end }
enumMetatable.__index = enumMetatable

local interfaceMetatable = { class = "I", default = nilFn, __index = false }
interfaceMetatable.__index = interfaceMetatable

local ctorMetatable = { __call = function (ctor, ...) return ctor[1](...) end }

local function applyExtends(cls)
  local extends = cls.base
  if extends then
    if type(extends) == "function" then
      extends = extends(global, cls)
    end
    cls.base = nil
  end
  return extends
end

local function applyMetadata(cls)
  local metadata = cls.__metadata__
  if metadata then
    if metadatas then
      metadatas[#metadatas + 1] = function (global)
        cls.__metadata__ = metadata(global)
      end
    else
      cls.__metadata__ = metadata(global)
    end
  end
end

local function setInterface(cls, interfaces)
  cls.interface = interfaces
  for  i = 1, #interfaces do
    local extern = interfaces[i].extern
    if extern then
      for k, v in pairs(extern) do
        if cls[k] == nil then
          cls[k] = v
        end
      end
    end
  end
end

local function setBase(cls, kind)
  local ctor = cls.__ctor__
  if ctor and type(ctor) == "table" then
    setmetatable(ctor, ctorMetatable)
  end
  local extends = applyExtends(cls)
  applyMetadata(cls)

  cls.__index = cls
  cls.__call = new

  if extends then
    local base = extends[1]
    if not base then error(cls.__name__ .. "'s base is nil") end
    if base.class == "I" then
      setmetatable(cls, kind ~= "S" and Object or ValueType)
      setInterface(cls, extends)
    else
      setmetatable(cls, base)
      if #extends > 1 then
        tremove(extends, 1)
        setInterface(cls, extends)
      end
    end
  else
    setmetatable(cls, kind ~= "S" and Object or ValueType)
  end
end

local function staticCtorSetBase(cls)
  setmetatable(cls, nil)
  local t = cls[cls]
  for k, v in pairs(t) do
    cls[k] = v
  end
  cls[cls] = nil
  local kind = cls.class
  cls.class = nil
  setBase(cls, kind)
  cls:static()
  cls.static = nil
end

local staticCtorMetatable = {
  __index = function(cls, key)
    staticCtorSetBase(cls)
    return cls[key]
  end,
  __newindex = function(cls, key, value)
    staticCtorSetBase(cls)
    cls[key] = value
  end,
  __call = function(cls, ...)
    staticCtorSetBase(cls)
    return new(cls, ...)
  end
}

local function setHasStaticCtor(cls, kind)
  local name = cls.__name__
  cls.__name__ = nil
  local t = {}
  for k, v in pairs(cls) do
    t[k] = v
    cls[k] = nil
  end
  cls[cls] = t
  cls.__name__ = name
  cls.class = kind
  cls.__call = new
  cls.__index = cls
  setmetatable(cls, staticCtorMetatable)
end

local function defCore(name, kind, cls, generic)
  cls = cls or {}
  cls.__name__ = name
  cls.__assembly__ = assembly
  if not generic then
    set(name, cls)
  end
  if kind == "C" or kind == "S" then
    if cls.static == nil then
      setBase(cls, kind)
    else
      setHasStaticCtor(cls, kind)
    end
  elseif kind == "I" then
    local extends = applyExtends(cls)
    if extends then
      cls.interface = extends
    end
    applyMetadata(cls)
    setmetatable(cls, interfaceMetatable)
  elseif kind == "E" then
    applyMetadata(cls)
    setmetatable(cls, enumMetatable)
  else
    assert(false, kind)
  end
  return cls
end

local genericClassKey = {}
local function getGenericClass(cls)
  return cls[genericClassKey]
end

local function getDefGenericClass(name, kind, generic, genericArgumentCount)
  local genericClass, genericBaseName
  if generic then
    generic.__index = generic
    generic.__call = new
    genericClass = generic
  else
    genericClass = {}
  end
  genericClass[genericClassKey] = genericClass
  if kind == 'I' then
    genericClass.class = 'I'
  end
  local _, i = name:find('.*_')
  if i then
    genericBaseName = name:sub(1, i - 1)
    genericArgumentCount = name:sub(i + 1, i + 1)
  else
    genericBaseName = name
    if not genericArgumentCount then error(name .. ' has not pass genericArgumentCount') end
  end
  genericClass.__name__ = genericBaseName .. '`' .. genericArgumentCount
  return genericClass, genericBaseName
end

local function defGeneric(name, kind, cls, generic, ...)
  local genericClass, genericBaseName = getDefGenericClass(name, kind, generic, ...)
  local mt = {}
  local fn = function(_, ...)
    local gt, gk = multiKey(mt, nil, ...)
    local t = gt[gk]
    if t == nil then
      local class, super  = cls(...)
      t = class or {}
      t[genericClassKey] = genericClass
      defCore(genericName(genericBaseName, ...), kind, t, true)
      if generic then
        setmetatable(t, super or generic)
      end
      gt[gk] = t
    end
    return t
  end

  local base = kind ~= "S" and Object or ValueType
  local caller = setmetatable({ __call = fn, __index = base }, base)
  return set(name, setmetatable(genericClass, caller))
end

local function def(name, kind, cls, ...)
  if type(cls) == "function" then
    return defGeneric(name, kind, cls, ...)
  else
    return defCore(name, kind, cls, ...)
  end
end

local function defCls(name, cls, ...)
  return def(name, "C", cls, ...)
end

local function defInf(name, cls, ...)
  return def(name, "I", cls, ...)
end

local function defStc(name, cls, ...)
  return def(name, "S", cls, ...)
end

local function defEnum(name, cls)
  return def(name, "E", cls)
end

local function defArray(name, cls, Array, MultiArray)
  Array.__index = Array
  MultiArray.__index =  MultiArray
  setmetatable(MultiArray, Array)

  local mt = {}
  local function create(Array, T)
    local ArrayT = mt[T]
    if ArrayT == nil then
      ArrayT = defCore(T.__name__ .. "[]", "C", cls(T), true)
      setmetatable(ArrayT, Array)
      mt[T] = ArrayT
    end
    return ArrayT
  end

  local mtMulti = {}
  local function createMulti(MultiArray, T, dimension)
    local gt, gk = multiKey(mtMulti, nil, T, dimension)
    local ArrayT = gt[gk]
    if ArrayT == nil then
      local name = T.__name__ .. "[" .. (","):rep(dimension - 1) .. "]"
      ArrayT = defCore(name, "C", cls(T), true)
      setmetatable(ArrayT, MultiArray)
      gt[gk] = ArrayT
    end
    return ArrayT
  end

  return set(name, setmetatable(Array, {
    __index = Object,
    __call = function (Array, T, dimension)
      if not dimension then
        return create(Array, T)
      else
        return createMulti(MultiArray, T, dimension)
      end
    end
  }))
end

local function trunc(num)
  return num > 0 and floor(num) or ceil(num)
end

local function when(f, ...)
  local ok, r = pcall(f, ...)
  return ok and r
end

System = {
  emptyFn = emptyFn,
  falseFn = falseFn,
  trueFn = trueFn,
  identityFn = identityFn,
  lengthFn = lengthFn,
  zeroFn = zeroFn,
  oneFn = oneFn,
  equals = equals,
  getCurrent = getCurrent,
  try = try,
  when = when,
  throw = throw,
  getClass = set,
  multiKey = multiKey,
  getGenericClass = getGenericClass,
  define = defCls,
  defInf = defInf,
  defStc = defStc,
  defEnum = defEnum,
  defArray = defArray,
  enumMetatable = enumMetatable,
  trunc = trunc,
  global = global
}
if prevSystem then
  setmetatable(System, { __index = prevSystem })
end
global.System = System

local debugsetmetatable = debug and debug.setmetatable
System.debugsetmetatable = debugsetmetatable

local _, _, version = sfind(_VERSION, "^Lua (.*)$")
version = tonumber(version)
System.luaVersion = version

--[[if version < 5.3 then
  local bnot, band, bor, xor, sl, sr
  local bit = rawget(global, "bit")
  if not bit then
    local ok, b = pcall(require, "bit")
    if ok then
      bit = b
    end
  end
  if bit then
    bnot, band, bor, xor, sl, sr = bit.bnot, bit.band, bit.bor, bit.bxor, bit.lshift, bit.rshift
  else
    local function disable()
      throw(System.NotSupportedException("bit operation is not enabled."))
    end
    bnot, band, bor, xor, sl, sr  = disable, disable, disable, disable, disable, disable
  end

  System.bnot = bnot
  System.band = band
  System.bor = bor
  System.xor = xor
  System.sl = sl
  System.sr = sr

  function System.div(x, y)
    if y == 0 then throw(System.DivideByZeroException(), 1) end
    return trunc(x / y)
  end

  function System.mod(x, y)
    if y == 0 then throw(System.DivideByZeroException(), 1) end
    local v = x % y
    if v ~= 0 and x * y < 0 then
      return v - y
    end
    return v
  end

  function System.modf(x, y)
    local v = x % y
    if v ~= 0 and x * y < 0 then
      return v - y
    end
    return v
  end

  function System.toUInt(v, max, mask, checked)
    if v >= 0 and v <= max then
      return v
    end
    if checked then
      throw(System.OverflowException(), 1)
    end
    return band(v, mask)
  end

  function System.ToUInt(v, max, mask, checked)
    v = trunc(v)
    if v >= 0 and v <= max then
      return v
    end
    if checked then
      throw(System.OverflowException(), 1)
    end
    if v < -2147483648 or v > 2147483647 then
      return 0
    end
    return band(v, mask)
  end

  local function toInt(v, mask, umask)
    v = band(v, mask)
    local uv = band(v, umask)
    if uv ~= v then
      v = xor(uv - 1, umask)
      if uv ~= 0 then
        v = -v
      end
    end
    return v
  end

  function System.toInt(v, min, max, mask, umask, checked)
    if v >= min and v <= max then
      return v
    end
    if checked then
      throw(System.OverflowException(), 1)
    end
    return toInt(v, mask, umask)
  end

  function System.ToInt(v, min, max, mask, umask, checked)
    v = trunc(v)
    if v >= min and v <= max then
      return v
    end
    if checked then
      throw(System.OverflowException(), 1)
    end
    if v < -2147483648 or v > 2147483647 then
      return 0
    end
    return toInt(v, mask, umask)
  end

  local function toUInt32(v)
    if v <= -2251799813685248 or v >= 2251799813685248 then  -- 2 ^ 51, Lua BitOp used 51 and 52
      throw(System.InvalidCastException())
    end
    v = band(v, 0xffffffff)
    local uv = band(v, 0x7fffffff)
    if uv ~= v then
      return uv + 0x80000000
    end
    return v
  end

  function System.toUInt32(v, checked)
    if v >= 0 and v <= 4294967295 then
      return v
    end
    if checked then
      throw(System.OverflowException(), 1)
    end
    return toUInt32(v)
  end

  function System.ToUInt32(v, checked)
    v = trunc(v)
    if v >= 0 and v <= 4294967295 then
      return v
    end
    if checked then
      throw(System.OverflowException(), 1)
    end
    return toUInt32(v)
  end

  function System.toInt32(v, checked)
    if v >= -2147483648 and v <= 2147483647 then
      return v
    end
    if checked then
      throw(System.OverflowException(), 1)
    end
    if v <= -2251799813685248 or v >= 2251799813685248 then  -- 2 ^ 51, Lua BitOp used 51 and 52
      throw(System.InvalidCastException())
    end
    return band(v, 0xffffffff)
  end

  function System.toInt64(v, checked)
    if v >= (-9223372036854775807 - 1) and v <= 9223372036854775807 then
      return v
    end
    if checked then
      throw(System.OverflowException(), 1)
    end
    throw(System.InvalidCastException()) -- 2 ^ 51, Lua BitOp used 51 and 52
  end

  function System.toUInt64(v, checked)
    if v >= 0 then
      return v
    end
    if checked then
      throw(System.OverflowException(), 1)
    end
    if v >= -2147483648 then
      return band(v, 0x7fffffff) + 0xffffffff80000000
    end
    throw(System.InvalidCastException())
  end

  function System.ToUInt64(v, checked)
    v = trunc(v)
    if v >= 0 and v <= 18446744073709551615 then
      return v
    end
    if checked then
      throw(System.OverflowException(), 1)
    end
    if v >= -2147483648 and v <= 2147483647 then
      v = band(v, 0xffffffff)
      local uv = band(v, 0x7fffffff)
      if uv ~= v then
        return uv + 0xffffffff80000000
      end
      return v
    end
    throw(System.InvalidCastException())
  end

  if table.pack == nil then
    table.pack = function(...)
      return { n = select("#", ...), ... }
    end
  end

  if table.unpack == nil then
    table.unpack = assert(unpack)
  end

  if table.move == nil then
    table.move = function(a1, f, e, t, a2)
      if a2 == nil then a2 = a1 end
      if t > f then
        t = e - f + t
        while e >= f do
          a2[t] = a1[e]
          t = t - 1
          e = e - 1
        end
      else
        while f <= e do
          a2[t] = a1[f]
          t = t + 1
          f = f + 1
        end
      end
    end
  end
else
  load[[]]
  local System = System
  local throw = System.throw
  local trunc = System.trunc

  function System.bnot(x) return ~x end
  function System.band(x, y) return x & y end
  function System.bor(x, y) return x | y end
  function System.xor(x, y) return x ~ y end
  function System.sl(x, y) return x << y end
  function System.sr(x, y) return x >> y end
  function System.div(x, y) if x ~ y < 0 then return -(-x // y) end return x // y end

  function System.mod(x, y)
    local v = x % y
    if v ~= 0 and 1.0 * x * y < 0 then
      return v - y
    end
    return v
  end

  local function toUInt(v, max, mask, checked)
    if v >= 0 and v <= max then
      return v
    end
    if checked then
      throw(System.OverflowException(), 2)
    end
    return v & mask
  end
  System.toUInt = toUInt

  function System.ToUInt(v, max, mask, checked)
    v = trunc(v)
    if v >= 0 and v <= max then
      return v
    end
    if checked then
      throw(System.OverflowException(), 2)
    end
    if v < -2147483648 or v > 2147483647 then
      return 0
    end
    return v & mask
  end

  local function toSingedInt(v, mask, umask)
    v = v & mask
    local uv = v & umask
    if uv ~= v then
      v = (uv - 1) ~ umask
      if uv ~= 0 then
        v = -v
      end
    end
    return v
  end

  local function toInt(v, min, max, mask, umask, checked)
    if v >= min and v <= max then
      return v
    end
    if checked then
      throw(System.OverflowException(), 2)
    end
    return toSingedInt(v, mask, umask)
  end
  System.toInt = toInt

  function System.ToInt(v, min, max, mask, umask, checked)
    v = trunc(v)
    if v >= min and v <= max then
      return v
    end
    if checked then
      throw(System.OverflowException(), 2)
    end
    if v < -2147483648 or v > 2147483647 then
      return 0
    end
    return toSingedInt(v, mask, umask)
  end

  function System.toUInt32(v, checked)
    return toUInt(v, 4294967295, 0xffffffff, checked)
  end

  function System.ToUInt32(v, checked)
    v = trunc(v)
    if v >= 0 and v <= 4294967295 then
      return v
    end
    if checked then
      throw(System.OverflowException(), 1)
    end
    return v & 0xffffffff
  end

  function System.toInt32(v, checked)
    return toInt(v, -2147483648, 2147483647, 0xffffffff, 0x7fffffff, checked)
  end

  function System.toInt64(v, checked)
    return toInt(v, (-9223372036854775807 - 1), 9223372036854775807, 0xffffffffffffffff, 0x7fffffffffffffff, checked)
  end

  function System.toUInt64(v, checked)
    if v >= 0 then
      return v
    end
    if checked then
      throw(System.OverflowException(), 1)
    end
    return (v & 0x7fffffffffffffff) + 0x8000000000000000
  end

  function System.ToUInt64(v, checked)
    v = trunc(v)
    if v >= 0 and v <= 18446744073709551615 then
      return v
    end
    if checked then
      throw(System.OverflowException(), 1)
    end
    v = v & 0xffffffffffffffff
    local uv = v & 0x7fffffffffffffff
    if uv ~= v then
      return uv + 0x8000000000000000
    end
    return v
  end

--  ]]()
--end

local toUInt = System.toUInt
local toInt = System.toInt
local ToUInt = System.ToUInt
local ToInt = System.ToInt

function System.toByte(v, checked)
  return toUInt(v, 255, 0xff, checked)
end

function System.toSByte(v, checked)
  return toInt(v, -128, 127, 0xff, 0x7f, checked)
end

function System.toInt16(v, checked)
  return toInt(v, -32768, 32767, 0xffff, 0x7fff, checked)
end

function System.toUInt16(v, checked)
  return toUInt(v, 65535, 0xffff, checked)
end

function System.ToByte(v, checked)
  return ToUInt(v, 255, 0xff, checked)
end

function System.ToSByte(v, checked)
  return ToInt(v, -128, 127, 0xff, 0x7f, checked)
end

function System.ToInt16(v, checked)
  return ToInt(v, -32768, 32767, 0xffff, 0x7fff, checked)
end

function System.ToUInt16(v, checked)
  return ToUInt(v, 65535, 0xffff, checked)
end

function System.ToInt32(v, checked)
  v = trunc(v)
  if v >= -2147483648 and v <= 2147483647 then
    return v
  end
  if checked then
    throw(System.OverflowException(), 1)
  end
  return -2147483648
end

function System.ToInt64(v, checked)
  v = trunc(v)
  if v >= (-9223372036854775807 - 1) and v <= 9223372036854775807 then
    return v
  end
  if checked then
    throw(System.OverflowException(), 1)
  end
  return (-9223372036854775807 - 1)
end

function System.ToSingle(v, checked)
  if v >= -3.40282347E+38 and v <= 3.40282347E+38 then
    return v
  end
  if checked then
    throw(System.OverflowException(), 1)
  end
  if v > 0 then
    return 1 / 0
  else
    return -1 / 0
  end
end

function System.using(t, f)
  local dispose = t and t.Dispose
  if dispose ~= nil then
    local ok, status, ret = xpcall(f, xpcallErr, t)
    dispose(t)
    if not ok then
      error(status)
    end
    return status, ret
  else
    return f(t)
  end
end

function System.usingX(f, ...)
  local ok, status, ret = xpcall(f, xpcallErr, ...)
  for i = 1, select("#", ...) do
    local t = select(i, ...)
    if t ~= nil then
      local dispose = t.Dispose
      if dispose ~= nil then
        dispose(t)
      end
    end
  end
  if not ok then
    error(status)
  end
  return status, ret
end

function System.apply(t, f)
  f(t)
  return t
end

function System.default(T)
  return T:default()
end

function System.property(name, onlyget)
  local function g(this)
    return this[name]
  end
  if onlyget then
    return g
  end
  local function s(this, v)
    this[name] = v
  end
  return g, s
end

function System.new(cls, index, ...)
  local this = setmetatable({}, cls)
  return this, cls.__ctor__[index](this, ...)
end

function System.base(this)
  return getmetatable(getmetatable(this))
end

local equalsObj, compareObj, toString
if debugsetmetatable then
  equalsObj = function (x, y)
    if x == y then
      return true
    end
    if x == nil or y == nil then
      return false
    end
    local ix = x.EqualsObj
    if ix ~= nil then
      return ix(x, y)
    end
    local iy = y.EqualsObj
    if iy ~= nil then
      return iy(y, x)
    end
    return false
  end

  compareObj = function (a, b)
    if a == b then return 0 end
    if a == nil then return -1 end
    if b == nil then return 1 end
    local ia = a.CompareToObj
    if ia ~= nil then
      return ia(a, b)
    end
    local ib = b.CompareToObj
    if ib ~= nil then
      return -ib(b, a)
    end
    throw(System.ArgumentException("Argument_ImplementIComparable"))
  end

  toString = function (t, f, a)
    local s = t ~= nil and t:ToString(f) or ""
    if a then
      return ("%" .. a .. "s"):format(s)
    end
    return s
  end

  debugsetmetatable(nil, {
    __concat = function(a, b)
      if a == nil then
        if b == nil then
          return ""
        else
          return b
        end
      else
        return a
      end
    end,
    __add = function (a, b)
      if a == nil then
        if b == nil or type(b) == "number" then
          return nil
        end
        return b
      end
      return nil
    end,
    __sub = nilFn,
    __mul = nilFn,
    __div = nilFn,
    __mod = nilFn,
    __unm = nilFn,
    __lt = falseFn,
    __le = falseFn,

    -- lua 5.3
    __idiv = nilFn,
    __band = nilFn,
    __bor = nilFn,
    __bxor = nilFn,
    __bnot = nilFn,
    __shl = nilFn,
    __shr = nilFn,
  })
else
  equalsObj = function (x, y)
    if x == y then
      return true
    end
    if x == nil or y == nil then
      return false
    end
    local t = type(x)
    if t == "table" then
      local ix = x.EqualsObj
      if ix ~= nil then
        return ix(x, y)
      end
    elseif t == "number" then
      return System.Number.EqualsObj(x, y)
    end
    t = type(y)
    if t == "table" then
      local iy = y.EqualsObj
      if iy ~= nil then
        return iy(y, x)
      end
    end
    return false
  end

  compareObj = function (a, b)
    if a == b then return 0 end
    if a == nil then return -1 end
    if b == nil then return 1 end
    local t = type(a)
    if t == "number" then
      return System.Number.CompareToObj(a, b)
    elseif t == "boolean" then
      return System.Boolean.CompareToObj(a, b)
    else
      local ia = a.CompareToObj
      if ia ~= nil then
        return ia(a, b)
      end
    end
    t = type(b)
    if t == "number" then
      return -System.Number.CompareToObj(b, a)
    elseif t == "boolean" then
      return -System.Boolean.CompareToObj(a, b)
    else
      local ib = b.CompareToObj
      if ib ~= nil then
        return -ib(b, a)
      end
    end
    throw(System.ArgumentException("Argument_ImplementIComparable"))
  end

  toString = function (obj, f, a)
    local s
    if obj ~= nil then
      local t = type(obj)
      if t == "number" then
        if f then
          s = System.Number.ToString(obj, f)
        else
          s = tostring(obj)
        end
      elseif t == "table" then
        s = obj:ToString(f)
      elseif t == "boolean" then
        s = obj and "True" or "False"
      elseif t == "function" then
        s = "System.Delegate"
      else
        s = tostring(obj)
      end
    else
      s = ""
    end
    if a then
      return ("%" .. a .. "s"):format(s)
    end
    return s
  end
end

System.equalsObj = equalsObj
System.compareObj = compareObj
System.toString = toString

Object = defCls("System.Object", {
  __call = new,
  __ctor__ = emptyFn,
  default = nilFn,
  class = "C",
  EqualsObj = equals,
  ReferenceEquals = rawequal,
  GetHashCode = identityFn,
  EqualsStatic = equalsObj,
  GetType = false,
  ToString = function(this) return this.__name__ end
})
setmetatable(Object, { __call = new })

ValueType = defCls("System.ValueType", {
  class = "S",
  default = function(T)
    return T()
  end,
  __clone__ = function(this)
    if type(this) == "table" then
      local cls = getmetatable(this)
      local t = {}
      for k, v in pairs(this) do
        if type(v) == "table" and v.class == "S" then
          t[k] = v:__clone__()
        else
          t[k] = v
        end
      end
      return setmetatable(t, cls)
    end
    return this
  end,
  __copy__ = function (this, obj)
    for k, v in pairs(obj) do
      if type(v) == "table" and v.class == "S" then
        this[k] = v:__clone__()
      else
        this[k] = v
      end
    end
    for k, v in pairs(this) do
      if v ~= nil and rawget(obj, k) == nil then
        this[k] = nil
      end
    end
  end,
  EqualsObj = function (this, obj)
    if getmetatable(this) ~= getmetatable(obj) then return false end
    for k, v in pairs(this) do
      if not equalsObj(v, obj[k]) then
        return false
      end
    end
    return true
  end,
  GetHashCode = function (this)
    throw(System.NotSupportedException(this.__name__ .. " User-defined struct not support GetHashCode"), 1)
  end
})

local AnonymousType
AnonymousType = defCls("System.AnonymousType", {
  EqualsObj = function (this, obj)
    if getmetatable(obj) ~= AnonymousType then return false end
    for k, v in pairs(this) do
      if not equalsObj(v, obj[k]) then
        return false
      end
    end
    return true
  end
})

local function anonymousTypeCreate(T, t)
  return setmetatable(t, T)
end

local anonymousTypeMetaTable = setmetatable({ __index = Object, __call = anonymousTypeCreate }, Object)
setmetatable(AnonymousType, anonymousTypeMetaTable)

local pack, unpack = table.pack, table.unpack

local function tupleDeconstruct(t)
  return unpack(t, 1, t.n)
end

local function tupleEquals(t, other)
  for i = 1, t.n do
    if not equalsObj(t[i], other[i]) then
      return false
    end
  end
  return true
end

local function tupleEqualsObj(t, obj)
  if getmetatable(obj) ~= getmetatable(t) or t.n ~= obj.n then
    return false
  end
  return tupleEquals(t, obj)
end

local function tupleCompareTo(t, other)
  for i = 1, t.n do
    local v = compareObj(t[i], other[i])
    if v ~= 0 then
      return v
    end
  end
  return 0
end

local function tupleCompareToObj(t, obj)
  if obj == nil then return 1 end
  if getmetatable(obj) ~= getmetatable(t) or t.n ~= obj.n then
    throw(System.ArgumentException())
  end
  return tupleCompareTo(t, obj)
end

local function tupleToString(t)
  local a = { "(" }
  local count = 2
  for i = 1, t.n do
    if i ~= 1 then
      a[count] = ", "
      count = count + 1
    end
    local v = t[i]
    if v ~= nil then
      a[count] = v:ToString()
      count = count + 1
    end
  end
  a[count] = ")"
  return tconcat(a)
end

local function tupleLength(t)
  return t.n
end

local function tupleGet(t, index)
  if index < 0 or index >= t.n then
    throw(System.IndexOutOfRangeException())
  end
  return t[index + 1]
end

local function tupleGetRest(t)
  return t[8]
end

local function tupleCreate(T, ...)
  return setmetatable(pack(...), T)
end

local Tuple = defCls("System.Tuple", {
  Deconstruct = tupleDeconstruct,
  ToString = tupleToString,
  EqualsObj = tupleEqualsObj,
  CompareToObj = tupleCompareToObj,
  getLength = tupleLength,
  get = tupleGet,
  getRest = tupleGetRest
})
local tupleMetaTable = setmetatable({ __index  = Object, __call = tupleCreate }, Object)
setmetatable(Tuple, tupleMetaTable)

local ValueTuple = defStc("System.ValueTuple", {
  Deconstruct = tupleDeconstruct,
  ToString = tupleToString,
  __eq = tupleEquals,
  Equals = tupleEquals,
  EqualsObj = tupleEqualsObj,
  CompareTo = tupleCompareTo,
  CompareToObj = tupleCompareToObj,
  getLength = tupleLength,
  get = tupleGet,
  default = function ()
    throw(System.NotSupportedException("not support default(T) when T is ValueTuple"))
  end
})

local valueTupleMetaTable = setmetatable({ __index  = ValueType, __call = tupleCreate }, ValueType)
setmetatable(ValueTuple, valueTupleMetaTable)

local function recordEquals(t, other)
  if getmetatable(t) == getmetatable(other) then
    for k, v in pairs(t) do
      if not equalsObj(v, other[k]) then
        return false
      end
    end
    return true
  end
  return false
end

local function recordPrintMembers(this, builder)
  local p = pack(this.__members__())
  local n = p.n
  for i = 2, n do
    local k = p[i]
    local v = this[k]
    builder:Append(k)
    builder:Append(" = ")
    if v ~= nil then
    builder:Append(toString(v))
    end
    if i ~= n then
    builder:Append(", ")
    end
  end
  return true
end

local function recordToString(this)
  local p = pack(this.__members__())
  local n = p.n
  local t = { p[1], "{" }
  local count = 3
  for i = 2, n do
    local k = p[i]
    local v = this[k]
    t[count] = k
    t[count + 1] = "="
    if v ~= nil then
      if i ~= n then
        t[count + 2] = toString(v) .. ','
      else
        t[count + 2] = toString(v)
      end
    else
      if i ~= n then
        t[count + 2] = ','
      end
    end
    if v == nil and i == n then
      count = count + 2
    else
      count = count + 3
    end
  end
  t[count] = "}"
  return tconcat(t, ' ')
end

local function recordDeconstruct(this)
  local t = pack(this.__members__())
  for i = 2, t.n do
    t[i] = this[t[i]]
  end
  return unpack(t, 2)
end

defCls("System.RecordType", {
  __eq = recordEquals,
  __clone__ = ValueType.__clone__,
  Equals = recordEquals,
  PrintMembers = recordPrintMembers,
  ToString = recordToString,
  Deconstruct = recordDeconstruct
})

defStc("System.RecordValueType", {
  __eq = recordEquals,
  Equals = recordEquals,
  PrintMembers = recordPrintMembers,
  ToString = recordToString,
  Deconstruct = recordDeconstruct
})

local Attribute = defCls("System.Attribute")
defCls("System.FlagsAttribute", { base = { Attribute } })

local Nullable = {
  default = nilFn,
  Value = function (this)
    if this == nil then
      throw(System.InvalidOperationException("Nullable object must have a value."))
    end
    return this
  end,
  EqualsObj = equalsObj,
  GetHashCode = function (this)
    if this == nil then
      return 0
    end
    if type(this) == "table" then
      return this:GetHashCode()
    end
    return this
  end,
  clone = function (t)
    if type(t) == "table" then
      return t:__clone__()
    end
    return t
  end
}

defStc("System.Nullable", function (T)
  return {
    __genericT__ = T
  }
end, Nullable, 1)

function System.isNullable(T)
  return getmetatable(T) == Nullable
end

local Index = defStc("System.Index", {
  End = -0.0,
  Start = 0,
  IsFromEnd = function (this)
    return 1 / this < 0
  end,
  GetOffset = function (this, length)
    if 1 / this < 0 then
      return length + this
    end
    return this
  end,
  ToString = function (this)
    return ((1 / this < 0) and '^' or '') .. this
  end
})
setmetatable(Index, {
  __call = function (value, fromEnd)
    if value < 0 then
      throw(System.ArgumentOutOfRangeException("Non-negative number required."))
    end
    if fromEnd then
      if value == 0 then
        return -0.0
      end
      return -value
    end
    return value
  end
})

local function pointerAddress(p)
  local address = p[3]
  if address == nil then
    address = ssub(tostring(p), 7)
    p[3] = address
  end
  return address + p[2]
end

local Pointer
local function newPointer(t, i)
  return setmetatable({ t, i }, Pointer)
end

Pointer = {
  __index = false,
  get = function(this)
    local t, i = this[1], this[2]
    return t[i]
  end,
  set = function(this, value)
    local t, i = this[1], this[2]
    t[i] = value
  end,
  __add = function(this, count)
    return newPointer(this[1], this[2] + count)
  end,
  __sub = function(this, count)
    return newPointer(this[1], this[2] - count)
  end,
  __lt = function(t1, t2)
    return pointerAddress(t1) < pointerAddress(t2)
  end,
  __le = function(t1, t2)
    return pointerAddress(t1) <= pointerAddress(t2)
  end
}
Pointer.__index = Pointer

function System.stackalloc(t)
  return newPointer(t, 1)
end

local modules, imports = {}, {}
function System.import(f)
  imports[#imports + 1] = f
end

local namespace
local function defIn(kind, name, f)
  local namespaceName, isClass = namespace[1], namespace[2]
  if #namespaceName > 0 then
    name = namespaceName .. (isClass and "+" or ".") .. name
  end
  assert(modules[name] == nil, name)
  namespace[1], namespace[2] = name, kind == "C" or kind == "S"
  local t = f(assembly, global)
  namespace[1], namespace[2] = namespaceName, isClass
  modules[isClass and name:gsub("+", ".") or name] = function()
    return def(name, kind, t)
  end
end

namespace = {
  "",
  false,
  __index = false,
  class = function(name, f) defIn("C", name, f) end,
  struct = function(name, f) defIn("S", name, f) end,
  interface = function(name, f) defIn("I", name, f) end,
  enum = function(name, f) defIn("E", name, f) end,
  namespace = function(name, f)
    local namespaceName = namespace[1]
    name = namespaceName .. "." .. name
    namespace[1] = name
    f(namespace)
    namespace[1] = namespaceName
  end
}
namespace.__index = namespace

function System.namespace(name, f)
  if not assembly then assembly = setmetatable({}, namespace) end
  namespace[1] = name
  f(namespace)
  namespace[1], namespace[2] = "", false
end

function System.init(t)
  local path, files = t.path, t.files
  if files then
    path = (path and #path > 0) and (path .. '.') or ""
    for i = 1, #files do
      require(path .. files[i])
    end
  end

  metadatas = {}
  local types = t.types
  if types then
    local classes = {}
    for i = 1, #types do
      local name = types[i]
      local cls = assert(modules[name], name)()
      classes[i] = cls
    end
    assembly.classes = classes
  end

  for i = 1, #imports do
    imports[i](global)
  end

  local b, e = 1, #metadatas
  while true do
    for i = b, e do
      metadatas[i](global)
    end
    local len = #metadatas
    if len == e then
      break
    end
    b, e = e + 1, len
  end

  local main = t.Main
  if main then
    assembly.entryPoint = main
    System.entryAssembly = assembly
  end

  local attributes = t.assembly
  if attributes then
    if type(attributes) == "function" then
      attributes = attributes(global)
    end
    for k, v in pairs(attributes) do
      assembly[k] = v
    end
  end

  local current = assembly
  modules, imports, assembly, metadatas = {}, {}, nil, nil
  return current
end

--System.config = rawget(global, "CSharpLuaSystemConfig") or {}
--local isSingleFile = rawget(global, "CSharpLuaSingleFile")
--if not isSingleFile then
--  return function (config)
--    if config then
--      System.config = config 
--    end
--  end
--end

System.config = {}
end

-- CoreSystemLib: Interfaces.lua
do
local System = System
local defInf = System.defInf
local emptyFn = System.emptyFn

local IComparable = defInf("System.IComparable")
local IFormattable = defInf("System.IFormattable")
local IConvertible = defInf("System.IConvertible")
defInf("System.IFormatProvider")
defInf("System.ICloneable")

defInf("System.IComparable_1", emptyFn)
defInf("System.IEquatable_1", emptyFn)

defInf("System.IPromise")
defInf("System.IDisposable")

defInf("System.IStructuralComparable")
defInf("System.IStructuralEquatable")

local IEnumerable = defInf("System.IEnumerable")
local IEnumerator = defInf("System.IEnumerator")

local ICollection = defInf("System.ICollection", {
  base = { IEnumerable }
})

defInf("System.IList", {
  base = { ICollection }
})

defInf("System.IDictionary", {
  base = { ICollection }
})

local IEnumerator_1 = defInf("System.Collections.Generic.IEnumerator_1", function(T)
  return {
    base = { IEnumerator }
  }
end)
System.IEnumerator_1 = IEnumerator_1

local IEnumerable_1 = defInf("System.Collections.Generic.IEnumerable_1", function(T)
  return {
    base = { IEnumerable }
  }
end)
System.IEnumerable_1 = IEnumerable_1

local ICollection_1 = defInf("System.ICollection_1", function(T)
  return {
    base = { IEnumerable_1(T) }
  }
end)

local IReadOnlyCollection_1 = defInf("System.IReadOnlyCollection_1", function (T)
  return {
    base = { IEnumerable_1(T) }
  }
end)

defInf("System.IReadOnlyList_1", function (T)
  return {
    base = { IReadOnlyCollection_1(T) }
  }
end)

defInf('System.IDictionary_2', function(TKey, TValue)
  return {
    base = { ICollection_1(System.KeyValuePair(TKey, TValue)) }
  }
end)

defInf("System.IReadOnlyDictionary_2", function(TKey, TValue)
  return {
    base = { IReadOnlyCollection_1(System.KeyValuePair(TKey, TValue)) }
  }
end)

defInf("System.IList_1", function(T)
  return {
    base = { ICollection_1(T) }
  }
end)

defInf("System.ISet_1", function(T)
  return {
    base = { ICollection_1(T) }
  }
end)

defInf("System.IComparer")
defInf("System.IComparer_1", emptyFn)
defInf("System.IEqualityComparer")
defInf("System.IEqualityComparer_1", emptyFn)

System.enumMetatable.interface = { IComparable, IFormattable, IConvertible }
end

-- CoreSystemLib: Exception.lua
do
local System = System
local define = System.define
local Object = System.Object
local toString = System.toString

local tconcat = table.concat
local type = type
local debug = debug
local assert = assert
local select = select

local traceback = (debug and debug.traceback) or System.config.traceback or function () return "" end
System.traceback = traceback

local resource = {
  Arg_KeyNotFound = "The given key was not present in the dictionary.",
  Arg_KeyNotFoundWithKey = "The given key '%s' was not present in the dictionary.",
  Arg_WrongType = "The value '%s' is not of type '%s' and cannot be used in this generic collection.",
  Arg_ParamName_Name = "(Parameter '%s')",
  Argument_AddingDuplicate = "An item with the same key has already been added. Key: %s",
  ArgumentOutOfRange_SmallCapacity = "capacity was less than the current size.",
  InvalidOperation_EmptyQueue = "Queue empty.",
  ArgumentOutOfRange_NeedNonNegNum = "Non-negative number required.",
}

local function getResource(t, k)
  local s = resource[k]
  assert(s, k)
  return function (...)
	local n = select("#", ...)
    local f
    if n == 0 then
      f = function () return s end
    elseif n == 1 then
      f = function (x1) return s:format(toString(x1)) end
    elseif n == 2 then
      f = function (x1, x2) return s:format(toString(x1), toString(x2)) end
    elseif n == 3 then
      f = function (x1, x2, x3) return s:format(toString(x1), toString(x2), toString(x3)) end
    else
      assert(false)
    end
    t[k] = f
    return f(...)
  end
end

System.er = setmetatable({}, { __index = getResource })

local function getMessage(this)
  return this.message or ("Exception of type '%s' was thrown."):format(this.__name__)
end

local function toString(this)
  local t = { this.__name__ }
  local count = 2
  local message, innerException, stackTrace = getMessage(this), this.innerException, this.errorStack
  t[count] = ": "
  t[count + 1] = message
  count = count + 2
  if innerException then
    t[count] = "---> "
    t[count + 1] = innerException:ToString()
    count = count + 2
  end
  if stackTrace then
    t[count] = stackTrace
  end
  return tconcat(t)
end

local function ctorOfException(this, message, innerException)
  this.message = message
  this.innerException = innerException
end

local Exception = define("System.Exception", {
  __tostring = toString,
  __ctor__ = ctorOfException,
  ToString = toString,
  getMessage = getMessage,
  getInnerException = function(this) 
    return this.innerException
  end,
  getStackTrace = function(this) 
    return this.errorStack
  end,
  getData = function (this)
    local data = this.data
    if not data then
      data = System.Dictionary(Object, Object)()
      this.data = data
    end
    return data
  end,
  traceback = function(this, lv)
    this.errorStack = traceback("", lv and lv + 3 or 3)
  end
})

local SystemException = define("System.SystemException", {
  __tostring = toString,
  base = { Exception },
  __ctor__ = function (this, message, innerException)
    ctorOfException(this, message or "System error.", innerException)
  end
})

local ArgumentException = define("System.ArgumentException", {
  __tostring = toString,
  base = { SystemException },
  __ctor__ = function(this, message, paramName, innerException)
    if type(paramName) == "table" then
      paramName, innerException = nil, paramName
    end
    ctorOfException(this, message or "Value does not fall within the expected range.", innerException)
    this.paramName = paramName
    if paramName and #paramName > 0 then
      this.message = this.message .. " " .. resource.Arg_ParamName_Name:format(paramName)
    end
  end,
  getParamName = function(this) 
    return this.paramName
  end
})

define("System.ArgumentNullException", {
  __tostring = toString,
  base = { ArgumentException },
  __ctor__ = function(this, paramName, message, innerException) 
    ArgumentException.__ctor__(this, message or "Value cannot be null.", paramName, innerException)
  end
})

define("System.ArgumentOutOfRangeException", {
  __tostring = toString,
  base = { ArgumentException },
  __ctor__ = function(this, paramName, message, innerException, actualValue) 
    ArgumentException.__ctor__(this, message or "Specified argument was out of the range of valid values.", paramName, innerException)
    this.actualValue = actualValue
  end,
  getActualValue = function(this) 
    return this.actualValue
  end
})

define("System.IndexOutOfRangeException", {
   __tostring = toString,
   base = { SystemException },
   __ctor__ = function (this, message, innerException)
    ctorOfException(this, message or "Index was outside the bounds of the array.", innerException)
  end
})

define("System.CultureNotFoundException", {
  __tostring = toString,
  base = { ArgumentException },
  __ctor__ = function(this, paramName, invalidCultureName, message, innerException, invalidCultureId) 
    if not message then 
      message = "Culture is not supported."
      if paramName then
        message = message .. "\nParameter name = " .. paramName
      end
      if invalidCultureName then
        message = message .. "\n" .. invalidCultureName .. " is an invalid culture identifier."
      end
    end
    ArgumentException.__ctor__(this, message, paramName, innerException)
    this.invalidCultureName = invalidCultureName
    this.invalidCultureId = invalidCultureId
  end,
  getInvalidCultureName = function(this)
    return this.invalidCultureName
  end,
  getInvalidCultureId = function(this) 
    return this.invalidCultureId
  end
})

local KeyNotFoundException = define("System.Collections.Generic.KeyNotFoundException", {
  __tostring = toString,
  base = { SystemException },
  __ctor__ = function(this, message, innerException) 
    ctorOfException(this, message or resource.Arg_KeyNotFound, innerException)
  end
})
System.KeyNotFoundException = KeyNotFoundException

local ArithmeticException = define("System.ArithmeticException", {
  __tostring = toString,
  base = { SystemException },
  __ctor__ = function(this, message, innerException) 
    ctorOfException(this, message or "Overflow or underflow in the arithmetic operation.", innerException)
  end
})

define("System.DivideByZeroException", {
  __tostring = toString,
  base = { ArithmeticException },
  __ctor__ = function(this, message, innerException) 
    ArithmeticException.__ctor__(this, message or "Attempted to divide by zero.", innerException)
  end
})

define("System.OverflowException", {
  __tostring = toString,
  base = { ArithmeticException },
  __ctor__ = function(this, message, innerException) 
    ArithmeticException.__ctor__(this, message or "Arithmetic operation resulted in an overflow.", innerException)
  end
})

define("System.FormatException", {
  __tostring = toString,
  base = { SystemException },
  __ctor__ = function(this, message, innerException) 
    ctorOfException(this, message or "Invalid format.", innerException)
  end
})

define("System.InvalidCastException", {
  __tostring = toString,
  base = { SystemException },
  __ctor__ = function(this, message, innerException) 
    ctorOfException(this, message or "Specified cast is not valid.", innerException)
  end
})

local InvalidOperationException = define("System.InvalidOperationException", {
  __tostring = toString,
  base = { SystemException },
  __ctor__ = function(this, message, innerException) 
    ctorOfException(this, message or "Operation is not valid due to the current state of the object.", innerException)
  end
})

define("System.NotImplementedException", {
  __tostring = toString,
  base = { SystemException },
  __ctor__ = function(this, message, innerException) 
    ctorOfException(this, message or "The method or operation is not implemented.", innerException)
  end
})

define("System.NotSupportedException", {
  __tostring = toString,
  base = { SystemException },
  __ctor__ = function(this, message, innerException) 
    ctorOfException(this, message or "Specified method is not supported.", innerException)
  end
})

define("System.NullReferenceException", {
  __tostring = toString,
  base = { SystemException },
  __ctor__ = function(this, message, innerException) 
    ctorOfException(this, message or "Object reference not set to an instance of an object.", innerException)
  end
})

define("System.RankException", {
  __tostring = toString,
  base = { Exception },
  __ctor__ = function(this, message, innerException) 
    ctorOfException(this, message or "Attempted to operate on an array with the incorrect number of dimensions.", innerException)
  end
})

define("System.TypeLoadException", {
  __tostring = toString,
  base = { Exception },
  __ctor__ = function(this, message, innerException) 
    ctorOfException(this, message or "Failed when load type.", innerException)
  end
})

define("System.ObjectDisposedException", {
  __tostring = toString,
  base = { InvalidOperationException },
  __ctor__ = function(this, objectName, message, innerException)
    ctorOfException(this, message or "Cannot access a disposed object.", innerException)
    this.objectName = objectName
    if objectName and #objectName > 0 then
      this.message = this.message .. "\nObject name: '" .. objectName .. "'."
    end
  end
})

local function toStringOfAggregateException(this)
  local t = { toString(this) }
  local count = 2
  for i = 0, this.innerExceptions:getCount() - 1 do
    t[count] = "\n---> (Inner Exception #"
    t[count + 1] = i
    t[count + 2] = ") "
    t[count + 3] = this.innerExceptions:get(i):ToString()
    t[count + 4] = "<---\n"
    count = count + 5
  end
  return tconcat(t)
end

define("System.AggregateException", {
  ToString = toStringOfAggregateException,
  __tostring = toStringOfAggregateException,
  base = { Exception },
  __ctor__ = function (this, message, innerExceptions)
    if type(message) == "table" then
      message, innerExceptions = nil, message
    end
    Exception.__ctor__(this, message or "One or more errors occurred.")
    local ReadOnlyCollection = System.ReadOnlyCollection(Exception)
    if innerExceptions then
      if System.is(innerExceptions, Exception) then
        local list = System.List(Exception)()
        list:Add(innerExceptions)
        this.innerExceptions = ReadOnlyCollection(list)
      else
        if not System.isArrayLike(innerExceptions) then
          innerExceptions = System.Array.toArray(innerExceptions)
        end
        this.innerExceptions = ReadOnlyCollection(innerExceptions)
      end
    else
      this.innerExceptions = ReadOnlyCollection(System.Array.Empty(Exception))
    end
  end,
  getInnerExceptions = function (this)
    return this.innerExceptions
  end
})

System.SwitchExpressionException = define("System.Runtime.CompilerServices", {
  __tostring = toString,
  base = { InvalidOperationException },
  __ctor__ = function(this, message, innerException)
    ctorOfException(this, message or "Non-exhaustive switch expression failed to match its input.", innerException)
  end
})
end

-- CoreSystemLib: Number.lua
do
local System = System
local throw = System.throw
local define = System.defStc
local equals = System.equals
local zeroFn = System.zeroFn
local identityFn = System.identityFn
local debugsetmetatable = System.debugsetmetatable

local IComparable = System.IComparable
local IComparable_1 = System.IComparable_1
local IEquatable_1 = System.IEquatable_1
local IConvertible = System.IConvertible
local IFormattable = System.IFormattable

local ArgumentException = System.ArgumentException
local ArgumentNullException = System.ArgumentNullException
local FormatException = System.FormatException
local OverflowException = System.OverflowException

local type = type
local tonumber = tonumber
local floor = math.floor
local setmetatable = setmetatable
local tostring = tostring

local function hexForamt(x, n)
  return n == "" and "%" .. x or "%0" .. n .. x
end

local function floatForamt(x, n)
  return n == "" and "%.f" or "%." .. n .. 'f'
end

local function integerFormat(x, n)
  return n == "" and "%d" or "%0" .. n .. 'd'
end

local function exponentialFormat(x, n)
  return n == "" and "%" .. x or "%." .. n .. x
end

local formats = {
  ['x'] = hexForamt,
  ['X'] = hexForamt,
  ['f'] = floatForamt,
  ['F'] = floatForamt,
  ['d'] = integerFormat,
  ['D'] = integerFormat,
  ['e'] = exponentialFormat,
  ['E'] = exponentialFormat
}

local function toStringWithFormat(this, format)
  if #format ~= 0 then
    local i, j, x, n = format:find("^%s*([xXdDfFeE])(%d?)%s*$")
    if i then
      local f = formats[x]
      if f then
        format = f(x, n)
      end
      return format:format(this)
    end
  end
  return tostring(this)
end

local function toString(this, format)
  if format then
    return toStringWithFormat(this, format)
  end
  return tostring(this)
end

local function compareInt(this, v)
  if this < v then return -1 end
  if this > v then return 1 end
  return 0
end

local function inherits(_, T)
  return { IComparable, IComparable_1(T), IEquatable_1(T), IConvertible, IFormattable }
end

local Int = define("System.Int", {
  base = inherits,
  default = zeroFn,
  CompareTo = compareInt,
  Equals = equals,
  ToString = toString,
  GetHashCode = identityFn,
  CompareToObj = function (this, v)
    if v == nil then return 1 end
    if type(v) ~= "number" then
      throw(ArgumentException("Arg_MustBeInt"))
    end
    return compareInt(this, v)
  end,
  EqualsObj = function (this, v)
    if type(v) ~= "number" then
      return false
    end
    return this == v
  end
})
Int.__call = zeroFn

local function parseInt(s, min, max)
  if s == nil then
    return nil, 1
  end
  local v = tonumber(s)
  if v == nil or v ~= floor(v) then
    return nil, 2
  end
  if v < min or v > max then
    return nil, 3
  end
  return v
end

local function tryParseInt(s, min, max)
  local v = parseInt(s, min, max)
  if v then
    return true, v
  end
  return false, 0
end

local function parseIntWithException(s, min, max)
  local v, err = parseInt(s, min, max)
  if v then
    return v
  end
  if err == 1 then
    throw(ArgumentNullException())
  elseif err == 2 then
    throw(FormatException())
  else
    throw(OverflowException())
  end
end

local SByte = define("System.SByte", {
  Parse = function (s)
    return parseIntWithException(s, -128, 127)
  end,
  TryParse = function (s)
    return tryParseInt(s, -128, 127)
  end
})
setmetatable(SByte, Int)

local Byte = define("System.Byte", {
  Parse = function (s)
    return parseIntWithException(s, 0, 255)
  end,
  TryParse = function (s)
    return tryParseInt(s, 0, 255)
  end
})
setmetatable(Byte, Int)

local Int16 = define("System.Int16", {
  Parse = function (s)
    return parseIntWithException(s, -32768, 32767)
  end,
  TryParse = function (s)
    return tryParseInt(s, -32768, 32767)
  end
})
setmetatable(Int16, Int)

local UInt16 = define("System.UInt16", {
  Parse = function (s)
    return parseIntWithException(s, 0, 65535)
  end,
  TryParse = function (s)
    return tryParseInt(s, 0, 65535)
  end
})
setmetatable(UInt16, Int)

local Int32 = define("System.Int32", {
  Parse = function (s)
    return parseIntWithException(s, -2147483648, 2147483647)
  end,
  TryParse = function (s)
    return tryParseInt(s, -2147483648, 2147483647)
  end
})
setmetatable(Int32, Int)

local UInt32 = define("System.UInt32", {
  Parse = function (s)
    return parseIntWithException(s, 0, 4294967295)
  end,
  TryParse = function (s)
    return tryParseInt(s, 0, 4294967295)
  end
})
setmetatable(UInt32, Int)

local Int64 = define("System.Int64", {
  Parse = function (s)
    return parseIntWithException(s, (-9223372036854775807 - 1), 9223372036854775807)
  end,
  TryParse = function (s)
    return tryParseInt(s, (-9223372036854775807 - 1), 9223372036854775807)
  end
})
setmetatable(Int64, Int)

local UInt64 = define("System.UInt64", {
  Parse = function (s)
    return parseIntWithException(s, 0, 18446744073709551615.0)
  end,
  TryParse = function (s)
    return tryParseInt(s, 0, 18446744073709551615.0)
  end
})
setmetatable(UInt64, Int)

local nan = 0 / 0
local posInf = 1 / 0
local negInf = - 1 / 0
local nanHashCode = {}

--http://lua-users.org/wiki/InfAndNanComparisons
local function isNaN(v)
  return v ~= v
end

local function compareDouble(this, v)
  if this < v then return -1 end
  if this > v then return 1 end
  if this == v then return 0 end
  if isNaN(this) then
    return isNaN(v) and 0 or -1
  else
    return 1
  end
end

local function equalsDouble(this, v)
  if this == v then return true end
  return isNaN(this) and isNaN(v)
end

local function equalsObj(this, v)
  if type(v) ~= "number" then
    return false
  end
  return equalsDouble(this, v)
end

local function getHashCode(this)
  return isNaN(this) and nanHashCode or this
end

local Number = define("System.Number", {
  base = inherits,
  default = zeroFn,
  CompareTo = compareDouble,
  Equals = equalsDouble,
  ToString = toString,
  NaN = nan,
  IsNaN = isNaN,
  NegativeInfinity = negInf,
  PositiveInfinity = posInf,
  EqualsObj = equalsObj,
  GetHashCode = getHashCode,
  CompareToObj = function (this, v)
    if v == nil then return 1 end
    if type(v) ~= "number" then
      throw(ArgumentException("Arg_MustBeNumber"))
    end
    return compareDouble(this, v)
  end,
  IsFinite = function (v)
    return v ~= posInf and v ~= negInf and not isNaN(v)
  end,
  IsInfinity = function (v)
    return v == posInf or v == negInf
  end,
  IsNegativeInfinity = function (v)
    return v == negInf
  end,
  IsPositiveInfinity = function (v)
    return v == posInf
  end
})
Number.__call = zeroFn
if debugsetmetatable then
  debugsetmetatable(0, Number)
end

local function parseDouble(s)
  if s == nil then
    return nil, 1
  end
  local v = tonumber(s)
  if v == nil then
    return nil, 2
  end
  return v
end

local function parseDoubleWithException(s)
  local v, err = parseDouble(s)
  if v then
    return v
  end
  if err == 1 then
    throw(ArgumentNullException())
  else
    throw(FormatException())
  end
end

local Single = define("System.Single", {
  Parse = function (s)
    local v = parseDoubleWithException(s)
    if v < -3.40282347E+38 or v > 3.40282347E+38 then
      throw(OverflowException())
    end
    return v
  end,
  TryParse = function (s)
    local v = parseDouble(s)
    if v and v >= -3.40282347E+38 and v < 3.40282347E+38 then
      return true, v
    end
    return false, 0
  end
})
setmetatable(Single, Number)

local Double = define("System.Double", {
  Parse = parseDoubleWithException,
  TryParse = function (s)
    local v = parseDouble(s)
    if v then
      return true, v
    end
    return false, 0
  end
})
setmetatable(Double, Number)

if not debugsetmetatable then
  local NullReferenceException = System.NullReferenceException
  local systemToString = System.toString

  function System.ObjectEqualsObj(this, obj)
    if this == nil then throw(NullReferenceException()) end
    local t = type(this)
    if t == "number" then
      return equalsObj(this, obj)
    elseif t == "table" then
      return this:EqualsObj(obj)
    end
    return this == obj
  end

  function System.ObjectGetHashCode(this)
    if this == nil then throw(NullReferenceException()) end
    local t = type(this)
    if t == "number" then
      return getHashCode(this)
    elseif t == "table" then
      return this:GetHashCode()
    end
    return this
  end

  function System.ObjectToString(this)
    if this == nil then throw(NullReferenceException()) end
    return systemToString(this)
  end

  function System.IComparableCompareTo(this, other)
    if this == nil then throw(NullReferenceException()) end
    local t = type(this)
    if t == "number" then
      return compareDouble(this, other)
    elseif t == "boolean" then
      return System.Boolean.CompareTo(this, other)
    end
    return this:CompareTo(other)
  end

  function System.IEquatableEquals(this, other)
    if this == nil then throw(NullReferenceException()) end
    local t = type(this)
    if t == "number" then
      return equalsDouble(this, other)
    elseif t == "boolean" then
      return System.Boolean.Equals(this, other)
    end
    return this:Equals(other)
  end

  function System.IFormattableToString(this, format, formatProvider)
    if this == nil then throw(NullReferenceException()) end
    local t = type(this)
    if t == "number" then
      return toString(this, format, formatProvider)
    end
    return this:ToString(format, formatProvider)
  end
end
end

-- CoreSystemLib: Char.lua
do
local System = System
local throw = System.throw
local Int = System.Int
local ArgumentNullException = System.ArgumentNullException
local ArgumentOutOfRangeException = System.ArgumentOutOfRangeException

local setmetatable = setmetatable
local byte = string.byte

local isSeparatorTable = {
  [0x2028] = true,
  [0x2029] = true,
  [0x0020] = true,
  [0x00A0] = true,
  [0x1680] = true,
  [0x180E] = true,
  [0x202F] = true,
  [0x205F] = true,
  [0x3000] = true,
}

local isSymbolTable = {
  [36] = true,
  [43] = true,
  [60] = true,
  [61] = true,
  [62] = true,
  [94] = true,
  [96] = true,
  [124] = true,
  [126] = true,
  [172] = true,
  [180] = true,
  [182] = true,
  [184] = true,
  [215] = true,
  [247] = true,
}

--https://msdn.microsoft.com/zh-cn/library/t809ektx(v=vs.110).aspx
local isWhiteSpace = {
  [0x0020] = true,
  [0x00A0] = true,
  [0x1680] = true,
  [0x202F] = true,
  [0x205F] = true,
  [0x3000] = true,
  [0x2028] = true,
  [0x2029] = true,
  [0x0085] = true,
}

local function get(s, index)
  if s == nil then throw(ArgumentNullException("s")) end
  local c = byte(s, index + 1)
  if not c then throw(ArgumentOutOfRangeException("index")) end
  return c
end

local function isDigit(c, index)
  if index then
    c = get(c, index)
  end
  return (c >= 48 and c <= 57)
end

-- https://msdn.microsoft.com/zh-cn/library/yyxz6h5w(v=vs.110).aspx
local function isLetter(c, index)
  if index then
    c = get(c, index)
  end
  if c < 128 then
    return (c >= 65 and c <= 90) or (c >= 97 and c <= 122)
  else
    return (c >= 0x0400 and c <= 0x042F)
      or (c >= 0x03AC and c <= 0x03CE)
      or (c == 0x01C5 or c == 0x1FFC)
      or (c >= 0x02B0 and c <= 0x02C1)
      or (c >= 0x1D2C and c <= 0x1D61)
      or (c >= 0x05D0 and c <= 0x05EA)
      or (c >= 0x0621 and c <= 0x063A)
      or (c >= 0x4E00 and c <= 0x9FC3)
  end
end

local Char = System.defStc("System.Char", {
  ToString = string.char,
  CompareTo = Int.CompareTo,
  CompareToObj = Int.CompareToObj,
  Equals = Int.Equals,
  EqualsObj = Int.EqualsObj,
  GetHashCode = Int.GetHashCode,
  default = Int.default,
  IsControl = function (c, index)
    if index then
      c = get(c, index)
    end
    return (c >=0 and c <= 31) or (c >= 127 and c <= 159)
  end,
  IsDigit = isDigit,
  IsLetter = isLetter,
  IsLetterOrDigit = function (c, index)
    if index then
      c = get(c, index)
    end
    return isDigit(c) or isLetter(c)
  end,
  IsLower = function (c, index)
    if index then
      c = get(c, index)
    end
    return (c >= 97 and c <= 122) or (c >= 945 and c <= 969)
  end,
  IsNumber = function (c, index)
    if index then
      c = get(c, index)
    end
    return (c >= 48 and c <= 57) or c == 178 or c == 179 or c == 185 or c == 188 or c == 189 or c == 190
  end,
  IsPunctuation = function (c, index)
    if index then
      c = get(c, index)
    end
    if c < 256 then
      return (c >= 0x0021 and c <= 0x0023)
        or (c >= 0x0025 and c <= 0x002A)
        or (c >= 0x002C and c <= 0x002F)
        or (c >= 0x003A and c <= 0x003B)
        or (c >= 0x003F and c <= 0x0040)
        or (c >= 0x005B and c <= 0x005D)
        or c == 0x5F or c == 0x7B or c == 0x007D or c == 0x00A1 or c == 0x00AB or c == 0x00AD or c == 0x00B7 or c == 0x00BB or c == 0x00BF
    end
    return false
  end,
  IsSeparator = function (c, index)
    if index then
      c = get(c, index)
    end
    return (c >= 0x2000 and c <= 0x200A) or isSeparatorTable[c] == true
  end,
  IsSymbol = function (c, index)
    if index then
      c = get(c, index)
    end
    if c < 256 then
      return (c >= 162 and c <= 169) or (c >= 174 and c <= 177) or isSymbolTable(c) == true
    end
    return false
  end,
  IsUpper = function (c, index)
    if index then
      c = get(c, index)
    end
    return (c >= 65 and c <= 90) or (c >= 913 and c <= 937)
  end,
  IsWhiteSpace = function (c, index)
    if index then
      c = get(c, index)
    end
    return (c >= 0x2000 and c <= 0x200A) or (c >= 0x0009 and c <= 0x000d) or isWhiteSpace[c] == true
  end,
  Parse = function (s)
    if s == nil then
      throw(System.ArgumentNullException())
    end
    if #s ~= 1 then
      throw(System.FormatException())
    end
    return s:byte()
  end,
  TryParse = function (s)
    if s == nil or #s ~= 1 then
      return false, 0
    end
    return true, s:byte()
  end,
  ToLower = function (c)
    if (c >= 65 and c <= 90) or (c >= 913 and c <= 937) then
      return c + 32
    end
    return c
  end,
  ToUpper = function (c)
    if (c >= 97 and c <= 122) or (c >= 945 and c <= 969) then
      return c - 32
    end
    return c
  end,
  IsHighSurrogate = function (c, index)
    if index then
      c = get(c, index)
    end
    return c >= 0xD800 and c <= 0xDBFF
  end,
  IsLowSurrogate = function (c, index)
    if index then
      c = get(c, index)
    end
    return c >= 0xDC00 and c <= 0xDFFF
  end,
  IsSurrogate = function (c, index)
    if index then
      c = get(c, index)
    end
    return c >= 0xD800 and c <= 0xDFFF
  end,
  base = function (_, T)
    return { System.IComparable, System.IComparable_1(T), System.IEquatable_1(T) }
  end
})

local ValueType = System.ValueType
local charMetaTable = setmetatable({ __index = ValueType, __call = Char.default }, ValueType)
setmetatable(Char, charMetaTable)
end

-- CoreSystemLib: String.lua
do
local System = System
local Char = System.Char
local throw = System.throw
local emptyFn = System.emptyFn
local lengthFn = System.lengthFn
local systemToString = System.toString
local debugsetmetatable = System.debugsetmetatable
local ArgumentException = System.ArgumentException
local ArgumentNullException = System.ArgumentNullException
local ArgumentOutOfRangeException = System.ArgumentOutOfRangeException
local FormatException = System.FormatException
local IndexOutOfRangeException = System.IndexOutOfRangeException

local string = string
local char = string.char
local rep = string.rep
local lower = string.lower
local upper = string.upper
local byte = string.byte
local sub = string.sub
local find = string.find
local gsub = string.gsub

local table = table
local tconcat = table.concat
local unpack = table.unpack
local getmetatable = getmetatable
local setmetatable = setmetatable
local select = select
local type = type
local tonumber = tonumber
local String

local function toString(t, isch, format)
  if isch then return char(t) end
  return systemToString(t, format)
end

local function checkIndex(value, startIndex, count)
  if value == nil then throw(ArgumentNullException("value")) end
  local len = #value
  if not startIndex then
    startIndex, count = 0, len
  elseif not count then
    if startIndex < 0 or startIndex > len then
      throw(ArgumentOutOfRangeException("startIndex"))
    end
    count = len - startIndex
  else
    if startIndex < 0 or startIndex > len then
      throw(ArgumentOutOfRangeException("startIndex"))
    end
    if count < 0 or count > len - startIndex then
      throw(ArgumentOutOfRangeException("count"))
    end
  end
  return startIndex, count, len
end

local function ctor(String, value, startIndex, count)
  if type(value) == "number" then
    if startIndex <= 0 then throw(ArgumentOutOfRangeException("count")) end
    return rep(char(value), startIndex)
  end
  startIndex, count = checkIndex(value, startIndex, count)
  return char(unpack(value, startIndex + 1, startIndex + count))
end

local function get(this, index)
  local c = byte(this, index + 1)
  if not c then
    throw(IndexOutOfRangeException())
  end
  return c
end

local function compare(strA, strB, ignoreCase)
  if strA == nil then
    if strB == nil then
      return 0
    end
    return -1
  elseif strB == nil then
    return 1
  end

  if ignoreCase then
    strA, strB = lower(strA), lower(strB)
  end

  if strA < strB then return -1 end
  if strA > strB then return 1 end
  return 0
end

local function compareFull(...)
  local n = select("#", ...)
  if n == 2 then
    return compare(...)
  elseif n == 3 then
    local strA, strB, ignoreCase = ...
    if type(ignoreCase) == "number" then
      ignoreCase = ignoreCase % 2 ~= 0
    end
    return compare(strA, strB, ignoreCase)
  elseif n == 4 then
    local strA, strB, ignoreCase, options = ...
    if type(options) == "number" then
      ignoreCase = options == 1 or options == 268435456
    end
    return compare(strA, strB, ignoreCase)
  else
    local strA, indexA, strB, indexB, length, ignoreCase, options = ...
    if type(ignoreCase) == "number" then
      ignoreCase = ignoreCase % 2 ~= 0
    elseif type(options) == "number" then
      ignoreCase = options == 1 or options == 268435456
    end
    checkIndex(strA, indexA, length)
    checkIndex(strB, indexB, length)
    strA, strB = sub(strA, indexA + 1, indexA +  length), sub(strB, indexB + 1, indexB + length)
    return compare(strA, strB, ignoreCase) 
  end
end

local function concat(...)
  local t = {}
  local count = 1
  local len = select("#", ...)
  if len == 1 then
    local v = ...
    if System.isEnumerableLike(v) then
      local isch = v.__genericT__ == Char
      for _, v in System.each(v) do
        t[count] = toString(v, isch)
        count = count + 1
      end
    else
      return toString(v)
    end
  else
    for i = 1, len do
      local v = select(i, ...)
      t[count] = toString(v)
      count = count + 1
    end
  end
  return tconcat(t)
end

local function equals(this, value, comparisonType)
  if not comparisonType then
    return this == value
  end
  return compare(this, value, comparisonType % 2 ~= 0) == 0
end

local function throwFormatError()
  throw(FormatException("Input string was not in a correct format."))
end

local function formatBuild(format, len, select, ...)
  local t, count = {}, 1
  local i, j, s = 1
  while true do
    local startPos  = i
    while true do
      i, j, s = find(format, "([{}])", i)
      if not i then
        if count == 1 then
          return format
        end
        t[count] = sub(format, startPos)
        return table.concat(t)
      end
      local pos = i - 1
      i = i + 1
      local c = byte(format, i)
      if not c then throwFormatError() end
      if s == '{' then
        if c == 123 then
          i = i + 1
        else
          pos = i - 2
          if pos >= startPos then
            t[count] = sub(format, startPos, pos)
            count = count + 1
          end
          break
        end
      else
        if c == 125 then
          i = i + 1
        else
          throwFormatError()
        end
      end
      if pos >= startPos then
        t[count] = sub(format, startPos, pos)
        count = count + 1
      end
      t[count] = s
      count = count + 1
      startPos = i
    end
    local r, alignment, formatString
    i, j, s, r = find(format, "^(%d+)(.-)}", i)
    if not i then throwFormatError() end
    s = tonumber(s) + 1
    if s > len then throwFormatError() end
    if r ~= "" then
      local i, j, c, d = find(r, "^,([-]?)(%d+)")
      if i then
        alignment = tonumber(d)
        if c == '-' then alignment = -alignment end
        i = j + 1
      end
      i, j, c = find(r, "^:(.*)$", i)
      if i then
        formatString = c
      elseif not alignment then
        throwFormatError()
      end
    end
    s = select(s, ...)
    if s ~= nil and s ~= System.null then
      s = toString(s, false, formatString)
      if alignment then
        s = ("%" .. alignment .. "s"):format(s)
      end
      t[count] = s
      count = count + 1
    end
    i = j + 1
  end
end

local function selectTable(i, t)
  return t[i]
end

local function format(format, ...)
  if format == nil then throw(ArgumentNullException()) end
  local len = select("#", ...)
  if len == 1 then
    local args = ...
    if System.isArrayLike(args) then
      return formatBuild(format, #args, selectTable, args)
    end
  end
  return formatBuild(format, len, select, ...)
end

local function isNullOrEmpty(value)
  return value == nil or #value == 0
end

local function isNullOrWhiteSpace(value)
  return value == nil or find(value, "^%s*$") ~= nil
end

local function joinEnumerable(separator, values)
  if values == nil then throw(ArgumentNullException("values")) end
  if type(separator) == "number" then
    separator = char(separator)
  end
  local isch = values.__genericT__ == Char
  local t = {}
  local len = 1
  for _, v in System.each(values) do
    if v ~= nil then
      t[len] = toString(v, isch)
      len = len + 1
    end
  end
  return tconcat(t, separator)
end

local function joinParams(separator, ...)
  if type(separator) == "number" then
    separator = char(separator)
  end
  local t = {}
  local len = 1
  local n = select("#", ...)
  if n == 1 then
    local values = ...
    if System.isArrayLike(values) then
      for i = 0, #values - 1 do
        local v = values:get(i)
        if v ~= nil then
          t[len] = toString(v)
          len = len + 1
        end
      end
      return tconcat(t, separator)
    end
  end
  for i = 1, n do
    local v = select(i, ...)
    if v ~= nil then
      t[len] = toString(v)
      len = len + 1
    end
  end
  return tconcat(t, separator)
end

local function join(separator, value, startIndex, count)
  if type(separator) == "number" then
    separator = char(separator)
  end
  local t = {}
  local len = 1
  if startIndex then
    checkIndex(value, startIndex, count)
    for i = startIndex + 1, startIndex + count do
      local v = value[i]
      if v ~= System.null then
        t[len] = v
        len = len + 1
      end
    end
  else
    for _, v in System.each(value) do
      if v ~= nil then
        t[len] = v
        len = len + 1
      end
    end
  end
  return tconcat(t, separator)
end

local function compareToObj(this, v)
  if v == nil then return 1 end
  if type(v) ~= "string" then
    throw(ArgumentException("Arg_MustBeString"))
  end
  return compare(this, v)
end

local function escape(s)
  return gsub(s, "([%%%^%.])", "%%%1")
end

local function contains(this, value, comparisonType)
  if value == nil then throw(ArgumentNullException("value")) end
  if type(value) == "number" then
    value = char(value)
  end
  if comparisonType then
    local ignoreCase = comparisonType % 2 ~= 0
    if ignoreCase then
      this, value = lower(this), lower(value)
    end
  end
  return find(this, escape(value)) ~= nil
end

local function copyTo(this, sourceIndex, destination, destinationIndex, count)
  if destination == nil then throw(ArgumentNullException("destination")) end
  if count < 0 then throw(ArgumentOutOfRangeException("count")) end
  local len = #this
  if sourceIndex < 0 or count > len - sourceIndex then throw(ArgumentOutOfRangeException("sourceIndex")) end
  if destinationIndex > #destination - count or destinationIndex < 0 then throw(ArgumentOutOfRangeException("destinationIndex")) end
  if count > 0 then
    destinationIndex = destinationIndex + 1
    for i = sourceIndex + 1, sourceIndex + count do
      destination[destinationIndex] = byte(this, i)
      destinationIndex = destinationIndex + 1
    end
  end
end

local function endsWith(this, suffix)
  return suffix == "" or sub(this, -#suffix) == suffix
end

local function equalsObj(this, v)
  if type(v) == "string" then
    return this == v
  end
  return false
end

local CharEnumerator = System.define("System.CharEnumerator", {
  base = { System.IEnumerator_1(System.Char), System.IDisposable, System.ICloneable },
  getCurrent = System.getCurrent,
  Dispose = emptyFn,
  MoveNext = function (this)
    local index, s = this.index, this.s
    if index <= #s then
      this.current = byte(s, index)
      this.index = index + 1
      return true
    end
    return false
  end
})

local function getEnumerator(this)
  return setmetatable({ s = this, index = 1 }, CharEnumerator)
end

local function getTypeCode()
  return 18
end

local function indexOf(this, value, startIndex, count, comparisonType)
  if value == nil then throw(ArgumentNullException("value")) end
  startIndex, count = checkIndex(this, startIndex, count)
  if type(value) == "number" then value = char(value) end
  local ignoreCase = comparisonType and comparisonType % 2 ~= 0
  if ignoreCase then
    this, value = lower(this), lower(value)
  end
  local i, j = find(this, escape(value), startIndex + 1)
  if i then
    local e = startIndex + count
    if j <= e then
      return i - 1
    end
    return - 1
  end
  return -1
end

local function indexOfAny(this, anyOf, startIndex, count)
  if anyOf == nil then throw(ArgumentNullException("chars")) end
  startIndex, count = checkIndex(this, startIndex, count)
  anyOf = "[" .. escape(char(unpack(anyOf))) .. "]"
  local i, j = find(this, anyOf, startIndex + 1)
  if i then
    local e = startIndex + count
    if j <= e then
      return i - 1
    end
    return - 1
  end
  return -1
end

local function insert(this, startIndex, value) 
  if value == nil then throw(ArgumentNullException("value")) end
  if startIndex < 0 or startIndex > #this then throw(ArgumentOutOfRangeException("startIndex")) end
  return sub(this, 1, startIndex) .. value .. sub(this, startIndex + 1)
end

local function chechLastIndexOf(value, startIndex, count)
  if value == nil then throw(ArgumentNullException("value")) end
  local len = #value
  if not startIndex then
    startIndex, count = len - 1, len
  elseif not count then
    count = len == 0 and 0 or (startIndex + 1)
  end
  if len == 0 then
    if startIndex ~= -1 and startIndex ~= 0 then
      throw(ArgumentOutOfRangeException("startIndex"))
    end
    if count ~= 0 then
      throw(ArgumentOutOfRangeException("count"))
    end
  end
  if startIndex < 0 or startIndex >= len then
    throw(ArgumentOutOfRangeException("startIndex"))
  end
  if count < 0 or startIndex - count + 1 < 0 then
    throw(ArgumentOutOfRangeException("count"))
  end
  return startIndex, count, len
end

local function lastIndexOf(this, value, startIndex, count, comparisonType)
  if value == nil then throw(ArgumentNullException("value")) end
  startIndex, count = chechLastIndexOf(this, startIndex, count)
  if type(value) == "number" then value = char(value) end
  local ignoreCase = comparisonType and comparisonType % 2 ~= 0
  if ignoreCase then
    this, value = lower(this), lower(value)
  end
  value = escape(value)
  local e = startIndex + 1
  local f = e - count + 1
  local index = -1
  while true do
    local i, j = find(this, value, f)
    if not i or j > e then
      break
    end
    index = i - 1
    f = j + 1
  end
  return index
end

local function lastIndexOfAny(this, anyOf, startIndex, count)
  if anyOf == nil then throw(ArgumentNullException("chars")) end
  startIndex, count = chechLastIndexOf(this, startIndex, count)
  anyOf = "[" .. escape(char(unpack(anyOf))) .. "]"
  local f, e = startIndex - count + 1, startIndex + 1
  local index = -1
  while true do
    local i, j = find(this, anyOf, f)
    if not i or j > e then
      break
    end
    index = i - 1
    f = j + 1
  end
  return index
end

local function padLeft(this, totalWidth, paddingChar)
  local len = #this;
  if len >= totalWidth then
    return this
  else
    paddingChar = paddingChar or 0x20
    return rep(char(paddingChar), totalWidth - len) .. this
  end
end

local function padRight(this, totalWidth, paddingChar)
  local len = #this
  if len >= totalWidth then
    return this
  else
    paddingChar = paddingChar or 0x20
    return this .. rep(char(paddingChar), totalWidth - len)
  end
end

local function remove(this, startIndex, count)
  startIndex, count = checkIndex(this, startIndex, count)
  return sub(this, 1, startIndex) .. sub(this, startIndex + 1 + count)
end

local function replace(this, a, b)
  if type(a) == "number" then
    a, b = char(a), char(b)
  end
  return gsub(this, escape(a), b)
end

local function findAny(s, strings, startIndex)
  local findBegin, findEnd
  for i = 1, #strings do
    local posBegin, posEnd = find(s, escape(strings[i]), startIndex)
    if posBegin then
      if not findBegin or posBegin < findBegin then
        findBegin, findEnd = posBegin, posEnd
      else
        break
      end
    end
  end
  return findBegin, findEnd
end

local function split(this, strings, count, options)
  local t = {}
  local find = find
  if type(strings) == "table" then
    if #strings == 0 then
      return t
    end

    if type(strings[1]) == "string" then
      find = findAny
    else
      strings = char(unpack(strings))
      strings = escape(strings)
      strings = "[" .. strings .. "]"
    end
  elseif type(strings) == "string" then
    strings = escape(strings)
  else
    strings = char(strings)
    strings = escape(strings)
  end

  local len = 1
  local startIndex = 1
  while true do
    local posBegin, posEnd = find(this, strings, startIndex)
    posBegin = posBegin or 0
    local subStr = sub(this, startIndex, posBegin -1)
    if options ~= 1 or #subStr > 0 then
      t[len] = subStr
      len = len + 1
      if count then
        count = count -1
        if count == 0 then
          if posBegin ~= 0 then
            t[len - 1] = sub(this, startIndex)
          end
          break
        end
      end
    end
    if posBegin == 0 then
      break
    end
    startIndex = posEnd + 1
  end
  return System.arrayFromTable(t, String)
end

local function startsWith(this, prefix)
  return sub(this, 1, #prefix) == prefix
end

local function substring(this, startIndex, count)
  startIndex, count = checkIndex(this, startIndex, count)
  return sub(this, startIndex + 1, startIndex + count)
end

local function toCharArray(str, startIndex, count)
  startIndex, count = checkIndex(str, startIndex, count)
  local t = {}
  local len = 1
  for i = startIndex + 1, startIndex + count do
    t[len] = byte(str, i)
    len = len + 1
  end
  return System.arrayFromTable(t, System.Char)
end

local function trim(this, chars, ...)
  if not chars then
    chars = "^%s*(.-)%s*$"
  else
    if type(chars) == "table" then
      chars = char(unpack(chars))
    else
      chars = char(chars, ...)
    end
    chars = escape(chars)
    chars = "^[" .. chars .. "]*(.-)[" .. chars .. "]*$"
  end
  return (gsub(this, chars, "%1"))
end

local function trimEnd(this, chars, ...)
  if not chars then
    chars = "(.-)%s*$"
  else
    if type(chars) == "table" then
      chars = char(unpack(chars))
    else
      chars = char(chars, ...)
    end
    chars = escape(chars)
    chars = "(.-)[" .. chars .. "]*$"
  end
  return (gsub(this, chars, "%1"))
end

local function trimStart(this, chars, ...)
  if not chars then
    chars = "^%s*(.-)"
  else
    if type(chars) == "table" then
      chars = char(unpack(chars))
    else
      chars = char(chars, ...)
    end
    chars = escape(chars)
    chars = "^[" .. chars .. "]*(.-)"
  end
  return (gsub(this, chars, "%1"))
end

local function inherits(_, T)
  return { System.IEnumerable_1(System.Char), System.IComparable, System.IComparable_1(T), System.IConvertible, System.IEquatable_1(T), System.ICloneable }
end

string.traceback = emptyFn  -- make throw(str) not fail
string.getLength = lengthFn
string.getCount = lengthFn
string.get = get
string.Compare = compareFull
string.CompareOrdinal = compareFull
string.Concat = concat
string.Copy = System.identityFn
string.Equals = equals
string.Format = format
string.IsNullOrEmpty = isNullOrEmpty
string.IsNullOrWhiteSpace = isNullOrWhiteSpace
string.JoinEnumerable = joinEnumerable
string.JoinParams = joinParams
string.Join = join
string.CompareTo = compare
string.CompareToObj = compareToObj
string.Contains = contains
string.CopyTo = copyTo
string.EndsWith = endsWith
string.EqualsObj = equalsObj
string.GetEnumerator = getEnumerator
string.GetTypeCode = getTypeCode
string.IndexOf = indexOf
string.IndexOfAny = indexOfAny
string.Insert = insert
string.LastIndexOf = lastIndexOf
string.LastIndexOfAny = lastIndexOfAny
string.PadLeft = padLeft
string.PadRight = padRight
string.Remove = remove
string.Replace = replace
string.Split = split
string.StartsWith = startsWith
string.Substring = substring
string.ToCharArray = toCharArray
string.ToLower = lower
string.ToLowerInvariant = lower
string.ToString = System.identityFn
string.ToUpper = upper
string.ToUpperInvariant = upper
string.Trim = trim
string.TrimEnd = trimEnd
string.TrimStart = trimStart

if debugsetmetatable then
  String = string
  String.__genericT__ = System.Char
  String.base = inherits
  System.define("System.String", String)

  debugsetmetatable("", String)
  local Object = System.Object
  local StringMetaTable = setmetatable({ __index = Object, __call = ctor }, Object)
  setmetatable(String, StringMetaTable)
else
  string.__call = ctor
  string.__index = string

  String = getmetatable("")
  String.__genericT__ = System.Char
  String.base = inherits
  System.define("System.String", String)
  String.__index = string
  setmetatable(String, string)
  setmetatable(string, System.Object)
end
end

-- CoreSystemLib: Boolean.lua
do
local System = System
local throw = System.throw
local debugsetmetatable = System.debugsetmetatable
local ArgumentException = System.ArgumentException
local ArgumentNullException = System.ArgumentNullException
local FormatException = System.FormatException

local type = type
local setmetatable = setmetatable

local function compareTo(this, v)
  if this == v then
    return 0
  elseif this == false then
    return -1
  end
  return 1
end

local falseString = "False"
local trueString = "True"

local function parse(s)
  if s == nil then
    return nil, 1
  end
  local i, j, value = s:find("^[%s%c%z]*(%a+)[%s%c%z]*$")
  if value then
    s = value:lower()
    if s == "true" then
      return true
    elseif s == "false" then
      return false
    end
  end
  return nil, 2
end

local function toString(this)
  return this and trueString or falseString
end

local Boolean = System.defStc("System.Boolean", {
  default = System.falseFn,
  GetHashCode = System.identityFn,
  Equals = System.equals,
  CompareTo = compareTo,
  ToString = toString,
  FalseString = falseString,
  TrueString = trueString,
  CompareToObj = function (this, v)
    if v == nil then return 1 end
    if type(v) ~= "boolean" then
      throw(ArgumentException("Arg_MustBeBoolean"))
    end
    return compareTo(this, v)
  end,
  EqualsObj = function (this, v)
    if type(v) ~= "boolean" then
      return false
    end
    return this == v
  end,
  __concat = function (a, b)
    if type(a) == "boolean" then
      return toString(a) .. b
    else 
      return a .. toString(b)
    end
  end,
  __tostring = toString,
  Parse = function (s)
    local v, err = parse(s)
    if v == nil then
      if err == 1 then
        throw(ArgumentNullException()) 
      else
        throw(FormatException())
      end
    end
    return v
  end,
  TryParse = function (s)
    local v = parse(s)
    if v ~= nil then
      return true, v
    end
    return false, false
  end,
  base = function (_, T)
    return { System.IComparable, System.IConvertible, System.IComparable_1(T), System.IEquatable_1(T) }
  end
})
if debugsetmetatable then
  debugsetmetatable(false, Boolean)
end

local ValueType = System.ValueType
local boolMetaTable = setmetatable({ __index = ValueType, __call = Boolean.default }, ValueType)
setmetatable(Boolean, boolMetaTable)
end

-- CoreSystemLib: Delegate.lua
do
local System = System
local throw = System.throw
local Object = System.Object
local debugsetmetatable = System.debugsetmetatable
local ArgumentNullException = System.ArgumentNullException

local setmetatable = setmetatable
local assert = assert
local select = select
local type = type
local unpack = table.unpack
local tmove = table.move

local Delegate
local multicast

local function appendFn(t, count, f)
  if type(f) == "table" then
    for i = 1, #f do
      t[count] = f[i]
      count = count + 1
    end
  else
    t[count] = f
    count = count + 1
  end
  return count
end

local function combineImpl(fn1, fn2)
  local t = setmetatable({}, multicast)
  local count = 1
  count = appendFn(t, count, fn1)
  appendFn(t, count, fn2)
  return t
end

local function combine(fn1, fn2)
  if fn1 ~= nil then
    if fn2 ~= nil then
      return combineImpl(fn1, fn2)
    end
    return fn1
  end
  if fn2 ~= nil then return fn2 end
  return nil
end

local function equalsMulticast(fn1, fn2, start, count)
  for i = 1, count do
    if fn1[start + i] ~= fn2[i] then
      return false
    end
  end
  return true
end

local function delete(fn, count, deleteIndex, deleteCount)
  local t =  setmetatable({}, multicast)
  local len = 1
  for i = 1, deleteIndex - 1 do
    t[len] = fn[i]
    len = len + 1
  end
  for i = deleteIndex + deleteCount, count do
    t[len] = fn[i]
    len = len + 1
  end
  return t
end

local function removeImpl(fn1, fn2) 
  if type(fn2) ~= "table" then
    if type(fn1) ~= "table" then
      if fn1 == fn2 then
        return nil
      end
    else
      local count = #fn1
      for i = count, 1, -1 do
        if fn1[i] == fn2 then
          if count == 2 then
            return fn1[3 - i]
          else
            return delete(fn1, count, i, 1)
          end
        end
      end
    end
  elseif type(fn1) == "table" then
    local count1, count2 = #fn1, # fn2
    local diff = count1 - count2
    for i = diff + 1, 1, -1 do
      if equalsMulticast(fn1, fn2, i - 1, count2) then
        if diff == 0 then
          return nil
        elseif diff == 1 then
          return fn1[i ~= 1 and 1 or count1]
        else
          return delete(fn1, count1, i, count2)
        end
      end
    end
  end
  return fn1
end

local function remove(fn1, fn2)
  if fn1 ~= nil then
    if fn2 ~= nil then
      return removeImpl(fn1, fn2)
    end
    return fn1
  end
  return nil
end

local multiKey = System.multiKey

local mt = {}
local function makeGenericTypes(...)
  local gt, gk = multiKey(mt, nil, ...)
  local t = gt[gk]
  if t == nil then
    t = setmetatable({ ... }, Delegate)
    gt[gk] = t
  end
  return t
end

Delegate = System.define("System.Delegate", {
  __add = combine,
  __sub = remove,
  EqualsObj = System.equals,
  Combine = combine,
  Remove = remove,
  RemoveAll = function (source, value)
    local newDelegate
    repeat
      newDelegate = source
      source = remove(source, value)
    until newDelegate == source
    return newDelegate
  end,
  DynamicInvoke = function (this, ...)
    return this(...)
  end,
  GetType = function (this)
    return System.typeof(Delegate)
  end,
  GetInvocationList = function (this)
    local t
    if type(this) == "table" then
      t = {}
      tmove(this, 1, #this, 1, t)
    else
      t = { this }
    end
    return System.arrayFromTable(t, Delegate)
  end
})

local delegateMetaTable = setmetatable({ __index = Object, __call = makeGenericTypes }, Object)
setmetatable(Delegate, delegateMetaTable)
if debugsetmetatable then
  debugsetmetatable(System.emptyFn, Delegate)

  function System.event(name)
    local function a(this, v)
      this[name] = this[name] + v
    end
    local function r(this, v)
      this[name] = this[name] - v
    end
    return a, r
  end
else
  System.DelegateCombine = combine
  System.DelegateRemove = remove

  function System.event(name)
    local function a(this, v)
      this[name] = combine(this[name], v)
    end
    local function r(this, v)
      this[name] = remove(this[name], v)
    end
    return a, r
  end
end

multicast = setmetatable({
  __index = Delegate,
  __add = combine,
  __sub = remove,
  __call = function (t, ...)
    local result
    for i = 1, #t do
      result = t[i](...)
    end
    return result
  end,
  __eq = function (fn1, fn2)
    local len1, len2 = #fn1, #fn2
    if len1 ~= len2 then
      return false
    end
    for i = 1, len1 do
      if fn1[i] ~= fn2[i] then
        return false
      end
    end
    return true
  end
}, Delegate)

function System.fn(target, method)
  assert(method)
  if target == nil then throw(ArgumentNullException()) end
  local f = target[method]
  if f == nil then
    f = function (...)
      return method(target, ...)
    end
    target[method] = f
  end
  return f
end

local binds = setmetatable({}, { __mode = "k" })

function System.bind(f, n, ...)
  assert(f)
  local gt, gk = multiKey(binds, nil, f, ...)
  local fn = gt[gk]
  if fn == nil then
    local args = { ... }
    fn = function (...)
      local len = select("#", ...)
      if len == n then
        return f(..., unpack(args))
      else
        assert(len > n)
        local t = { ... }
        for i = 1, #args do
          local j = args[i]
          if type(j) == "number" then
            j = select(n + j, ...)
            assert(j)
          end
          t[n + i] = j
        end
        return f(unpack(t, 1, n + #args))
      end
    end
    gt[gk] = fn
  end
  return fn
end

local function bind(f, create, ...)
  assert(f)
  local gt, gk = multiKey(binds, nil, f, create)
  local fn = gt[gk]
  if fn == nil then
    fn = create(f, ...)
    gt[gk] = fn
  end
  return fn
end

local function create1(f, a)
  return function (...)
    return f(..., a)
  end
end

function System.bind1(f, a)
  return bind(f, create1, a)
end

local function create2(f, a, b)
  return function (...)
    return f(..., a, b)
  end
end

function System.bind2(f, a, b)
  return bind(f, create2, a, b)
end

local function create3(f, a, b, c)
  return function (...)
    return f(..., a, b, c)
  end
end

function System.bind3(f, a, b, c)
 return bind(f, create3, a, b, c)
end

local function create2_1(f)
  return function(x1, x2, T1, T2)
    return f(x1, x2, T2, T1)
  end
end

function System.bind2_1(f)
  return bind(f, create2_1)
end

local function create0_2(f)
  return function(x1, x2, T1, T2)
    return f(x1, x2, T2)
  end
end

function System.bind0_2(f)
  return bind(f, create0_2)
end

local EventArgs = System.define("System.EventArgs")
EventArgs.Empty = setmetatable({}, EventArgs)
end

-- CoreSystemLib: Enum.lua
do
local System = System
local throw = System.throw
local Int = System.Int
local Number = System.Number
local band = System.band
local bor = System.bor
local ArgumentNullException = System.ArgumentNullException
local ArgumentException = System.ArgumentException

local assert = assert
local pairs = pairs
local tostring = tostring
local type = type

local function toString(this, cls)
  if this == nil then return "" end
  if cls then
    for k, v in pairs(cls) do
      if v == this then
        return k
      end
    end
  end
  return tostring(this)
end

local function hasFlag(this, flag)
  if this == flag then
    return true
  end
  return band(this, flag) ~= 0
end

Number.EnumToString = toString
Number.HasFlag = hasFlag
System.EnumToString = toString
System.EnumHasFlag = hasFlag

local function tryParseEnum(enumType, value, ignoreCase)
  if enumType == nil then throw(ArgumentNullException("enumType")) end
  local cls = enumType[1] or enumType
  if cls.class ~= "E" then throw(ArgumentException("Arg_MustBeEnum")) end
  if value == nil then
    return
  end
  if ignoreCase then
    value = value:lower()
  end
  local i, j, s, r = 1
  while true do
    i, j, s = value:find("%s*(%a+)%s*", i)
    if not i then
      return
    end
    for k, v in pairs(cls) do
      if ignoreCase then
        k = k:lower()
      end
      if k == s then
        if not r then
          r = v
        else
          r = bor(r, v)
        end
        break
      end
    end
    i = value:find(',', j + 1)
    if not i then
      break
    end
    i = i + 1
  end
  return r
end

System.define("System.Enum", {
  CompareToObj = Int.CompareToObj,
  EqualsObj = Int.EqualsObj,
  default = Int.default,
  ToString = toString,
  HasFlag = hasFlag,
  GetName = function (enumType, value)
    if enumType == nil then throw(ArgumentNullException("enumType")) end
    if value == nil then throw(ArgumentNullException("value")) end
    if not enumType:getIsEnum() then throw(ArgumentException("Arg_MustBeEnum")) end
    for k, v in pairs(enumType[1]) do
      if v == value then
        return k
      end
    end
  end,
  GetNames = function (enumType)
    if enumType == nil then throw(ArgumentNullException("enumType")) end
    if not enumType:getIsEnum() then throw(ArgumentException("Arg_MustBeEnum")) end
    local t = {}
    local count = 1
    for k, v in pairs(enumType[1]) do
      if type(v) == "number" then
        t[count] = k
        count = count + 1
      end
    end
    return System.arrayFromTable(t, System.String)
  end,
  GetValues = function (enumType)
    if enumType == nil then throw(ArgumentNullException("enumType")) end
    if not enumType:getIsEnum() then throw(ArgumentException("Arg_MustBeEnum")) end
    local t = {}
    local count = 1
    for _, v in pairs(enumType[1]) do
      if type(v) == "number" then
        t[count] = v
        count = count + 1
      end
    end
    return System.arrayFromTable(t, System.Int32)
  end,
  IsDefined = function (enumType, value)
    if enumType == nil then throw(ArgumentNullException("enumType")) end
    if value == nil then throw(ArgumentNullException("value")) end
    if not enumType:getIsEnum() then throw(ArgumentException("Arg_MustBeEnum")) end
    local cls = enumType[1]
    local t = type(value)
    if t == "string" then
      return cls[value] ~= nil
    elseif t == "number" then
      for _, v in pairs(cls) do
        if v == value then
          return true
        end
      end
      return false
    end
    throw(System.InvalidOperationException())
  end,
  Parse = function (enumType, value, ignoreCase)
    local result = tryParseEnum(enumType, value, ignoreCase)
    if result == nil then
      throw(ArgumentException("Requested value '" .. value .. "' was not found."))
    end
    return result
  end,
  TryParse = function (type, value, ignoreCase)
    local result = tryParseEnum(type, value, ignoreCase)
    if result == nil then
      return false, 0
    end
    return true, result
  end
})
end

-- CoreSystemLib: TimeSpan.lua
do
local System = System
local throw = System.throw
local div = System.div
local trunc = System.trunc
local ArgumentException = System.ArgumentException
local OverflowException = System.OverflowException
local ArgumentNullException = System.ArgumentNullException
local FormatException = System.FormatException

local assert = assert
local getmetatable = getmetatable
local select = select
local sformat = string.format
local sfind = string.find
local tostring = tostring
local tonumber = tonumber
local floor = math.floor
local log10 = math.log10

local TimeSpan
local zero

local function compare(t1, t2)
  if t1.ticks > t2.ticks then return 1 end
  if t1.ticks < t2.ticks then return -1 end
  return 0
end

local function add(this, ts) 
  return TimeSpan(this.ticks + ts.ticks)
end

local function subtract(this, ts) 
  return TimeSpan(this.ticks - ts.ticks)
end

local function negate(this) 
  local ticks = this.ticks
  if ticks == (-9223372036854775807 - 1) then
    throw(OverflowException("Overflow_NegateTwosCompNum"))
  end
  return TimeSpan(-ticks)
end

local function interval(value, scale)
  if value ~= value then 
    throw(ArgumentException("Arg_CannotBeNaN"))
  end
  local tmp = value * scale
  local millis = tmp + (value >=0 and 0.5 or -0.5)
  if millis > 922337203685477 or millis < -922337203685477 then
    throw(OverflowException("Overflow_TimeSpanTooLong"))
  end
  return TimeSpan(trunc(millis) * 10000)
end

local function getPart(this, i, j)
  local t = this.ticks
  local v = div(t, i) % j
  if v ~= 0 and t < 0 then
    return v - j
  end
  return v
end

local function parse(s)
  if s == nil then return nil, 1 end
  local i, j, k, sign, ch
  local day, hour, minute, second, milliseconds = 0, 0, 0, 0, 0
  i, j, sign, day = sfind(s, "^%s*([-]?)(%d+)")
  if not i then return end
  k = j + 1
  i, j, ch = sfind(s, "^([%.:])", k)
  if not i then 
    i, j = sfind(s, "^%s*$", k)
    if not i then return end
    k = -1
  else
    k = j + 1
    if ch == '.' then
      i, j, hour, minute = sfind(s, "^(%d+):(%d+)", k)
      if not i then return end
      k = j + 1
      i, j, second = sfind(s, "^:(%d+)", k)
      if not i then return end
    else
      i, j, hour = sfind(s, "^(%d+)", k)
      if not i then return end
      k = j + 1
      i, j, minute = sfind(s, "^:(%d+)", k)
      if not i then
        i, j = sfind(s, "^%s*$", k)
        if not i then
          return
        end
        day, hour, minute = 0, day, hour
        k = -1
      else
        k = j
        i, j, second = sfind(s, "^:(%d+)", k + 1)
        if not i then
          day, hour, minute, second = 0, day, hour, minute
          j = k
        end
      end
    end
  end
  if k ~= -1 then
    k = j + 1
    i, j, milliseconds = sfind(s, "^%.(%d+)%s*$", k)
    if not i then
      i, j = sfind(s, "^%s*$", k)
      if not i then return end
      milliseconds = 0
    else
      milliseconds = tonumber(milliseconds)
      local n = floor(log10(milliseconds) + 1)
      if n > 3 then
        if n > 7 then return end
        milliseconds = milliseconds / (10 ^ (n - 3))
      end
    end
  end
  if sign == '-' then
    day, hour, minute, second, milliseconds = -tonumber(day), -tonumber(hour), -tonumber(minute), -tonumber(second), -tonumber(milliseconds)
  else
    day, hour, minute, second, milliseconds = tonumber(day), tonumber(hour), tonumber(minute), tonumber(second), tonumber(milliseconds)
  end
  return TimeSpan(day, hour, minute, second, milliseconds)
end

TimeSpan = System.defStc("System.TimeSpan", {
  ticks = 0,
  __ctor__ = function (this, ...)
    local ticks
    local length = select("#", ...)
    if length == 0 then
    elseif length == 1 then
      ticks = ...
    elseif length == 3 then
      local hours, minutes, seconds = ...
      ticks = (((hours * 60 + minutes) * 60) + seconds) * 10000000
    elseif length == 4 then
      local days, hours, minutes, seconds = ...
      ticks = ((((days * 24 + hours) * 60 + minutes) * 60) + seconds) * 10000000
    elseif length == 5 then
      local days, hours, minutes, seconds, milliseconds = ...
      ticks = (((((days * 24 + hours) * 60 + minutes) * 60) + seconds) * 1000 + milliseconds) * 10000
    else 
      assert(ticks)
    end
    this.ticks = ticks
  end,
  Compare = compare,
  CompareTo = compare,
  CompareToObj = function (this, t)
    if t == nil then return 1 end
    if getmetatable(t) ~= TimeSpan then
      throw(ArgumentException("Arg_MustBeTimeSpan"))
    end
    compare(this, t)
  end,
  Equals = function (t1, t2)
    return t1.ticks == t2.ticks
  end,
  EqualsObj = function(this, t)
    if getmetatable(t) == TimeSpan then
      return this.ticks == t.ticks
    end
    return false
  end,
  GetHashCode = function (this)
    return this.ticks
  end,
  getTicks = function (this) 
    return this.ticks
  end,
  getDays = function (this) 
    return div(this.ticks, 864000000000)
  end,
  getHours = function(this)
    return getPart(this, 36000000000, 24)
  end,
  getMinutes = function (this)
    return getPart(this, 600000000, 60)
  end,
  getSeconds = function (this)
    return getPart(this, 10000000, 60)
  end,
  getMilliseconds = function (this)
    return getPart(this, 10000, 1000)
  end,
  getTotalDays = function (this) 
    return this.ticks / 864000000000
  end,
  getTotalHours = function (this) 
    return this.ticks / 36000000000
  end,
  getTotalMilliseconds = function (this) 
    return this.ticks / 10000
  end,
  getTotalMinutes = function (this) 
    return this.ticks / 600000000
  end,
  getTotalSeconds = function (this) 
    return this.ticks / 10000000
  end,
  Add = add,
  Subtract = subtract,
  Duration = function (this) 
    local ticks = this.ticks
    if ticks == (-9223372036854775807 - 1) then
      throw(OverflowException("Overflow_Duration"))
    end
    return TimeSpan(ticks >= 0 and ticks or - ticks)
  end,
  Negate = negate,
  ToString = function (this) 
    local day, milliseconds = this:getDays(), this.ticks % 10000000
    local daysStr = day == 0 and "" or (day .. ".")
    local millisecondsStr = milliseconds == 0 and "" or (".%07d"):format(milliseconds)
    return sformat("%s%02d:%02d:%02d%s", daysStr, this:getHours(), this:getMinutes(), this:getSeconds(), millisecondsStr)
  end,
  Parse = function (s)
    local v, err = parse(s)
    if v then
      return v
    end
    if err == 1 then
      throw(ArgumentNullException())
    else
      throw(FormatException())
    end
  end,
  TryParse = function (s)
    local v = parse(s)
    if v then
      return true, v
    end
    return false, zero
  end,
  __add = add,
  __sub = subtract,
  __unm = negate,
  __eq = function (t1, t2)
    return t1.ticks == t2.ticks
  end,
  __lt = function (t1, t2)
    return t1.ticks < t2.ticks
  end,
  __le = function (t1, t2)
    return t1.ticks <= t2.ticks
  end,
  FromDays = function (value) 
    return interval(value, 864e5)
  end,
  FromHours = function (value) 
    return interval(value, 36e5)
  end,
  FromMilliseconds = function (value) 
    return interval(value, 1)
  end,
  FromMinutes = function (value) 
    return interval(value, 6e4)
  end,
  FromSeconds = function (value) 
    return interval(value, 1000)
  end,
  FromTicks = function (value) 
    return TimeSpan(value)
  end,
  base = function (_, T)
    return { System.IComparable, System.IComparable_1(T), System.IEquatable_1(T) }
  end,
  default = function ()
    return zero
  end,
  Zero = false,
  MaxValue = false,
  MinValue = false
})

zero = TimeSpan(0)
TimeSpan.Zero = zero
TimeSpan.MaxValue = TimeSpan(9223372036854775807)
TimeSpan.MinValue = TimeSpan((-9223372036854775807 - 1))
end

-- CoreSystemLib: DateTime.lua
do
local System = System
local throw = System.throw
local div = System.div
local trunc = System.trunc

local TimeSpan = System.TimeSpan
local compare = TimeSpan.Compare
local ArgumentOutOfRangeException = System.ArgumentOutOfRangeException
local ArgumentException = System.ArgumentException
local ArgumentNullException = System.ArgumentNullException
local FormatException = System.FormatException

local assert = assert
local getmetatable = getmetatable
local select = select
local sformat = string.format
local sfind = string.find
local os = os
local ostime = os.time
local osdifftime = os.difftime
local osdate = os.date
local tonumber = tonumber
local math = math
local floor = math.floor
local log10 = math.log10
local modf = math.modf

--http://referencesource.microsoft.com/#mscorlib/system/datetime.cs
local DateTime
local minValue

local daysToMonth365 = { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 }
local daysToMonth366 = { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 }

local function isLeapYear(year) 
  if year < 1 or year > 9999 then 
    throw(ArgumentOutOfRangeException("year", "ArgumentOutOfRange_Year"))
  end
  return year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0)
end

local function dateToTicks(year, month, day) 
  if year >= 1 and year <= 9999 and month >= 1 and month <= 12 then
    local days = isLeapYear(year) and daysToMonth366 or daysToMonth365
    if day >= 1 and day <= days[month + 1] - days[month] then
      local y = year - 1
      local n = y * 365 + div(y, 4) - div(y, 100) + div(y, 400) + days[month] + day - 1
      return n * 864000000000
    end
  end
end

local function timeToTicks(hour, minute, second)
  if hour >= 0 and hour < 24 and minute >= 0 and minute < 60 and second >=0 and second < 60 then 
    return (((hour * 60 + minute) * 60) + second) * 10000000
  end
  throw(ArgumentOutOfRangeException("ArgumentOutOfRange_BadHourMinuteSecond"))
end

local function checkTicks(ticks)
  if ticks < 0 or ticks > 3155378975999999999 then
    throw(ArgumentOutOfRangeException("ticks", "ArgumentOutOfRange_DateTimeBadTicks"))
  end
end

local function checkKind(kind) 
  if kind and (kind < 0 or kind > 2) then
    throw(ArgumentOutOfRangeException("kind"))
  end
end

local function addTicks(this, value)
  return DateTime(this.ticks + value, this.kind)
end

local function addTimeSpan(this, ts)
  return addTicks(this, ts.ticks)
end

local function add(this, value, scale)
  local millis = trunc(value * scale + (value >= 0 and 0.5 or -0.5))
  return addTicks(this, millis * 10000)
end

local function subtract(this, v) 
  if getmetatable(v) == DateTime then
    return TimeSpan(this.ticks - v.ticks)
  end
  return DateTime(this.ticks - v.ticks, this.kind) 
end

local function getDataPart(ticks, part)
  local n = div(ticks, 864000000000)
  local y400 = div(n, 146097)
  n = n - y400 * 146097
  local y100 = div(n, 36524)
  if y100 == 4 then y100 = 3 end
  n = n - y100 * 36524
  local y4 = div(n, 1461)
  n = n - y4 * 1461;
  local y1 = div(n, 365)
  if y1 == 4 then y1 = 3 end
  if part == 0 then
    return y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1
  end
  n = n - y1 * 365
  if part == 1 then return n + 1 end
  local leapYear = y1 == 3 and (y4 ~= 24 or y100 == 3)
  local days = leapYear and daysToMonth366 or daysToMonth365
  local m = div(n, 32) + 1
  while n >= days[m + 1] do m = m + 1 end
  if part == 2 then return m end
  return n - days[m] + 1
end

local function getDatePart(ticks)
  local year, month, day
  local n = div(ticks, 864000000000)
  local y400 = div(n, 146097)
  n = n - y400 * 146097
  local y100 = div(n, 36524)
  if y100 == 4 then y100 = 3 end
  n = n - y100 * 36524
  local y4 = div(n, 1461)
  n = n - y4 * 1461
  local y1 = div(n, 365)
  if y1 == 4 then y1 = 3 end
  year = y400 * 400 + y100 * 100 + y4 * 4 + y1 + 1
  n = n - y1 * 365
  local leapYear = y1 == 3 and (y4 ~= 24 or y100 == 3)
  local days = leapYear and daysToMonth366 or daysToMonth365
  local m = div(n, 32) + 1
  while n >= days[m + 1] do m = m + 1 end
  month = m
  day = n - days[m] + 1
  return year, month, day
end

local function daysInMonth(year, month)
  if month < 1 or month > 12 then
    throw(ArgumentOutOfRangeException("month"))
  end
  local days = isLeapYear(year) and daysToMonth366 or daysToMonth365
  return days[month + 1] - days[month]
end

local function addMonths(this, months)
  if months < -120000 or months > 12000 then
    throw(ArgumentOutOfRangeException("months"))
  end
  local ticks = this.ticks
  local y, m, d = getDatePart(ticks)
  local i = m - 1 + months
  if i >= 0 then
    m = i % 12 + 1
    y = y + div(i, 12)
  else
    m = 12 + (i + 1) % -12
    y = y + div(i - 11, 12)
  end
  if y < 1 or y > 9999 then
    throw(ArgumentOutOfRangeException("months")) 
  end
  local days = daysInMonth(y, m)
  if d > days then d = days end
  return DateTime(dateToTicks(y, m, d) + ticks % 864000000000, this.kind)
end

local function getTimeZone()
  local date = osdate("*t")
  local dst = date.isdst
  local now = ostime(date)
  return osdifftime(now, ostime(osdate("!*t", now))) * 10000000, dst and 3600 * 10000000 or 0 
end

local timeZoneTicks, dstTicks = getTimeZone()
local baseUtcOffset = TimeSpan(timeZoneTicks)

local time = System.config.time or ostime
System.time = time
System.currentTimeMillis = function () return trunc(time() * 1000) end

local function now()
  local seconds = time()
  local ticks = seconds * 10000000 + timeZoneTicks + dstTicks + 621355968000000000
  return DateTime(ticks, 2)
end

local function parse(s)
  if s == nil then
    return nil, 1
  end
  local i, j, year, month, day, hour, minute, second, milliseconds
  i, j, year, month, day = sfind(s, "^%s*(%d+)%s*/%s*(%d+)%s*/%s*(%d+)%s*")
  if i == nil then
    return nil, 2
  else
    year, month, day = tonumber(year), tonumber(month), tonumber(day)
  end
  if j < #s then
    i, j, hour, minute = sfind(s, "^(%d+)%s*:%s*(%d+)", j + 1)
    if i == nil then
      return nil, 2
    else
      hour, minute = tonumber(hour), tonumber(minute)
    end
    local next = j + 1
    i, j, second = sfind(s, "^:%s*(%d+)", next)
    if i == nil then
      if sfind(s, "^%s*$", next) == nil then
        return nil, 2
      else
        second = 0
        milliseconds = 0
      end
    else
      second = tonumber(second)
      next = j + 1
      i, j, milliseconds = sfind(s, "^%.(%d+)%s*$", next)
      if i == nil then
        if sfind(s, "^%s*$", next) == nil then
          return nil, 2
        else
          milliseconds = 0
        end
      else
        milliseconds = tonumber(milliseconds)
        local n = floor(log10(milliseconds) + 1)
        if n > 3 then
          if n <= 7 then
            milliseconds = milliseconds / (10 ^ (n - 3))
          else
            local ticks = milliseconds / (10 ^ (n - 7))
            local _, decimal = modf(ticks)
            if decimal > 0.5 then
              ticks = ticks + 1
            end
            milliseconds = floor(ticks) / 10000
          end
        end
      end
    end
  end
  if hour == nil then
    return DateTime(year, month, day)
  end
  return DateTime(year, month, day, hour, minute, second, milliseconds)
end

local abbreviatedDayNames = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" }
local dayNames = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"	 }
local abbreviatedMonthNames = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" }
local monthNames = { "January",	"February",	"March", "April",	"May", "June", "July", "August", "September", "October", "November", "December" }

local realFormats = {
  ["d"] = "MM/dd/yyyy",
  ["D"] = "dddd, dd MMMM yyyy",
  ["f"] = "dddd, dd MMMM yyyy HH:mm",
  ["F"] = "dddd, dd MMMM yyyy HH:mm:ss",
  ["g"] = "MM/dd/yyyy HH:mm",
  ["G"] = "MM/dd/yyyy HH:mm:ss",
  ["m"] = "MMMM dd",
  ["M"] = "MMMM dd",
  ["o"] = "yyyy-MM-ddTHH:mm:ss.fffffffK",
  ["O"] = "yyyy-MM-ddTHH:mm:ss.fffffffK",
  ["r"] = "ddd, dd MMM yyyy HH:mm:ss GMT",
  ["R"] = "ddd, dd MMM yyyy HH:mm:ss GMT",
  ["s"] = "yyyy-MM-ddTHH:mm:ss",
  ["t"] = "HH:mm",
  ["T"] = "HH:mm:ss",
  ["u"] = "yyyy-MM-dd HH:mm:ssZ",
  ["U"] = "dddd, dd MMMM yyyy HH:mm:ss",
  ["y"] = "yyyy MMMM",
  ["Y"] = "yyyy MMMM"
}

local function parseRepeatPattern(format, n, pos, ch)
  local index = pos + 1
  while index <= n and format:byte(index) == ch do
    index = index + 1
  end
  return index - pos
end

local function throwFormatInvalidException()
  throw(FormatException("Input string was not in a correct format."))
end

local function formatCustomized(this, format, n)
  local t, i, tokenLen, hour12 = {}, 1
  while i <= n do
    local ch = format:byte(i)
    if ch == 104 then
      tokenLen = parseRepeatPattern(format, n, i, ch)
      hour12 = this:getHour() % 12
      if hour12 == 0 then hour12 = 12 end
      t[#t + 1] = sformat("%02d", hour12)
    elseif ch == 72 then
      tokenLen = parseRepeatPattern(format, n, i, ch)
      t[#t + 1] = sformat("%02d", this:getHour())
    elseif ch == 109 then
      tokenLen = parseRepeatPattern(format, n, i, ch)
      t[#t + 1] = sformat("%02d", this:getMinute())
    elseif ch == 115 then
      tokenLen = parseRepeatPattern(format, n, i, ch)
      t[#t + 1] = sformat("%02d", this:getSecond())
    elseif ch == 102 or ch == 70 then
      tokenLen = parseRepeatPattern(format, n, i, ch)
      if tokenLen <= 7 then
        local fraction = this.ticks % 10000000
        fraction = div(fraction, 10 ^ (7 - tokenLen))
        if ch == 102 then
          t[#t + 1] = sformat("%0" .. tokenLen .. 'd', fraction)
        else
          local effectiveDigits = tokenLen
          while effectiveDigits > 0 do
            if fraction % 10 == 0 then
              fraction = div(fraction, 10)
              effectiveDigits = effectiveDigits - 1
            else 
              break
            end
          end
          if effectiveDigits > 0 then
            t[#t + 1] = sformat("%0" .. effectiveDigits .. 'd', fraction)
          end
        end
      else
        throwFormatInvalidException()
      end
    elseif ch == 116 then
      tokenLen = parseRepeatPattern(format, n, i, ch)
      local hour = this:getHour()
      if tokenLen == 1 then
        t[#t + 1] = hour < 12 and "A" or "P"
      else
        t[#t + 1] = hour < 12 and "AM" or "PM"
      end
    elseif ch == 100 then
      tokenLen = parseRepeatPattern(format, n, i, ch)
      if tokenLen <= 2 then
        local day = this:getDay()
        t[#t + 1] = sformat("%0" .. tokenLen .. 'd', day)
      else
        local i = this:getDayOfWeek() + 1
        t[#t + 1] = (tokenLen == 3 and abbreviatedDayNames or dayNames)[i]
      end
    elseif ch == 77 then
      tokenLen = parseRepeatPattern(format, n, i, ch)
      local month = this:getMonth()
      if tokenLen <= 2 then
        t[#t + 1] = sformat("%0" .. tokenLen .. 'd', month)
      else
        t[#t + 1] = (tokenLen == 3 and abbreviatedMonthNames or monthNames)[month]
      end
    elseif ch == 121 then
      tokenLen = parseRepeatPattern(format, n, i, ch)
      local year = this:getYear()
      if tokenLen <= 2 then
        year = year % 100
        t[#t + 1] = tokenLen == 1 and year or sformat("%02d", year)
      else
        t[#t + 1] = sformat("%0" .. tokenLen .. 'd', year)
      end
    elseif ch == 122 then
      tokenLen = parseRepeatPattern(format, n, i, ch)
      local offset = this.kind == 1 and TimeSpan.Zero or baseUtcOffset
      local sign
      if offset.ticks >= 0 then
        sign = "+"
      else
        sign = "-"
        offset = offset:Negate()
      end
      local hour = offset:getHours()
      if tokenLen <= 1 then
        t[#t + 1] = sformat("%s%d", sign, hour)
      elseif tokenLen < 3 then
        t[#t + 1] = sformat("%s%02d", sign, hour)
      else
        t[#t + 1] = sformat("%s%02d:%02d", sign, hour, offset:getMinutes())
      end
    elseif ch == 75 then
      tokenLen = 1
      if this.kind == 2 then
        local offset = baseUtcOffset
        local sign
        if offset.ticks >= 0 then
          sign = "+"
        else
          sign = "-"
          offset = offset:Negate()
        end
        t[#t + 1] = sformat("%s%02d:%02d", sign, offset:getHours(), offset:getMinutes())
      elseif this.kind == 1 then
        t[#t + 1] = "Z"
      end
    elseif ch == 39 or ch == 34 then
      local a, b, c = sfind(format, "^(.*)" .. string.char(ch), i + 1)
      if not a then throwFormatInvalidException() end
      t[#t + 1] = c
      tokenLen = b - a + 2
    elseif ch == 37 then
      local nextChar = format:byte(i + 1)
      if nextChar and nextChar ~= 37 then
        t[#t + 1] = formatCustomized(this, string.char(nextChar), 1)
        tokenLen = 2
      else
        throwFormatInvalidException()
      end
    elseif ch == 92 then
      local nextChar = format:byte(i + 1)
      if nextChar then
        t[#t + 1] = string.char(nextChar)
        tokenLen = 2
      else
        throwFormatInvalidException()
      end
    else
      t[#t + 1] = string.char(ch)
      tokenLen = 1
    end
    i = i + tokenLen
  end
  return table.concat(t)
end

local function toStringWithFormat(this, format)
  local n = #format
  if n == 1 then
    format = realFormats[format]
    if not format then throwFormatInvalidException() end
    return formatCustomized(this, format, #format)
  end
  return formatCustomized(this, format, n)
end

DateTime = System.defStc("System.DateTime", {
  ticks = 0,
  kind = 0,
  Compare = compare,
  CompareTo = compare,
  CompareToObj = function (this, t)
    if t == nil then return 1 end
    if getmetatable(t) ~= DateTime then
      throw(ArgumentException("Arg_MustBeDateTime"))
    end
    return compare(this, t)
  end,
  Equals = function (t1, t2)
    return t1.ticks == t2.ticks
  end,
  EqualsObj = function (this, t)
    if getmetatable(t) == DateTime then
      return this.ticks == t.ticks
    end
    return false
  end,
  GetHashCode = function (this)
    return this.ticks
  end,
  IsLeapYear = isLeapYear,
  __ctor__ = function (this, ...)
    local len = select("#", ...)
    if len == 0 then
    elseif len == 1 then
      local ticks = ...
      checkTicks(ticks)
      this.ticks = ticks
    elseif len == 2 then
      local ticks, kind = ...
      checkTicks(ticks)
      checkKind(kind)
      this.ticks = ticks
      this.kind = kind
    elseif len == 3 then
      this.ticks = dateToTicks(...)
    elseif len == 6 then
      local year, month, day, hour, minute, second = ...
      this.ticks = dateToTicks(year, month, day) + timeToTicks(hour, minute, second)
    elseif len == 7 then
      local year, month, day, hour, minute, second, millisecond = ...
      this.ticks = dateToTicks(year, month, day) + timeToTicks(hour, minute, second) + millisecond * 10000
    elseif len == 8 then
      local year, month, day, hour, minute, second, millisecond, kind = ...
      checkKind(kind)
      this.ticks = dateToTicks(year, month, day) + timeToTicks(hour, minute, second) + millisecond * 10000
      this.kind = kind
    else
      assert(false)
    end
  end,
  AddTicks = addTicks,
  Add = addTimeSpan,
  AddDays = function (this, days)
    return add(this, days, 86400000)
  end,
  AddHours = function (this, hours)
    return add(this, hours, 3600000)
  end,
  AddMinutes = function (this, minutes) 
    return add(this, minutes, 60000);
  end,
  AddSeconds = function (this, seconds)
    return add(this, seconds, 1000)
  end,
  AddMilliseconds = function (this, milliseconds)
    return add(this, milliseconds, 1)
  end,
  DaysInMonth = daysInMonth,
  AddMonths = addMonths,
  AddYears = function (this, years)
    if years < - 10000 or years > 10000 then
      throw(ArgumentOutOfRangeException("years")) 
    end
    return addMonths(this, years * 12)
  end,
  SpecifyKind = function (this, kind)
    return DateTime(this.ticks, kind)
  end,
  Subtract = subtract,
  getDay = function (this)
    return getDataPart(this.ticks, 3)
  end,
  getDate = function (this)
    local ticks = this.ticks
    return DateTime(ticks - ticks % 864000000000, this.kind)
  end,
  getDayOfWeek = function (this)
    return (div(this.ticks, 864000000000) + 1) % 7
  end,
  getDayOfYear = function (this)
    return getDataPart(this.ticks, 1)
  end,
  getKind = function (this)
    return this.kind
  end,
  getHour = TimeSpan.getHours,
  getMinute = TimeSpan.getMinutes,
  getSecond = TimeSpan.getSeconds,
  getMillisecond = TimeSpan.getMilliseconds,
  getMonth = function (this)
    return getDataPart(this.ticks, 2)
  end,
  getYear = function (this)
    return getDataPart(this.ticks, 0)
  end,
  getTimeOfDay = function (this)
    return TimeSpan(this.ticks % 864000000000)
  end,
  getTicks = function (this)
    return this.ticks
  end,
  BaseUtcOffset = baseUtcOffset,
  getUtcNow = function ()
    local seconds = time()
    local ticks = seconds * 10000000 + 621355968000000000
    return DateTime(ticks, 1)
  end,
  getNow = now,
  getToday = function ()
    return now():getDate()
  end,
  ToLocalTime = function (this)
    if this.kind == 2 then 
      return this
    end
    local ticks = this.ticks + timeZoneTicks + dstTicks
    return DateTime(ticks, 2)
  end,
  ToUniversalTime = function (this)
    if this.kind == 1 then
      return this
    end
    local ticks = this.ticks - timeZoneTicks - dstTicks
    return DateTime(ticks, 1)
  end,
  IsDaylightSavingTime = function(this)
    return this.kind == 2 and dstTicks > 0
  end,
  ToString = function (this, format)
    if format then 
      return toStringWithFormat(this, format) 
    end
    local year, month, day = getDatePart(this.ticks)
    return sformat("%d/%d/%d %02d:%02d:%02d", year, month, day, this:getHour(), this:getMinute(), this:getSecond())
  end,
  Parse = function (s)
    local v, err = parse(s)
    if v then
      return v
    end
    if err == 1 then
      throw(ArgumentNullException())
    else
      throw(FormatException())
    end
  end,
  TryParse = function(s)
    local v = parse(s)
    if v then
      return true, v
    end
    return false, minValue
  end,
  __add = addTimeSpan,
  __sub = subtract,
  __eq = TimeSpan.__eq,
  __lt = TimeSpan.__lt,
  __le = TimeSpan.__le,
  base =  function(_, T)
    return { System.IComparable, System.IComparable_1(T), System.IConvertible, System.IEquatable_1(T), System.IFormattable }
  end,
  default = function ()
    return minValue
  end,
  MinValue = false,
  MaxValue = false
})

minValue = DateTime(0)
DateTime.MinValue = minValue
DateTime.MaxValue = DateTime(3155378975999999999)

System.defEnum("System.DayOfWeek", {
  Sunday = 0,
  Monday = 1,
  Tuesday = 2,
  Wednesday = 3,
  Thursday = 4,
  Friday = 5,
  Saturday = 6
})
end

-- CoreSystemLib: Collections\EqualityComparer.lua
do
local System = System
local define = System.define
local throw = System.throw
local equalsObj = System.equalsObj
local compareObj = System.compareObj
local ArgumentException = System.ArgumentException
local ArgumentNullException = System.ArgumentNullException

local type = type

local EqualityComparer
EqualityComparer = define("System.EqualityComparer", function (T)
  local equals
  local Equals = T.Equals
  if Equals then
    if T.class == 'S' then
      equals = Equals 
    else
      equals = function (x, y) 
        return x:Equals(y) 
      end 
    end
  else
    equals = equalsObj
  end
  local function getHashCode(x)
    if type(x) == "table" then
      return x:GetHashCode()
    end
    return x
  end
  local defaultComparer
  return {
    __genericT__ = T,
    base = { System.IEqualityComparer_1(T), System.IEqualityComparer }, 
    getDefault = function ()
      local comparer = defaultComparer 
      if comparer == nil then
        comparer = EqualityComparer(T)()
        defaultComparer = comparer
      end
      return comparer
    end,
    EqualsOf = function (this, x, y)
      if x ~= nil then
        if y ~= nil then return equals(x, y) end
        return false
      end                 
      if y ~= nil then return false end
      return true
    end,
    GetHashCodeOf = function (this, obj)
      if obj == nil then return 0 end
      return getHashCode(obj)
    end,
    GetHashCodeObjOf = function (this, obj)
      if obj == nil then return 0 end
      if System.is(obj, T) then return getHashCode(obj) end
      throw(ArgumentException("Type of argument is not compatible with the generic comparer."))
    end,
    EqualsObjOf = function (this, x, y)
      if x == y then return true end
      if x == nil or y == nil then return false end
      local is = System.is
      if is(x, T) and is(y, T) then return equals(x, y) end
      throw(ArgumentException("Type of argument is not compatible with the generic comparer."))
    end
  }
end, nil, 1)

local function compare(this, a, b)
  return compareObj(a, b)
end

define("System.Comparer", (function ()
  local Comparer
  Comparer = {
    base = { System.IComparer },
    static = function (this)
      local default = Comparer()
      this.Default = default
      this.DefaultInvariant = default
    end,
    Compare = compare
  }
  return Comparer
end)())

local Comparer, ComparisonComparer

ComparisonComparer = define("System.ComparisonComparer", function (T)
  return {
    base = { Comparer(T) },
    __ctor__ = function (this, comparison)
      this.comparison = comparison
    end,
    Compare = function (this, x, y)
      return this.comparison(x, y)
    end
  }
end, nil, 1)

Comparer = define("System.Comparer_1", function (T)
  local Compare
  local compareTo = T.CompareTo
  if compareTo then
    if T.class ~= 'S' then
      compareTo = function (x, y)
        return x:CompareTo(y)
      end
    end
    Compare = function (this, x, y)
      if x ~= nil then
        if y ~= nil then 
          return compareTo(x, y) 
        end
        return 1
      end                 
      if y ~= nil then return -1 end
      return 0
    end
  else
    Compare = compare
  end

  local defaultComparer
  local function getDefault()
    local comparer = defaultComparer 
    if comparer == nil then
      comparer = Comparer(T)()
      defaultComparer = comparer
    end
    return comparer
  end

  local function Create(comparison)
    if comparison == nil then throw(ArgumentNullException("comparison")) end
    return ComparisonComparer(T)(comparison)
  end

  return {
    __genericT__ = T,
    base = { System.IComparer_1(T), System.IComparer }, 
    getDefault = getDefault,
    getDefaultInvariant = getDefault,
    Compare = Compare,
    Create = Create
  }
end)
end

-- CoreSystemLib: Array.lua
do
local System = System
local define = System.define
local throw = System.throw
local div = System.div
local bnot = System.bnot
local trueFn = System.trueFn
local falseFn = System.falseFn
local lengthFn = System.lengthFn
local er = System.er

local InvalidOperationException = System.InvalidOperationException
local NullReferenceException = System.NullReferenceException
local ArgumentException = System.ArgumentException
local ArgumentNullException = System.ArgumentNullException
local ArgumentOutOfRangeException = System.ArgumentOutOfRangeException
local IndexOutOfRangeException = System.IndexOutOfRangeException
local NotSupportedException = System.NotSupportedException
local EqualityComparer = System.EqualityComparer
local Comparer_1 = System.Comparer_1
local IEnumerable_1 = System.IEnumerable_1
local IEnumerator_1 = System.IEnumerator_1

local assert = assert
local select = select
local getmetatable = getmetatable
local setmetatable = setmetatable
local type = type
local table = table
local tinsert = table.insert
local tremove = table.remove
local tmove = table.move
local tsort = table.sort
local pack = table.pack
local unpack = table.unpack
local error = error
local coroutine = coroutine
local ccreate = coroutine.create
local cresume = coroutine.resume
local cyield = coroutine.yield

local null = {}
local arrayEnumerator
local arrayFromTable

local versions = setmetatable({}, { __mode = "k" })
System.versions = versions

local function throwFailedVersion()
  throw(InvalidOperationException("Collection was modified; enumeration operation may not execute."))
end

local function checkIndex(t, index) 
  if index < 0 or index >= #t then
    throw(ArgumentOutOfRangeException("index"))
  end
end

local function checkIndexAndCount(t, index, count)
  if t == nil then throw(ArgumentNullException("array")) end
  if index < 0 or count < 0 or index + count > #t then
    throw(ArgumentOutOfRangeException("index or count"))
  end
end

local function wrap(v)
  if v == nil then 
    return null 
  end
  return v
end

local function unWrap(v)
  if v == null then 
    return nil 
  end
  return v
end

local function ipairs(t)
  local version = versions[t]
  return function (t, i)
    if version ~= versions[t] then
      throwFailedVersion()
    end
    local v = t[i]
    if v ~= nil then
      if v == null then
        v = nil
      end
      return i + 1, v
    end
  end, t, 1
end

local function eachFn(en)
  if en:MoveNext() then
    return true, en:getCurrent()
  end
  return nil
end

local function each(t)
  if t == nil then throw(NullReferenceException(), 1) end
  local getEnumerator = t.GetEnumerator
  if getEnumerator == arrayEnumerator then
    return ipairs(t)
  end
  local en = getEnumerator(t)
  return eachFn, en
end

function System.isArrayLike(t)
  return type(t) == "table" and t.GetEnumerator == arrayEnumerator
end

function System.isEnumerableLike(t)
  return type(t) == "table" and t.GetEnumerator ~= nil
end

function System.toLuaTable(array)
  local t = {}
  for i = 1, #array do
    local item = array[i]
    if item ~= null then
      t[i] = item
    end
  end   
  return t
end

System.null = null
System.Void = null
System.each = each
System.ipairs = ipairs
System.throwFailedVersion = throwFailedVersion

System.wrap = wrap
System.unWrap = unWrap
System.checkIndex = checkIndex
System.checkIndexAndCount = checkIndexAndCount

local Array
local emptys = {}

local function get(t, index)
  local v = t[index + 1]
  if v == nil then
    throw(ArgumentOutOfRangeException("index"))
  end
  if v ~= null then 
    return v
  end
  return nil
end

local function set(t, index, v)
  index = index + 1
  if t[index] == nil then
    throw(ArgumentOutOfRangeException("index"))
  end
  t[index] = v == nil and null or v
  versions[t] = (versions[t] or 0) + 1
end

local function add(t, v)
  local n = #t
  t[n + 1] = v == nil and null or v
  versions[t] = (versions[t] or 0) + 1
  return n
end

local function addRange(t, collection)
  if collection == nil then throw(ArgumentNullException("collection")) end
  local count = #t + 1
  if collection.GetEnumerator == arrayEnumerator then
    tmove(collection, 1, #collection, count, t)
  else
    for _, v in each(collection) do
      t[count] = v == nil and null or v
      count = count + 1
    end
  end
  versions[t] = (versions[t] or 0) + 1
end

local function clear(t)
  local size = #t
  if size > 0 then
    for i = 1, size do
      t[i] = nil
    end
    versions[t] = (versions[t] or 0) + 1
  end
end

local function first(t)
  local v = t[1]
  if v == nil then throw(InvalidOperationException())  end
  if v ~= null then
    return v
  end
  return nil
end

local function last(t)
  local n = #t
  if n == 0 then throw(InvalidOperationException()) end
  local v = t[n]
  if v ~= null then
    return v
  end
  return nil
end

local function unset()
  throw(NotSupportedException("Collection is read-only."))
end

local function fill(t, f, e, v)
  while f <= e do
    t[f] = v
    f = f + 1
  end
end

local function buildArray(T, len, t)
  if t == nil then 
    t = {}
    if len > 0 then
      local genericT = T.__genericT__
      local default = genericT:default()
      if default == nil then
        fill(t, 1, len, null)
      elseif type(default) ~= "table" then
        fill(t, 1, len, default)
      else
        for i = 1, len do
          t[i] = genericT:default()
        end
      end
    end
  else
    if len > 0 then
      local default = T.__genericT__:default()
      if default == nil then
        for i = 1, len do
          if t[i] == nil then
            t[i] = null
          end
        end
      end
    end
  end
  return setmetatable(t, T)
end

local function indexOf(t, v, startIndex, count)
  if t == nil then throw(ArgumentNullException("array")) end
  local len = #t
  if not startIndex then
    startIndex, count = 0, len
  elseif not count then
    if startIndex < 0 or startIndex > len then
      throw(ArgumentOutOfRangeException("startIndex"))
    end
    count = len - startIndex
  else
    if startIndex < 0 or startIndex > len then
      throw(ArgumentOutOfRangeException("startIndex"))
    end
    if count < 0 or count > len - startIndex then
      throw(ArgumentOutOfRangeException("count"))
    end
  end
  local comparer = EqualityComparer(t.__genericT__).getDefault()
  local equals = comparer.EqualsOf
  for i = startIndex + 1, startIndex + count do
    local item = t[i]
    if item == null then item = nil end
    if equals(comparer, item, v) then
      return i - 1
    end
  end
  return -1
end

local function findIndex(t, startIndex, count, match)
  if t == nil then throw(ArgumentNullException("array")) end
  local len = #t
  if not count then
    startIndex, count, match = 0, len, startIndex
  elseif not match then
    if startIndex < 0 or startIndex > len then
      throw(ArgumentOutOfRangeException("startIndex"))
    end
    count, match = len - startIndex, count
  else
    if startIndex < 0 or startIndex > len then
      throw(ArgumentOutOfRangeException("startIndex"))
    end
    if count < 0 or count > len - startIndex then
      throw(ArgumentOutOfRangeException("count"))
    end
  end
  if match == nil then throw(ArgumentNullException("match")) end
  local endIndex = startIndex + count
  for i = startIndex + 1, endIndex  do
    local item = t[i]
    if item == null then item = nil end
    if match(item) then
      return i - 1
    end
  end
  return -1
end

local function copy(sourceArray, sourceIndex, destinationArray, destinationIndex, length, reliable)
  if not reliable then
    checkIndexAndCount(sourceArray, sourceIndex, length)
    checkIndexAndCount(destinationArray, destinationIndex, length)
  end
  tmove(sourceArray, sourceIndex + 1, sourceIndex + length, destinationIndex + 1, destinationArray)
end

local function removeRange(t, index, count)
  local n = #t
  if count < 0 or index > n - count then
    throw(ArgumentOutOfRangeException("index or count"))
  end
  if count > 0 then
    if index + count < n then
      tmove(t, index + count + 1, n, index + 1)
    end
    fill(t, n - count + 1, n, nil)
    versions[t] = (versions[t] or 0) + 1
  end
end

local function findAll(t, match)
  if t == nil then throw(ArgumentNullException("array")) end
  if match == nil then throw(ArgumentNullException("match")) end
  local list = {}
  local count = 1
  for i = 1, #t do
    local item = t[i]
    if (item == null and match(nil)) or match(item) then
      list[count] = item
      count = count + 1
    end
  end
  return list
end

local function binarySearch(t, ...)
  if t == nil then throw(ArgumentNullException("array")) end
  local len = #t
  local index, count, v, comparer
  local n = select("#", ...)
  if n == 1 or n == 2 then
    index, count, v, comparer = 0, len, ...
  else
    index, count, v, comparer = ...
  end
  checkIndexAndCount(t, index, count)
  local compare
  if type(comparer) == "function" then
    compare = comparer
  elseif comparer == nil then
    comparer = Comparer_1(t.__genericT__).getDefault()
    compare = comparer.Compare 
  else
    compare = comparer.Compare
  end
  local lo = index
  local hi = index + count - 1
  while lo <= hi do
    local i = lo + div(hi - lo, 2)
    local item = t[i + 1]
    if item == null then item = nil end
    local order = compare(comparer, item, v);
    if order == 0 then return i end
    if order < 0 then
      lo = i + 1
    else
      hi = i - 1
    end
  end
  return bnot(lo)
end

local function getSortComp(t, comparer)
  local compare
  if comparer then
    if type(comparer) == "function" then
      compare = comparer
    else
      local Compare = comparer.Compare
      if Compare then
        compare = function (x, y) return Compare(comparer, x, y) end
      else
        compare = comparer
      end
    end
  else
    comparer = Comparer_1(t.__genericT__).getDefault()
    local Compare = comparer.Compare
    compare = function (x, y) return Compare(comparer, x, y) end
  end
  return function(x, y) 
    if x == null then x = nil end
    if y == null then y = nil end
    return compare(x, y) < 0
  end
end

local function sort(t, comparer)
  if #t > 1 then
    tsort(t, getSortComp(t, comparer))
    versions[t] = (versions[t] or 0) + 1
  end
end

local function addOrder(t, v, comparer)
  local i = binarySearch(t, v, comparer)
  if i >= 0 then return false end
  tinsert(t, bnot(i) + 1, v == nil and null or v)
  return true
end

local function addOrderRange(t, collection)
  if collection == nil then throw(ArgumentNullException("collection")) end
  local comparer, n = t.comparer, #t
  if collection.GetEnumerator == arrayEnumerator then
    for i = 1, #collection do
      local v = collection[i]
      if v == null then v = nil end
      addOrder(t, v, comparer)
    end
  else
    for _, v in each(collection) do
      addOrder(t, v, comparer)
    end
  end
  if #t ~= n then
    versions[t] = (versions[t] or 0) + 1
  end
end

local function exceptWithOrder(t, other)
  if other == nil then throw(ArgumentNullException("other")) end
  if #t == 0 then return end
  if t == other then
    clear(t)
    return
  end
  local comparer, n = t.comparer, #t
  if other.GetEnumerator == arrayEnumerator then
    for i = 1, n do
      local v = t[i]
      if v == null then v = nil end
      local i = binarySearch(t, v, comparer)
      if i >= 0 then
        tremove(t, i + 1)
      end
    end
  else
    for _, v in each(other) do
      local i = binarySearch(t, v, comparer)
      if i >= 0 then
        tremove(t, i + 1)
      end
    end
  end
  if #t ~= n then
    versions[t] = (versions[t] or 0) + 1
  end
end

local function intersectWithOrder(t, other)
  if other == nil then throw(ArgumentNullException("other")) end
  if #t == 0 then return end
  if t == other then return end
  local comparer = t.comparer
  local array = arrayFromTable({}, t.__genericT__)
  for _, v in each(other) do
    local i = binarySearch(t, v, comparer)
    if i >= 0 then
      array[#array + 1] = v == nil and null or v
    end
  end
  clear(t)
  addOrderRange(t, array)
end

local function isSubsetOfOrderWithSameEC(t, n, comparer, set)
  for i = 1, n do
    local v = t[i]
    if v == null then v = nil end
    local j = binarySearch(set, v, comparer)
    if j < 0 then
      return false
    end
  end
  return true
end

local function checkOrderUniqueAndUnfoundElements(t, n, comparer, other, returnIfUnfound)
  if n == 0 then
    local numElementsInOther = 0
    for _, v in each(other) do
      numElementsInOther = numElementsInOther + 1
      break
    end
    return 0, numElementsInOther
  end
  local uniqueFoundCount, unfoundCount, mark = 0, 0, {}
  for _, v in each(other) do
    local i = binarySearch(t, v, comparer)
    if i >= 0 then
      if not mark[i] then
        mark[i] = true
        uniqueFoundCount = uniqueFoundCount + 1
      end
    else
      unfoundCount = unfoundCount + 1
      if returnIfUnfound then
        break
      end
    end
  end
  return uniqueFoundCount, unfoundCount
end

local function isProperSubsetOfOrder(t, other)
  if other == nil then throw(ArgumentNullException("other")) end
  if t == other then return false end
  local comparer, n = t.comparer, #t
  if System.is(other, System.SortedSet(t.__genericT__)) then
    if comparer == other.comparer then
      if n >= #other then return false end
      return isSubsetOfOrderWithSameEC(t, n, comparer, set)
    end
  end
  local uniqueCount, unfoundCount = checkOrderUniqueAndUnfoundElements(t, n, comparer, other)
  return uniqueCount == n and unfoundCount > 0
end

local function isProperSupersetOfOrder(t, other)
  if other == nil then throw(ArgumentNullException("other")) end
  local n = #t
  if n == 0 then return false end
  if System.is(other, System.ICollection) then
    if other:getCount() == 0 then
      return true
    end
  end
  local comparer = t.comparer
  if System.is(other, System.SortedSet(t.__genericT__)) then
    if comparer == other.comparer then
      local n1 = #other
      if n1 >= n then return false end
      return isSubsetOfOrderWithSameEC(other, n1, comparer, t)
    end
  end
  local uniqueCount, unfoundCount = checkOrderUniqueAndUnfoundElements(t, n, comparer, other, true)
  return uniqueCount < n and unfoundCount == 0
end

local function isSubsetOfOrder(t, other)
  if other == nil then throw(ArgumentNullException("other")) end
  local n = #t
  if n == 0 then return true end
  local comparer = t.comparer
  if System.is(other, System.SortedSet(t.__genericT__)) then
    if comparer == other.comparer then
      if n > #other then return false end
      return isSubsetOfOrderWithSameEC(t, n, comparer, set)
    end
  end
  local uniqueCount, unfoundCount = checkOrderUniqueAndUnfoundElements(t, n, comparer, other)
  return uniqueCount == n and unfoundCount >= 0
end

local function isSupersetOfOrder(t, other)
  if other == nil then throw(ArgumentNullException("other")) end
  if System.is(other, System.ICollection) then
    if other:getCount() == 0 then
      return true
    end
  end
  local comparer, n = t.comparer, #t
  if System.is(other, System.SortedSet(t.__genericT__)) then
    if comparer == other.comparer then
      local n1 = #other
      if n < n1 then return false end
      return isSubsetOfOrderWithSameEC(other, n1, comparer, t)
    end
  end
  for _, v in each(other) do
    local i = binarySearch(t, v, comparer)
    if i < 0 then
      return false
    end
  end
  return true
end

local function isOverlapsOrder(t, other)
  if other == nil then throw(ArgumentNullException("other")) end
  local n = #t
  if n == 0 then return false end
  if System.is(other, System.ICollection) and other:getCount() == 0 then return false end
  local comparer = t.comparer
  if System.is(other, System.SortedSet(t.__genericT__)) and comparer == other.comparer then
    local c = comparer.Compare
    if c(comparer, first(t), last(other)) > 0 or c(comparer, last(t), first(other)) < 0 then
      return false
    end
  end
  for _, v in each(other) do
    local i = binarySearch(t, v, comparer)
    if i >= 0 then
      return true
    end
  end
  return false
end

local function equalsOrder(t, other)
  if other == nil then throw(ArgumentNullException("other")) end
  local comparer, n = t.comparer, #t
  if System.is(other, System.SortedSet(t.__genericT__)) and comparer == other.comparer then
    local n1 = #other
    if n ~= n1 then return false end
    local c = comparer.Compare
    for i = 1, n do
      local v, v1 = t[i], other[i]
      if v == null then v = nil end
      if v1 == null then v1 = nil end
      if c(comparer, v, v1) ~= 0 then
        return false
      end
    end
    return true
  end
  local uniqueCount, unfoundCount = checkOrderUniqueAndUnfoundElements(t, n, comparer, other, true)
  return uniqueCount == n and unfoundCount == 0
end

local function symmetricExceptWithOrder(t, other)
  if other == nil then throw(ArgumentNullException("other")) end
  local n = #t
  if n == 0 then
    addOrderRange(other)
    return
  end
  if t == other then
    clear(t)
    return
  end
  for _, v in each(other) do
    local i = binarySearch(t, v, comparer)
    if i >= 0 then
      tremove(t, i + 1)
    else
      addOrder(t, v, comparer)
    end
  end
end

local function tryGetValueOrder(t, equalValue)
  local i = binarySearch(t, equalValue, t.comparer)
  if i >= 0 then
    local v = t[i + 1]
    if v == null then v = nil end
    return true, v
  end
  return false, t.__genericT__:default()
end

local function checkOrderDictKeyValueObj(t, k, v)
  if k == nil then throw(ArgumentNullException("key")) end
  local TValue = t.__genericTValue__
  if v == nil and TValue:default() ~= nil then throw(ArgumentNullException("value")) end
  local TKey = t.__genericTKey__
  if not System.is(k, TKey) then 
    throw(ArgumentException(er.Arg_WrongType(k, TKey.__name__), "key")) 
  end
  if not System.is(v, TValue) then
    throw(ArgumentException(er.Arg_WrongType(v, TValue.__name__), "value")) 
  end
end

local function getOrderDictIndex(t, k, isObj)
  if k == nil then throw(ArgumentNullException("key")) end
  if isObj and not System.is(k, t.__genericTKey__) then
    return -1
  end
  return binarySearch(t, k, t.keyComparer)
end

local function addOrderDict(t, k, v, keyComparer, T, version)
  local i = binarySearch(t, k, keyComparer)
  if i >= 0 then
    throw(ArgumentException(er.Argument_AddingDuplicate(k)))
  end
  tinsert(t, bnot(i) + 1, setmetatable({ k, v }, T))
  if version then
    versions[t] = (versions[t] or 0) + 1
  end
end

local function getOrderDict(t, k, isObj)
  local i = getOrderDictIndex(t, k)
  if i >= 0 then
    return t[i + 1][2]
  end
  if isObj then
    return nil
  end
  throw(System.KeyNotFoundException(er.Arg_KeyNotFoundWithKey(k)))
end

local function setOrderDict(t, k, v)
  local i = getOrderDictIndex(t, k)
  if i >= 0 then
    t[i + 1][2] = v
  else
    tinsert(t, bnot(i) + 1, setmetatable({ k, v }, t.__genericT__))
    versions[t] = (versions[t] or 0) + 1
  end
end

local function getViewBetweenOrder(t, lowerValue, upperValue)
  local comparer = t.comparer
  if comparer:Compare(lowerValue, upperValue) > 0 then
    throw(ArgumentException("lowerBound is greater than upperBound"))
  end
  local n = #t
  local i = binarySearch(t, lowerValue, comparer)
  if i < 0 then i = bnot(i) end
  local set = { comparer = comparer }
  if i < n then
    local j = binarySearch(t, upperValue, comparer)
    if j < 0 then j = bnot(j) - 1 end
    if i <= j then
      tmove(t, i + 1, j + 1, 1, set)
    end
  end
  return setmetatable(set, System.SortedSet(t.__genericT__))
end

local function heapDown(t, k, n, c)
  local j
  while true do
    j = k * 2
    if j <= n and j > 0 then
      if j < n and c(t[j], t[j + 1]) > 0 then
        j = j + 1
      end
      if c(t[k], t[j]) <= 0 then
        break
      end
      t[j], t[k] = t[k], t[j]
      k = j
    else
      break
    end
  end
end

local function heapUp(t, k, n, c)
  while k > 1 do
    local j = div(k, 2)
    if c(t[j], t[k]) <= 0 then
      break
    end
    t[j], t[k] = t[k], t[j]
    k = j
  end
end

local function heapify(t, c)
  local n = #t
  for i = div(n, 2), 1, -1 do
    heapDown(t, i, n, c)  
  end
end

local function heapAdd(t, v, c)
  local n = #t + 1
  t[n] = v
  heapUp(t, n, n, c)
end

local function heapPop(t, c)
  local n = #t
  if n == 0 then return end
  local v = t[1]
  t[1] = t[n]
  t[n] = nil
  heapDown(t, 1, n - 1, c)
  return v
end

local SortedSetEqualityComparerFn
local SortedSetEqualityComparer = {
  __ctor__ = function (this, equalityComparer, comparer)
    local T = this.__genericT__
    this.comparer = comparer or Comparer_1(T).getDefault()
    this.equalityComparer = equalityComparer or EqualityComparer(T).getDefault()
  end,
  EqualsOf = function (this, x, y)
    if x == nil then return y == nil end
    if y == nil then return false end
    return equalsOrder(x, y)
  end,
  GetHashCodeOf = function (this, set)
    local hashCode = 0
    if set ~= nil then
      for i = 1, #set do
        local v = set[i]
        if v == null then v = nil end
        hashCode = System.xor(hashCode, System.band(this.equalityComparer:GetHashCodeOf(v), 0x7FFFFFFF))
      end
    end
    return hashCode
  end,
  EqualsObj = function (this, obj)
    if System.is(obj, SortedSetEqualityComparerFn(this.__genericT__)) then
      return this.comparer == obj.comparer
    end
    return false
  end,
  GetHashCode = function (this)
    return System.xor(this.comparer:GetHashCode(), this.equalityComparer:GetHashCode())
  end
}

SortedSetEqualityComparerFn = define("System.SortedSetEqualityComparer", function (T)
  return {
    base = { System.IEqualityComparer_1(T) },
    __genericT__ = T
  }
end, SortedSetEqualityComparer, 1)

local ArrayEnumerator = define("System.ArrayEnumerator", function (T)
  return {
    base = { IEnumerator_1(T) }
  }
end, {
  getCurrent = System.getCurrent, 
  Dispose = System.emptyFn,
  Reset = function (this)
    this.index = 1
    this.current = nil
  end,
  MoveNext = function (this)
    local t = this.list
    if this.version ~= versions[t] then
      throwFailedVersion()
    end
    local index = this.index
    local v = t[index]
    if v ~= nil then
      if v == null then
        this.current = nil
      else
        this.current = v
      end
      this.index = index + 1
      return true
    end
    this.current = nil
    return false
  end
}, 1)

arrayEnumerator = function (t, T)
  if not T then T = t.__genericT__ end
  return setmetatable({ list = t, index = 1, version = versions[t], currnet = T:default() }, ArrayEnumerator(T))
end

local ArrayReverseEnumerable 

local function reverseEnumerator(t)
  local T = t.__genericT__
  return setmetatable({ list = t, index = #t, version = versions[t], currnet = T:default() }, ArrayReverseEnumerable(T))
end

ArrayReverseEnumerable = define("System.ArrayReverseEnumerable", function (T)
  return {
    base = { IEnumerable_1(T), IEnumerator_1(T) }
  }
end, {
  getCurrent = System.getCurrent, 
  Dispose = System.emptyFn,
  GetEnumerator = function (this)
    return reverseEnumerator(this.list)
  end,
  Reset = function (this)
    this.index = #this.list
    this.current = nil
  end,
  MoveNext = function (this)
    local t = this.list
    if this.version ~= versions[t] then
      throwFailedVersion()
    end
    local index = this.index
    local v = t[index]
    if v ~= nil then
      if v == null then
        this.current = nil
      else
        this.current = v
      end
      this.index = index - 1
      return true
    end
    this.current = nil
    return false
  end
}, 1)

local function reverseEnumerable(t)
  return setmetatable({ list = t }, ArrayReverseEnumerable(t.__genericT__))
end

local function checkArrayIndex(index1, index2)
  if index2 then
    throw(ArgumentException("Indices length does not match the array rank."))
  elseif type(index1) == "table" then
    if #index1 ~= 1 then
      throw(ArgumentException("Indices length does not match the array rank."))
    else
      index1 = index1[1]
    end
  end
  return index1
end

Array = {
  version = 0,
  new = buildArray,
  set = set,
  get = get,
  setCapacity = function (t, len)
    if len < #t then throw(ArgumentOutOfRangeException("Value", er.ArgumentOutOfRange_SmallCapacity())) end
  end,
  ctorList = function (t, ...)
    local n = select("#", ...)
    if n == 0 then return end
    local collection = ...
    if type(collection) == "number" then return end
    addRange(t, collection)
  end,
  ctorOrderSet = function(t, ...)
    local n = select("#", ...)
    if n == 0 then
      t.comparer = Comparer_1(t.__genericT__).getDefault()
    else
      local collection, comparer = ...
      if collection == nil then throw(ArgumentNullException("collection")) end
      t.comparer = comparer or Comparer_1(t.__genericT__).getDefault()
      if collection then
        addOrderRange(t, collection)
      end
    end
  end,
  ctorOrderDict = function (t, ...)
    local n = select("#", ...)
    local dictionary, comparer
    if n ~= 0 then
      dictionary, comparer = ...
      if dictionary == nil then throw(ArgumentNullException("dictionary")) end
    end
    if comparer == nil then comparer = Comparer_1(t.__genericT__).getDefault() end
    local c = comparer.Compare
    local keyComparer = function (_, p, v)
      return c(comparer, p[1], v)
    end
    t.comparer, t.keyComparer = comparer, keyComparer
    if type(dictionary) == "table" then
      local T = t.__genericT__
      for _, p in each(dictionary) do
        local k, v = p[1], p[2]
        addOrderDict(t, k, v, keyComparer, T)
      end
    end
  end,
  add = add,
  addObj = function (this, item)
    if not System.is(item, this.__genericT__) then
      throw(ArgumentException())
    end
    return add(this, item)
  end,
  addRange = addRange,
  addOrder = function (t, v)
    local success = addOrder(t, v, t.comparer)
    if success then
      versions[t] = (versions[t] or 0) + 1
    end
    return success
  end,
  addOrderRange = addOrderRange,
  addOrderDict = function (t, k, v)
    if k == nil then throw(ArgumentNullException("key")) end
    addOrderDict(t, k, v, t.keyComparer, t.__genericT__, true)
  end,
  addPairOrderDict = function (t, ...)
    local k, v
    if select("#", ...) == 1 then
      local pair = ... 
      k, v = pair[1], pair[2]
    else
      k, v = ...
    end
    if k == nil then throw(ArgumentNullException("key")) end
    addOrderDict(t, k ,v, t.keyComparer, t.__genericT__, true)
  end,
  addOrderDictObj = function (t, k, v)
    checkOrderDictKeyValueObj(t, k, v)
    addOrderDict(t, k ,v, t.keyComparer, t.__genericT__, true)
  end,
  AsReadOnly = function (t)
    return System.ReadOnlyCollection(t.__genericT__)(t)
  end,
  clear = clear,
  containsOrder = function (t, v)
    return binarySearch(t, v, t.comparer) >= 0
  end,
  containsOrderDict = function (t, k)
    return getOrderDictIndex(t, k) >= 0
  end,
  containsOrderDictObj = function (t, k)
    return getOrderDictIndex(t, k, true) >= 0
  end,
  createSetComparer = function (T, equalityComparer)
    return SortedSetEqualityComparerFn(T)(equalityComparer)
  end,
  exceptWithOrder = exceptWithOrder,
  findAll = function (t, match)
    return setmetatable(findAll(t, match), System.List(t.__genericT__))
  end,
  first = first,
  firstOrDefault = function (t)
    local v = t[1]
    if v == nil then
      return t.__genericT__:default()
    elseif v == null then
      return nil
    else
      return v
    end
  end,
  insert = function (t, index, v)
    if index < 0 or index > #t then
      throw(ArgumentOutOfRangeException("index"))
    end
    tinsert(t, index + 1, v == nil and null or v)
    versions[t] = (versions[t] or 0) + 1
  end,
  insertRange = function (t, index, collection) 
    if collection == nil then throw(ArgumentNullException("collection")) end
    local len = #t
    if index < 0 or index > len then
      throw(ArgumentOutOfRangeException("index"))
    end
    if t.GetEnumerator == arrayEnumerator then
      local count = #collection
      if count > 0 then
        if index < len then
          tmove(t, index + 1, len, index + 1 + count, t)
        end
        if t == collection then
          tmove(t, 1, index, index + 1, t)
          tmove(t, index + 1 + count, count * 2, index * 2 + 1, t)
        else
          tmove(collection, 1, count, index + 1, t)
        end
      end
    else
      for _, v in each(collection) do
        index = index + 1
        tinsert(t, index, v == nil and null or v)
      end
    end
    versions[t] = (versions[t] or 0) + 1
  end,
  getViewBetweenOrder = getViewBetweenOrder,
  getOrderComparer = function (t) return t.comparer end,
  intersectWithOrder = intersectWithOrder,
  isProperSubsetOfOrder = isProperSubsetOfOrder,
  isProperSupersetOfOrder = isProperSupersetOfOrder,
  isSubsetOfOrder = isSubsetOfOrder,
  isSupersetOfOrder = isSupersetOfOrder,
  isOverlapsOrder = isOverlapsOrder,
  equalsOrder = equalsOrder,
  symmetricExceptWithOrder = symmetricExceptWithOrder,
  heapDown = heapDown,
  heapUp = heapUp,
  heapify = heapify,
  heapAdd = heapAdd,
  heapPop = heapPop,
  last = last,
  lastOrDefault = function (t)
    local n = #t
    local v = t[n]
    if v == nil then
      return t.__genericT__:default()
    elseif v == null then
      return nil
    else
      return v
    end
  end,
  popFirst = function (t)
    if #t == 0 then throw(InvalidOperationException()) end
    local v = t[1]
    tremove(t, 1)
    versions[t] = (versions[t] or 0) + 1
    if v ~= null then
      return v
    end
    return nil
  end,
  popLast = function (t)
    local n = #t
    if n == 0 then throw(InvalidOperationException()) end
    local v = t[n]
    t[n] = nil
    if v ~= null then
      return v
    end
    return nil
  end,
  removeRange = removeRange,
  remove = function (t, v)
    local index = indexOf(t, v)
    if index >= 0 then
      tremove(t, index + 1)
      versions[t] = (versions[t] or 0) + 1
      return true
    end
    return false
  end,
  removeAll = function (t, match)
    if match == nil then throw(ArgumentNullException("match")) end
    local size = #t
    local freeIndex = 1
    while freeIndex <= size do
      local item = t[freeIndex]
      if item == null then  item = nil end
      if match(item) then
        break
      end
      freeIndex = freeIndex + 1 
    end
    if freeIndex > size then return 0 end
  
    local current = freeIndex + 1
    while current <= size do 
      while current <= size do
        local item = t[current]
        if item == null then item = nil end
        if not match(item) then
          break
        end
        current = current + 1 
      end
      if current <= size then
        t[freeIndex] = t[current]
        freeIndex = freeIndex + 1
        current = current + 1
      end
    end
    freeIndex = freeIndex -1
    local count = size - freeIndex
    removeRange(t, freeIndex, count)
    return count
  end,
  removeAt = function (t, index)
    index = index + 1
    if t[index] == nil then throw(ArgumentOutOfRangeException("index"))  end
    tremove(t, index)
    versions[t] = (versions[t] or 0) + 1
  end,
  removeOrder = function (t, v)
    local i = binarySearch(t, v, t.comparer)
    if i >= 0 then
      tremove(t, i + 1)
      versions[t] = (versions[t] or 0) + 1
      return true
    end
    return false
  end,
  removeOrderDict = function (t, k)
    local i = getOrderDictIndex(t, k)
    if i >= 0 then
      tremove(t, i + 1)
      versions[t] = (versions[t] or 0) + 1
      return true
    end
    return false
  end,
  removePairOrderDict = function (t, p)
    local i = getOrderDictIndex(t, p[1])
    if i >= 0 then
      local v = t[i + 1][2]
      local comparer = EqualityComparer(this.__genericTValue__).getDefault()
      if comparer:EqualsOf(p[2], v) then
        tremove(this, i)
        return true
      end
    end
    return false
  end,
  tryGetValueOrder = tryGetValueOrder,
  tryGetValueOrderDict = function (t, k)
    local i = getOrderDictIndex(t, k)
    if i >= 0 then
      local p = t[i + 1]
      return true, p[2]
    end
    return false, t.__genericTValue__:default()
  end,
  getRange = function (t, index, count)
    if count < 0 or index > #t - count then
      throw(ArgumentOutOfRangeException("index or count"))
    end
    local list = {}
    tmove(t, index + 1, index + count, 1, list)
    return setmetatable(list, System.List(t.__genericT__))
  end,
  getOrderDict = getOrderDict,
  getOrderDictObj = function (t, k)
    return getOrderDict(t, k, true)
  end,
  setOrderDict = setOrderDict,
  setOrderDictObj = function (t, k, v)
    checkOrderDictKeyValueObj(t, k, v)
    setOrderDict(t, k, v)
  end,
  indexKeyOrderDict = function (t, k)
    local i = getOrderDictIndex(t, k)
    if i < 0 then i = -1 end
    return i
  end, 
  indexOfValue = function (t, v)
    local len = #t
    if len > 0 then
      local comparer = EqualityComparer(t.__genericTValue__).getDefault()
      local equals = comparer.EqualsOf
      for i = 1, len do
        if equals(comparer, v, t[i][2]) then
          return i - 1
        end
      end
    end
    return -1
  end,
  reverseEnumerator = reverseEnumerator,
  reverseEnumerable = reverseEnumerable,
  getCount = lengthFn,
  getSyncRoot = System.identityFn,
  getLongLength = lengthFn,
  getLength = lengthFn,
  getIsSynchronized = falseFn,
  getIsReadOnly = falseFn,
  getIsFixedSize = trueFn,
  getRank = System.oneFn,
  Add = unset,
  Clear = unset,
  Insert = unset,
  Remove = unset,
  RemoveAt = unset,
  BinarySearch = binarySearch,
  ClearArray = function (t, index, length)
    if t == nil then throw(ArgumentNullException("array")) end
    if index < 0 or length < 0 or index + length > #t then
      throw(IndexOutOfRangeException())
    end
    local default = t.__genericT__:default()
    if default == nil then default = null end
    fill(t, index + 1, index + length, default)
  end,
  Contains = function (t, v)
    return indexOf(t, v) ~= -1
  end,
  Copy = function (t, ...)
    local len = select("#", ...)     
    if len == 2 then
      local array, length = ...
      copy(t, 0, array, 0, length)
    else 
      copy(t, ...)
    end
  end,
  CreateInstance = function (elementType, length)
    return buildArray(Array(elementType[1]), length)
  end,
  Empty = function (T)
    local t = emptys[T]
    if t == nil then
      t = Array(T){}
      emptys[T] = t
    end
    return t
  end,
  Exists = function (t, match)
    return findIndex(t, match) ~= -1
  end,
  Fill = function (t, value, startIndex, count)
    if t == nil then throw(ArgumentNullException("array")) end
    local len = #t
    if not startIndex then
      startIndex, count = 0, len
    else
      if startIndex < 0 or startIndex > len then
        throw(ArgumentOutOfRangeException("startIndex"))
      end
      if count < 0 or count > len - startIndex then
        throw(ArgumentOutOfRangeException("count"))
      end
    end
    fill(t, startIndex + 1, startIndex + count, value)
  end,
  Find = function (t, match)
    if t == nil then throw(ArgumentNullException("array")) end
    if match == nil then throw(ArgumentNullException("match")) end
    for i = 1, #t do
      local item = t[i]
      if item == null then item = nil end
      if match(item) then
        return item
      end
    end
    return t.__genericT__:default()
  end,
  FindAll = function (t, match)
    return setmetatable(findAll(t, match), Array(t.__genericT__))
  end,
  FindIndex = findIndex,
  FindLast = function (t, match)
    if t == nil then throw(ArgumentNullException("array")) end
    if match == nil then throw(ArgumentNullException("match")) end
    for i = #t, 1, -1 do
      local item = t[i]
      if item == null then item = nil end
      if match(item) then
        return item
      end
    end
    return t.__genericT__:default()
  end,
  FindLastIndex = function (t, startIndex, count, match)
    if t == nil then throw(ArgumentNullException("array")) end
    local len = #t
    if not count then
      startIndex, count, match = len - 1, len, startIndex
    elseif not match then
      count, match = startIndex + 1, count
    end
    if match == nil then throw(ArgumentNullException("match")) end
    if count < 0 or startIndex - count + 1 < 0 then
      throw(ArgumentOutOfRangeException("count"))
    end
    local endIndex = startIndex - count + 1
    for i = startIndex + 1, endIndex + 1, -1 do
      local item = t[i]
      if item == null then
        item = nil
      end
      if match(item) then
        return i - 1
      end
    end
    return -1
  end,
  ForEach = function (t, action)
    if action == nil then throw(ArgumentNullException("action")) end
    for i = 1, #t do
      local item = t[i]
      if item == null then item = nil end
      action(item)
    end
  end,
  IndexOf = indexOf,
  LastIndexOf = function (t, value, startIndex, count)
    if t == nil then throw(ArgumentNullException("array")) end
    local len = #t
    if not startIndex then
      startIndex, count = len - 1, len
    elseif not count then
      count = len == 0 and 0 or (startIndex + 1)
    end
    if len == 0 then
      if startIndex ~= -1 and startIndex ~= 0 then
        throw(ArgumentOutOfRangeException("startIndex"))
      end
      if count ~= 0 then
        throw(ArgumentOutOfRangeException("count"))
      end
    end
    if startIndex < 0 or startIndex >= len then
      throw(ArgumentOutOfRangeException("startIndex"))
    end
    if count < 0 or startIndex - count + 1 < 0 then
      throw(ArgumentOutOfRangeException("count"))
    end
    local comparer = EqualityComparer(t.__genericT__).getDefault()
    local equals = comparer.EqualsOf
    local endIndex = startIndex - count + 1
    for i = startIndex + 1, endIndex + 1, -1 do
      local item = t[i]
      if item == null then item = nil end
      if equals(comparer, item, value) then
        return i - 1
      end
    end
    return -1
  end,
  Resize = function (t, newSize, T)
    if newSize < 0 then throw(ArgumentOutOfRangeException("newSize")) end
    if t == nil then
      return buildArray(Array(T), newSize)
    end
    local len = #t
    if len > newSize then
      fill(t, newSize + 1, len, nil)
    elseif len < newSize then
      local default = t.__genericT__:default()
      if default == nil then default = null end
      fill(t, len + 1, newSize, default)
    end
    return t
  end,
  Reverse = function (t, index, count)
    if not index then
      index = 0
      count = #t
    else
      if count < 0 or index > #t - count then
        throw(ArgumentOutOfRangeException("index or count"))
      end
    end
    local i, j = index + 1, index + count
    while i < j do
      t[i], t[j] = t[j], t[i]
      i = i + 1
      j = j - 1
    end
    versions[t] = (versions[t] or 0) + 1
  end,
  Sort = function (t, ...)
    if t == nil then throw(ArgumentNullException("array")) end
    local len = select("#", ...)
    if len == 0 then
      sort(t)
    elseif len == 1 then
      local comparer = ...
      sort(t, comparer)
    else
      local index, count, comparer = ...
      if count > 1 then
        local comp = getSortComp(t, comparer)
        if index == 0 and count == #t then
          tsort(t, comp)
        else
          checkIndexAndCount(t, index, count)
          local arr = {}
          tmove(t, index + 1, index + count, 1, arr)
          tsort(arr, comp)
          tmove(arr, 1, count, index + 1, t)
        end
        versions[t] = (versions[t] or 0) + 1
      end
    end
  end,
  toArray = function (t)
    local array = {}    
    if t.GetEnumerator == arrayEnumerator then
      tmove(t, 1, #t, 1, array)
    else
      local count = 1
      for _, v in each(t) do
        array[count] = v == nil and null or v
        count = count + 1
      end
    end
    return arrayFromTable(array, t.__genericT__)
  end,
  TrueForAll = function (t, match)
    if t == nil then throw(ArgumentNullException("array")) end
    if match == nil then throw(ArgumentNullException("match")) end
    for i = 1, #t do
      local item = t[i]
      if item == null then item = nil end
      if not match(item) then
        return false
      end
    end
    return true
  end,
  Clone = function (this)
    local t = setmetatable({}, getmetatable(this))
    tmove(this, 1, #this, 1, t)
    return t
  end,
  CopyTo = function (t, ...)
    local n = select("#", ...)
    local sourceIndex, array, arrayIndex, len
    if n == 1 then
      sourceIndex, arrayIndex, len, array = 0, 0, #t, ...
      checkIndexAndCount(array, 0, len)
    elseif n == 2 then
      sourceIndex, len, array, arrayIndex = 0, #t, ...
      checkIndexAndCount(array, arrayIndex, len)
    elseif n == 3 then
      sourceIndex, array, arrayIndex, len = 0, ...
      checkIndexAndCount(t, sourceIndex, len)
      checkIndexAndCount(array, arrayIndex, len)
    else
      sourceIndex, array, arrayIndex, len = ...
      checkIndexAndCount(t, sourceIndex, len)
      checkIndexAndCount(array, arrayIndex, len)
    end

    local T = t.__genericT__
    if T.class == "S" then
      local default = T:default()
      if type(default) == "table" then
        for i = 1, len do
          array[arrayIndex + i] = t[sourceIndex + i]:__clone__()
        end
        return
      end
    end

    tmove(t, sourceIndex + 1, sourceIndex + len, arrayIndex + 1, array)
  end,
  GetEnumerator = arrayEnumerator,
  GetLength = function (this, dimension)
    if dimension ~= 0 then throw(IndexOutOfRangeException()) end
    return #this
  end,
  GetLowerBound = function (this, dimension)
    if dimension ~= 0 then throw(IndexOutOfRangeException()) end
    return 0
  end,
  GetUpperBound = function (this, dimension)
    if dimension ~= 0 then throw(IndexOutOfRangeException()) end
    return #this - 1
  end,
  GetValue = function (this, index1, index2)
    if index1 == nil then throw(ArgumentNullException("indices")) end
    return get(this, checkArrayIndex(index1, index2))
  end,
  SetValue = function (this, value, index1, index2)
    if index1 == nil then throw(ArgumentNullException("indices")) end
    set(this, checkArrayIndex(index1, index2), System.castWithNullable(this.__genericT__, value))
  end,
  Clone = function (this)
    local array = {}
    tmove(this, 1, #this, 1, array)
    return arrayFromTable(array, this.__genericT__)
  end
}

function Array.__call(ArrayT, n, t)
  if type(n) == "table" then
    t = n
  elseif t ~= nil then
    for i = 1, n  do
      if t[i] == nil then
        t[i] = null
      end
    end
  else
    t = {}
    if n > 0 then
      local T = ArrayT.__genericT__
      local default = T:default()
      if default == nil then
        fill(t, 1, n, null)
      elseif type(default) ~= "table" then
        fill(t, 1, n, default)
      else
        for i = 1, n do
          t[i] = T:default()
        end
      end
    end
  end
  return setmetatable(t, ArrayT)
end

function System.arrayFromList(t)
  return setmetatable(t, Array(t.__genericT__))
end

arrayFromTable = function (t, T, readOnly)
  assert(T)
  local array = setmetatable(t, Array(T))
  if readOnly then
    array.set = unset
  end
  return array
end

System.arrayFromTable = arrayFromTable

local function getIndex(t, ...)
  local rank = t.__rank__
  local id = 0
  local len = #rank
  for i = 1, len do
    id = id * rank[i] + select(i, ...)
  end
  return id, len
end

local function checkMultiArrayIndex(t, index1, ...)
  if index1 == nil then throw(ArgumentNullException("indices")) end
  local rank = t.__rank__
  local len = #rank
  if type(index1) == "table" then
    if #index1 ~= len then
      throw(ArgumentException("Indices length does not match the array rank."))
    end
    local id = 0
    for i = 1, len do
      id = id * rank[i] + index1[i]
    end
    return id
  elseif len ~= select("#", ...) + 1 then
    throw(ArgumentException("Indices length does not match the array rank."))
  end
  return getIndex(t, index1, ...)
end

local MultiArray = { 
  set = function (this, ...)
    local index, len = getIndex(this, ...)
    set(this, index, select(len + 1, ...))
  end,
  get = function (this, ...)
    local index = getIndex(this, ...)
    return get(this, index)
  end,
  getRank = function (this)
    return #this.__rank__
  end,
  GetLength = function (this, dimension)
    local rank = this.__rank__
    if dimension < 0 or dimension >= #rank then throw(IndexOutOfRangeException()) end
    return rank[dimension + 1]
  end,
  GetLowerBound = function (this, dimension)
    local rank = this.__rank__
    if dimension < 0 or dimension >= #rank then throw(IndexOutOfRangeException()) end
    return 0
  end,
  GetUpperBound = function (this, dimension)
    local rank = this.__rank__
    if dimension < 0 or dimension >= #rank then throw(IndexOutOfRangeException()) end
    return rank[dimension + 1] - 1
  end,
  GetValue = function (this, ...)
    return get(this, checkMultiArrayIndex(this, ...))
  end,
  SetValue = function (this, value, ...)
    set(this, checkMultiArrayIndex(this, ...), System.castWithNullable(this.__genericT__, value))
  end,
  Clone = function (this)
    local array = { __rank__ = this.__rank__ }
    tmove(this, 1, #this, 1, array)
    return arrayFromTable(array, this.__genericT__)
  end
}

function MultiArray.__call(T, rank, t)
  local len = 1
  for i = 1, #rank do
    len = len * rank[i]
  end
  t = buildArray(T, len, t)
  t.__rank__ = rank
  return t
end

System.defArray("System.Array", function(T) 
  return { 
    base = { System.ICloneable, System.IList_1(T), System.IReadOnlyList_1(T), System.IList }, 
    __genericT__ = T
  }
end, Array, MultiArray)

local cpool = {}
local function createCoroutine(f)
  local c = tremove(cpool)
  if c == nil then
    c = ccreate(function (...)
      f(...)
      while true do
        f = nil
        cpool[#cpool + 1] = c
        f = cyield(cpool)
        f(cyield())
      end
    end)
  else
    cresume(c, f)
  end
  return c
end

System.ccreate = createCoroutine
System.cpool = cpool
System.cresume = cresume
System.yield = cyield

local YieldEnumerable
YieldEnumerable = define("System.YieldEnumerable", function (T)
  return {
    base = { IEnumerable_1(T), IEnumerator_1(T), System.IDisposable },
    __genericT__ = T
  }
end, {
  getCurrent = System.getCurrent, 
  Dispose = System.emptyFn,
  GetEnumerator = function (this)
    return setmetatable({ f = this.f, args = this.args }, YieldEnumerable(this.__genericT__))
  end,
  MoveNext = function (this)
    local c = this.c
    if c == false then
      return false
    end
  
    local ok, v
    if c == nil then
      c = createCoroutine(this.f)
      this.c = c
      local args = this.args
      ok, v = cresume(c, unpack(args, 1, args.n))
      this.args = nil
    else
      ok, v = cresume(c)
    end
  
    if ok then
      if v == cpool then
        this.c = false
        this.current = nil
        return false
      else
        this.current = v
        return true
      end
    else
      error(v)
    end
  end
}, 1)

local function yieldIEnumerable(f, T, ...)
  return setmetatable({ f = f, args = pack(...) }, YieldEnumerable(T))
end

System.yieldIEnumerable = yieldIEnumerable
System.yieldIEnumerator = yieldIEnumerable

local ReadOnlyCollection = {
  __ctor__ = function (this, list)
    if not list then throw(ArgumentNullException("list")) end
    this.list = list
  end,
  getCount = function (this)
    return #this.list
  end,
  get = function (this, index)
    return this.list:get(index)
  end,
  Contains = function (this, value)
    return this.list:Contains(value)
  end,
  GetEnumerator = function (this)
    return this.list:GetEnumerator()
  end,
  CopyTo = function (this, array, index)
    this.list:CopyTo(array, index)
  end,
  IndexOf = function (this, value)
    return this.list:IndexOf(value)
  end,
  getIsSynchronized = falseFn,
  getIsReadOnly = trueFn,
  getIsFixedSize = trueFn,
}

define("System.ReadOnlyCollection", function (T)
  return { 
    base = { System.IList_1(T), System.IList, System.IReadOnlyList_1(T) }, 
    __genericT__ = T
  }
end, ReadOnlyCollection, 1)
end

-- CoreSystemLib: Type.lua
do
local System = System
local throw = System.throw
local Object = System.Object
local Boolean = System.Boolean
local Delegate = System.Delegate
local getClass = System.getClass
local getGenericClass = System.getGenericClass
local arrayFromTable = System.arrayFromTable

local InvalidCastException = System.InvalidCastException
local ArgumentNullException = System.ArgumentNullException
local MissingMethodException = System.MissingMethodException
local TypeLoadException = System.TypeLoadException
local NullReferenceException = System.NullReferenceException

local Char = System.Char
local SByte = System.SByte
local Byte = System.Byte
local Int16 = System.Int16
local UInt16 = System.UInt16
local Int32 = System.Int32
local UInt32 = System.UInt32
local Int64 = System.Int64
local UInt64 = System.UInt64
local Single = System.Single
local Double = System.Double
local Int = System.Int
local Number = System.Number
local ValueType = System.ValueType

local assert = assert
local type = type
local setmetatable = setmetatable
local getmetatable = getmetatable
local select = select
local unpack = table.unpack
local floor = math.floor

local Type, typeof

local function isGenericName(name)
  return name:find('`') ~= nil
end

local function getBaseType(this)
  local baseType = this.baseType
  if baseType == nil then
    local baseCls = getmetatable(this[1])
    if baseCls ~= nil then
      baseType = typeof(baseCls)
      this.baseType = baseType
    end
  end
  return baseType
end

local function isSubclassOf(this, c)
  local p = this
  if p == c then
    return false
  end
  while p ~= nil do
    if p == c then
      return true
    end
    p = getmetatable(p)
  end
  return false
end

local function getIsInterface(this)
  return this[1].class == "I"
end

local function fillInterfaces(t, cls, set)
  local base = getmetatable(cls)
  if base then
    fillInterfaces(t, base, set)
  end
  local interface = cls.interface
  if interface then
    for i = 1, #interface do
      local it = interface[i]
      if not set[it] then
        t[#t + 1] = typeof(it)
        set[it] = true
      end
      fillInterfaces(t, it, set)
    end
  end
end

local function getInterfaces(this)
  local t = this.interfaces
  if t == nil then
    t = arrayFromTable({}, Type, true)
    fillInterfaces(t, this[1], {})
    this.interfaces = t
  end
  return t
end

local function implementInterface(this, ifaceType)
  local t = this
  while t ~= nil do
    local interfaces = getInterfaces(this)
    if interfaces ~= nil then
      for i = 1, #interfaces do
        local it = interfaces[i]
        if it == ifaceType or implementInterface(it, ifaceType) then
          return true
        end
      end
    end
    t = getBaseType(t)
  end
  return false
end

local function isAssignableFrom(this, c)
  if c == nil then
    return false
  end
  if this == c then
    return true
  end
  local left, right = this[1], c[1]
  if left == Object then
    return true
  end

  if isSubclassOf(right, left) then
    return true
  end

  if left.class == "I" then
    return implementInterface(c, this)
  end

  return false
end

local function isGenericTypeDefinition(this)
  local cls = this[1]
  return getGenericClass(cls) == cls
end

local function getIsArray(this)
  return this[1].__name__:byte(-2) == 91
end

Type = System.define("System.Type", {
  Equals = System.equals,
  getIsGenericType = function (this)
    return isGenericName(this[1].__name__)
  end,
  getContainsGenericParameters = function (this)
    return isGenericName(this[1].__name__)
  end,
  getIsGenericTypeDefinition = isGenericTypeDefinition,
  GetGenericTypeDefinition = function (this)
    local genericClass = getGenericClass(this[1])
    if genericClass then
      return typeof(genericClass)
    end
    throw(System.InvalidOperationException())
  end,
  MakeGenericType = function (this, ...)
    local T, n, args = this[1], select("#", ...)
    if n == 0 then
      return typeof(T())
    end
    if n == 1 then
      args = ...
      if System.isArrayLike(args) then
        n = #args
        if n == 0 then
          return typeof(T())
        end
        if n == 1 then
          return typeof(T(args[1][1]))
        end
      else
         return typeof(T(args[1]))
      end
    else
      args = { ... }
    end
    for i = 1, n do
      args[i] = args[i][1]
    end
    return typeof(T(unpack(args)))
  end,
  getIsEnum = function (this)
    return this[1].class == "E"
  end,
  getIsClass = function (this)
    return this[1].class == "C"
  end,
  getIsValueType = function (this)
    return this[1].class == "S" 
  end,
  getName = function (this)
    local name = this.name
    if name == nil then
      local clsName = this[1].__name__
      local pattern = isGenericName(clsName) and "^.*()%.(.*)%[.+%]$" or "^.*()%.(.*)$"
      name = clsName:gsub(pattern, "%2")
      this.name = name
    end
    return name
  end,
  getFullName = function (this)
    return this[1].__name__
  end,
  getNamespace = function (this)
    local namespace = this.namespace
    if namespace == nil then
      local clsName = this[1].__name__
      local pattern = isGenericName(clsName) and "^(.*)()%..*%[.+%]$" or "^(.*)()%..*$"
      namespace = clsName:gsub(pattern, "%1")
      this.namespace = namespace
    end
    return namespace
  end,
  getBaseType = function (this)
    local cls = this[1]
    if cls.class ~= "I" and cls ~= Object then
      while true do
        local base = getmetatable(cls)
        if not base then
          break
        end
        if base.__index == base then
          return typeof(base)
        end
        cls = base
      end
    end
    return nil
  end,
  IsSubclassOf = function (this, c)
    return isSubclassOf(this[1], c[1])
  end,
  getIsInterface = getIsInterface,
  GetInterfaces = getInterfaces,
  IsAssignableFrom = isAssignableFrom,
  IsInstanceOfType = function (this, obj)
    if obj == nil then
      return false 
    end
    return isAssignableFrom(this, obj:GetType())
  end,
  getIsArray = getIsArray,
  GetElementType = function (this)
    if getIsArray(this) then
      return typeof(this[1].__genericT__)
    end
    return nil
  end,
  ToString = function (this)
    return this[1].__name__
  end,
  GetTypeFrom = function (typeName, throwOnError, ignoreCase)
    if typeName == nil then
      throw(ArgumentNullException("typeName"))
    end
    if #typeName == 0 then
      if throwOnError then
        throw(TypeLoadException("Arg_TypeLoadNullStr"))
      end
      return nil
    end
    assert(not ignoreCase, "ignoreCase is not support")
    local cls = getClass(typeName)
    if cls ~= nil then
      return typeof(cls)
    end
    if throwOnError then
      throw(TypeLoadException(typeName .. ": failed to load."))
    end
    return nil
  end
})
Type.GetEnumValues = System.Enum.GetValues

local NumberType = {
  __index = Type,
  __eq = function (a, b)
    local c1, c2 = a[1], b[1]
    if c1 == c2 then
      return true
    end
    if c1 == Number or c2 == Number then
      return true
    end
    return false
  end
}

local function newNumberType(c)
  return setmetatable({ c }, NumberType)
end

local types = {
  [Char] = newNumberType(Char),
  [SByte] = newNumberType(SByte),
  [Byte] = newNumberType(Byte),
  [Int16] = newNumberType(Int16),
  [UInt16] = newNumberType(UInt16),
  [Int32] = newNumberType(Int32),
  [UInt32] = newNumberType(UInt32),
  [Int64] = newNumberType(Int64),
  [UInt64] = newNumberType(UInt64),
  [Single] = newNumberType(Single),
  [Double] = newNumberType(Double),
  [Int] = newNumberType(Int),
  [Number] = newNumberType(Number),
}

local customTypeof = System.config.customTypeof

function typeof(cls)
  assert(cls)
  local t = types[cls]
  if t == nil then
    if customTypeof then
      t = customTypeof(cls)
      if t then
        types[cls] = t
        return t
      end
    end
    t = setmetatable({ cls }, Type)
    types[cls] = t
  end
  return t
end

local function getType(obj)
  return typeof(getmetatable(obj))
end

System.typeof = typeof
System.Object.GetType = getType

local function addCheckInterface(set, cls)
  local interface = cls.interface
  if interface then
    for i = 1, #interface do
      local it = interface[i]
      set[it] = true
      addCheckInterface(set, it)
    end
  end
end

local function getCheckSet(cls)
  local set = {}
  local p = cls
  repeat
    set[p] = true
    addCheckInterface(set, p)
    p = getmetatable(p)
  until not p
  return set
end

local customTypeCheck = System.config.customTypeCheck

local checks = setmetatable({}, {
  __index = function (checks, cls)
    if customTypeCheck then
      local f, add = customTypeCheck(cls)
      if f then
        if add then
          checks[cls] = f
        end
        return f
      end
    end

    local set = getCheckSet(cls)
    local function check(obj, T)
      return set[T] == true
    end
    checks[cls] = check
    return check
  end
})

checks[Number] = function (obj, T)
  local set = getCheckSet(Number)
  local numbers = {
    [Char] = function (obj) return type(obj) == "number" and obj >= 0 and obj <= 65535 and floor(obj) == obj end,
    [SByte] = function (obj) return type(obj) == "number" and obj >= -128 and obj <= 127 and floor(obj) == obj end,
    [Byte] = function (obj) return type(obj) == "number" and obj >= 0 and obj <= 255 and floor(obj) == obj end,
    [Int16] = function (obj) return type(obj) == "number" and obj >= -32768 and obj <= 32767 and floor(obj) == obj end,
    [UInt16] = function (obj) return type(obj) == "number" and obj >= 0 and obj <= 32767 and floor(obj) == obj end,
    [Int32] = function (obj) return type(obj) == "number" and obj >= -2147483648 and obj <= 2147483647 and floor(obj) == obj end,
    [UInt32] = function (obj) return type(obj) == "number" and obj >= 0 and obj <= 4294967295 and floor(obj) == obj end,
    [Int64] = function (obj) return type(obj) == "number" and obj >= (-9223372036854775807 - 1) and obj <= 9223372036854775807 and floor(obj) == obj end,
    [UInt64] = function (obj) return type(obj) == "number" and obj >= 0 and obj <= 18446744073709551615 and floor(obj) == obj end,
    [Single] = function (obj) return type(obj) == "number" and obj >= -3.40282347E+38 and obj <= 3.40282347E+38 end,
    [Double] = function (obj) return type(obj) == "number" end
  }
  local function check(obj, T)
    local number = numbers[T]
    if number then
      return number(obj)
    end
    return set[T] == true
  end
  checks[Number] = check
  return check(obj, T)
end

local is, getName

if System.debugsetmetatable then
  is = function (obj, T)
    return checks[getmetatable(obj)](obj, T)
  end

  getName = function (obj)
    return obj.__name__
  end

  System.getClassFromObj = getmetatable
else
  local function getClassFromObj(obj)
    local t = type(obj)
    if t == "number" then
      return Number
    elseif t == "boolean" then
      return Boolean
    elseif t == "function" then
      return Delegate
    end
    return getmetatable(obj)
  end

  function System.ObjectGetType(this)
    if this == nil then throw(NullReferenceException()) end
    return typeof(getClassFromObj(this))
  end

  is = function (obj, T)
    local base = getClassFromObj(obj)
    if base then
      return checks[base](obj, T)
    end
    return false
  end

  getName = function (obj)
    return getClassFromObj(obj).__name__
  end

  System.getClassFromObj = getClassFromObj
end

System.is = is

function System.as(obj, cls)
  if obj ~= nil and is(obj, cls) then
    return obj
  end
  return nil
end

local function cast(cls, obj, nullable)
  if obj ~= nil then
    if is(obj, cls) then
      return obj
    end
    throw(InvalidCastException(("Unable to cast object of type '%s' to type '%s'."):format(getName(obj), cls.__name__)), 1)
  else
    if cls.class ~= "S" or nullable then
      return nil
    end
    throw(NullReferenceException(), 1)
  end
end

System.cast = cast

function System.castWithNullable(cls, obj)
  if System.isNullable(cls) then
    return cast(cls.__genericT__, obj, true)
  end
  return cast(cls, obj)
end
end

-- CoreSystemLib: Collections\List.lua
do
local System = System
local falseFn = System.falseFn
local lengthFn = System.lengthFn
local Array = System.Array

local List = {
  __ctor__ = Array.ctorList,
  getCapacity = lengthFn,
  setCapacity = Array.setCapacity,
  getCount = lengthFn,
  getIsFixedSize = falseFn,
  getIsReadOnly = falseFn,
  get = Array.get,
  set = Array.set,
  Add = Array.add,
  AddObj = Array.addObj,
  AddRange = Array.addRange,
  AsReadOnly = Array.AsReadOnly,
  BinarySearch = Array.BinarySearch,
  Clear = Array.clear,
  Contains = Array.Contains,
  CopyTo = Array.CopyTo,
  Exists = Array.Exists,
  Find = Array.Find,
  FindAll = Array.findAll,
  FindIndex = Array.FindIndex,
  FindLast = Array.FindLast,
  FindLastIndex = Array.FindLastIndex,
  ForEach = Array.ForEach,
  GetEnumerator = Array.GetEnumerator,
  GetRange = Array.getRange,
  IndexOf = Array.IndexOf,
  Insert = Array.insert,
  InsertRange = Array.insertRange,
  LastIndexOf = Array.LastIndexOf,
  Remove = Array.remove,
  RemoveAll = Array.removeAll,
  RemoveAt = Array.removeAt,
  RemoveRange = Array.removeRange,
  Reverse = Array.Reverse,
  Sort = Array.Sort,
  TrimExcess = System.emptyFn,
  ToArray = Array.toArray,
  TrueForAll = Array.TrueForAll
}

function System.listFromTable(t, T)
  return setmetatable(t, List(T))
end

local ListFn = System.define("System.Collections.Generic.List", function(T)
  return {
    base = { System.IList_1(T), System.IReadOnlyList_1(T), System.IList },
    __genericT__ = T,
  }
end, List, 1)

System.List = ListFn
System.ArrayList = ListFn(System.Object)
end

-- CoreSystemLib: Collections\Dictionary.lua
do
local System = System
local define = System.define
local throw = System.throw
local null = System.null
local falseFn = System.falseFn
local each = System.each
local lengthFn = System.lengthFn
local versions = System.versions
local Array = System.Array
local toString = System.toString

local checkIndexAndCount = System.checkIndexAndCount
local throwFailedVersion = System.throwFailedVersion
local ArgumentNullException = System.ArgumentNullException
local ArgumentException = System.ArgumentException
local KeyNotFoundException = System.KeyNotFoundException
local EqualityComparer = System.EqualityComparer
local NotSupportedException = System.NotSupportedException

local assert = assert
local pairs = pairs
local next = next
local select = select
local getmetatable = getmetatable
local setmetatable = setmetatable
local tconcat = table.concat
local tremove = table.remove
local type = type

local counts = setmetatable({}, { __mode = "k" })
System.counts = counts

local function getCount(this)
  local t = counts[this]
  if t then
    return t[1]
  end
  return 0
end

local function pairsFn(t, i)
  local count =  counts[t]
  if count then
    if count[2] ~= count[3] then
      throwFailedVersion()
    end
  end
  local k, v = next(t, i)
  if v == null then
    return k
  end
  return k, v
end

function System.pairs(t)
  local count = counts[t]
  if count then
    count[3] = count[2]
  end
  return pairsFn, t
end

local KeyValuePairFn
local KeyValuePair = {
  __ctor__ = function (this, ...)
    if select("#", ...) == 0 then
      this[1], this[2] = this.__genericTKey__:default(), this.__genericTValue__:default()
    else
      this[1], this[2] = ...
    end
  end,
  Create = function (key, value, TKey, TValue)
    return setmetatable({ key, value }, KeyValuePairFn(TKey, TValue))
  end,
  Deconstruct = function (this)
    return this[1], this[2]
  end,
  ToString = function (this)
    local t = { "[" }
    local count = 2
    local k, v = this[1], this[2]
    if k ~= nil then
      t[count] = toString(k)
      count = count + 1
    end
    t[count] = ", "
    count = count + 1
    if v ~= nil then
      t[count] = toString(v)
      count = count + 1
    end
    t[count] = "]"
    return tconcat(t)
  end
}

KeyValuePairFn = System.defStc("System.Collections.Generic.KeyValuePair", function(TKey, TValue)
  local cls = {
    __genericTKey__ = TKey,
    __genericTValue__ = TValue,
  }
  return cls
end, KeyValuePair, 2)
System.KeyValuePair = KeyValuePairFn

local function isKeyValuePair(t)
  return getmetatable(getmetatable(t)) == KeyValuePair
end

local DictionaryEnumerator = define("System.Collections.Generic.DictionaryEnumerator", {
  getCurrent = System.getCurrent, 
  Dispose = System.emptyFn,
  MoveNext = function (this)
    local t, kind = this.dict, this.kind
    local count = counts[t]
    if this.version ~= (count and count[2] or 0) then
      throwFailedVersion()
    end
    local k, v = next(t, this.index)
    if k ~= nil then
      if kind then
        kind[1] = k
        if v == null then v = nil end
        kind[2] = v
      elseif kind == false then
        if v == null then v = nil end
        this.current = v
      else
        this.current = k
      end
      this.index = k
      return true
    else
      if kind then
        kind[1], kind[2] = kind.__genericTKey__:default(), kind.__genericTValue__:default()
      elseif kind == false then
        this.current = t.__genericTValue__:default()
      else
        this.current = t.__genericTKey__:default()
      end
      return false
    end
  end
})

local function dictionaryEnumerator(t, kind)
  local current
  if not kind then
    local TKey, TValue = t.__genericTKey__, t.__genericTValue__
    kind = setmetatable({ TKey:default(), TValue:default() }, t.__genericT__)
    current = kind
  elseif kind == 1 then
    local TKey = t.__genericTKey__
    current = TKey:default()
    kind = nil
  else
    local TValue = t.__genericTValue__
    current = TValue:default()
    kind = false
  end
  local count = counts[t]
  local en = {
    dict = t,
    version = count and count[2] or 0,
    kind = kind,
    current = current
  }
  return setmetatable(en, DictionaryEnumerator)
end

local DictionaryCollection = define("System.Collections.Generic.DictionaryCollection", function (T)
    return {
      base = { System.ICollection_1(T), System.IReadOnlyCollection_1(T), System.ICollection },
      __genericT__ = T
    }
  end, {
  __ctor__ = function (this, dict, kind)
    this.dict = dict
    this.kind = kind
  end,
  getCount = function (this)
    return getCount(this.dict)
  end,
  GetEnumerator = function (this)
    return dictionaryEnumerator(this.dict, this.kind)
  end
}, 1)

local function add(this, key, value)
  if key == nil then throw(ArgumentNullException("key")) end
  if this[key] ~= nil then throw(ArgumentException("key already exists")) end
  this[key] = value == nil and null or value
  local t = counts[this]
  if t then
    t[1] = t[1] + 1
    t[2] = t[2] + 1
  else
    counts[this] = { 1, 1 }
  end
end

local function remove(this, key)
  if key == nil then throw(ArgumentNullException("key")) end
  if this[key] ~= nil then
    this[key] = nil
    local t = counts[this]
    t[1] = t[1] - 1
    t[2] = t[2] + 1
    return true
  end
  return false
end

local function buildFromDictionary(this, dictionary)
  if dictionary == nil then throw(ArgumentNullException("dictionary")) end
  local count = 0
  for k, v in pairs(dictionary) do
    this[k] = v
    count = count + 1
  end
  counts[this] = { count, 0 }
end

local ArrayDictionaryFn
local function buildHasComparer(this, ...)
   local Dictionary = ArrayDictionaryFn(this.__genericTKey__, this.__genericTValue__)
   Dictionary.__ctor__(this, ...)
   return setmetatable(this, Dictionary)
end

local Dictionary = {
  getIsFixedSize = falseFn,
  getIsReadOnly = falseFn,
  __ctor__ = function (this, ...) 
    local n = select("#", ...)
    if n == 0 then
    elseif n == 1 then
      local comparer = ...
      if comparer == nil or type(comparer) == "number" then  
      else
        local equals = comparer.EqualsOf
        if equals == nil then
          buildFromDictionary(this, comparer)
        else
          buildHasComparer(this, ...)
        end
      end
    else
      local dictionary, comparer = ...
      if comparer ~= nil then 
        buildHasComparer(this, ...)
      end
      if type(dictionary) ~= "number" then 
        buildFromDictionary(this, dictionary)
      end
    end
  end,
  AddKeyValue = add,
  Add = function (this, ...)
    local k, v
    if select("#", ...) == 1 then
      local pair = ... 
      k, v = pair[1], pair[2]
    else
      k, v = ...
    end
    add(this, k ,v)
  end,
  Clear = function (this)
    for k, v in pairs(this) do
      this[k] = nil
    end
    counts[this] = nil
  end,
  ContainsKey = function (this, key)
    if key == nil then throw(ArgumentNullException("key")) end
    return this[key] ~= nil 
  end,
  ContainsValue = function (this, value)
    if value == nil then
      for _, v in pairs(this) do
        if v == null then
          return true
        end
      end
    else
      local comparer = EqualityComparer(this.__genericTValue__).getDefault()
      local equals = comparer.EqualsOf
        for _, v in pairs(this) do
          if v ~= null then
            if equals(comparer, value, v ) then
              return true
            end
          end
      end
    end
    return false
  end,
  Contains = function (this, pair)
    local key = pair[1]
    if key == nil then throw(ArgumentNullException("key")) end
    local value = this[key]
    if value ~= nil then
      if value == null then value = nil end
      local comparer = EqualityComparer(this.__genericTValue__).getDefault()
      if comparer:EqualsOf(value, pair[2]) then
        return true
      end
    end
    return false
  end,
  CopyTo = function (this, array, index)
    local count = getCount(this)
    checkIndexAndCount(array, index, count)
    if count > 0 then
      local KeyValuePair = this.__genericT__
      index = index + 1
      for k, v in pairs(this) do
        if v == null then v = nil end
        array[index] = setmetatable({ k, v }, KeyValuePair)
        index = index + 1
      end
    end
  end,
  RemoveKey = remove,
  Remove = function (this, key)
    if isKeyValuePair(key) then
      local k, v = key[1], key[2]
      if k == nil then throw(ArgumentNullException("key")) end
      local value = this[k]
      if value ~= nil then
        if value == null then value = nil end
        local comparer = EqualityComparer(this.__genericTValue__).getDefault()
        if comparer:EqualsOf(value, v) then
          remove(this, k)
          return true
        end
      end
      return false
    end
    return remove(this, key)
  end,
  TryGetValue = function (this, key)
    if key == nil then throw(ArgumentNullException("key")) end
    local value = this[key]
    if value == nil then
      return false, this.__genericTValue__:default()
    end
    if value == null then return true end
    return true, value
  end,
  getComparer = function (this)
    return EqualityComparer(this.__genericTKey__).getDefault()
  end,
  getCount = getCount,
  get = function (this, key)
    if key == nil then throw(ArgumentNullException("key")) end
    local value = this[key]
    if value == nil then throw(KeyNotFoundException()) end
    if value ~= null then
      return value
    end
    return nil
  end,
  set = function (this, key, value)
    if key == nil then throw(ArgumentNullException("key")) end
    local t = counts[this]
    if t then
      if this[key] == nil then
        t[1] = t[1] + 1
      end
      t[2] = t[2] + 1
    else
      counts[this] = { 1, 1 }
    end
    this[key] = value == nil and null or value
  end,
  GetEnumerator = dictionaryEnumerator,
  getKeys = function (this)
    return DictionaryCollection(this.__genericTKey__)(this, 1)
  end,
  getValues = function (this)
    return DictionaryCollection(this.__genericTValue__)(this, 2)
  end
}

local ArrayDictionaryEnumerator = define("System.Collections.Generic.ArrayDictionaryEnumerator", function (T)
  return {
    base = { System.IEnumerator_1(T) }
  }
end, {
  getCurrent = System.getCurrent, 
  Dispose = System.emptyFn,
  MoveNext = function (this)
    local t = this.list
    if this.version ~= versions[t] then
      throwFailedVersion()
    end
    local index = this.index
    local pair = t[index]
    if pair ~= nil then
      if this.kind then
        this.current = pair[2]
      else
        this.current = pair[1]
      end
      this.index = index + 1
      return true
    end
    this.current = nil
    return false
  end
}, 1)

local arrayDictionaryEnumerator = function (t, kind, T)
  return setmetatable({ list = t, kind = kind, index = 1, version = versions[t], currnet = T:default() }, ArrayDictionaryEnumerator(T))
end

local ArrayDictionaryCollection = define("System.Collections.Generic.ArrayDictionaryCollection", function (T)
  return {
    base = { System.ICollection_1(T), System.IReadOnlyCollection_1(T), System.ICollection },
    __genericT__ = T
  }
  end, {
  __ctor__ = function (this, dict, kind)
    this.dict = dict
    this.kind = kind
  end,
  getCount = function (this)
    return #this.dict
  end,
  get = function (this, index)
    local p = this.dict[index + 1]
    if p == nil then throw(System.ArgumentOutOfRangeException()) end
    if this.kind then
      return p[2]
    end
    return p[1]
  end,
  Contains = function (this, v)
    if this.kind then
      return this.dict:ContainsValue(v)
    end 
    return this.dict:ContainsKey(v)
  end,
  GetEnumerator = function (this)
    return arrayDictionaryEnumerator(this.dict, this.kind, this.__genericT__)
  end
}, 1)

local ArrayDictionary = (function ()
  local function buildFromDictionary(this, dictionary)
    if dictionary == nil then throw(ArgumentNullException("dictionary")) end
    local count = 1
    local KeyValuePair = this.__genericT__
    for _, pair in each(dictionary) do
      local k, v = pair[1], pair[2]
      if type(k) == "table" and k.class == 'S' then
        k = k:__clone__()
      end
      this[count] = setmetatable({ k, v }, KeyValuePair)
      count = count + 1
    end
  end 
  
  local function add(this, key, value, set)
    if key == nil then throw(ArgumentNullException("key")) end
    local len = #this
    if len > 0 then
      local comparer = this.comparer
      local equals = comparer.EqualsOf
      for i = 1, len do
        if equals(comparer, this[i][1], key) then
          if set then
            this[i][2] = value
            return
          else
            throw(ArgumentException("key already exists"))
          end
        end
      end
    end
    this[len + 1] = setmetatable({ key, value }, this.__genericT__)
    versions[this] = (versions[this] or 0) + 1
  end
  
  local function remove(this, key)
    if key == nil then throw(ArgumentNullException("key")) end
    local len = #this
    if len > 0 then
      local comparer = this.comparer
      local equals = comparer.EqualsOf
      for i = 1, len do
        if equals(comparer, this[i][1], key) then
          tremove(this, i)
          versions[this] = (versions[this] or 0) + 1
          return true
        end
      end
    end
    return false
  end
 
  return {
    getIsFixedSize = falseFn,
    getIsReadOnly = falseFn,
    __ctor__ = function (this, ...)
      local Comparer
      local n = select("#", ...)
      if n == 0 then
      elseif n == 1 then
        local comparer = ...
        if comparer == nil or type(comparer) == "number" then  
        else
          local equals = comparer.EqualsOf
          if equals == nil then
            buildFromDictionary(this, comparer)
          else
            Comparer = comparer
          end
        end
      else
        local dictionary, comparer = ...
        if type(dictionary) ~= "number" then 
           buildFromDictionary(this, dictionary)
        end
        Comparer = comparer
      end
      this.comparer = Comparer or EqualityComparer(this.__genericTKey__).getDefault()
    end,
    AddKeyValue = add,
    Add = function (this, ...)
      local k, v
      if select("#", ...) == 1 then
        local pair = ... 
        k, v = pair[1], pair[2]
      else
        k, v = ...
      end
      add(this, k ,v)
    end,
    Clear = Array.clear,
    ContainsKey = function (this, key)
      if key == nil then throw(ArgumentNullException("key")) end
      local len = #this
      if len > 0 then
        local comparer = this.comparer
        local equals = comparer.EqualsOf
        for i = 1, len do
          if equals(comparer, this[i][1], key) then
            return true
          end
        end
      end
      return false
    end,
    ContainsValue = function (this, value)
      local len = #this
      if len > 0 then
        local comparer = EqualityComparer(this.__genericTValue__).getDefault()
        local equals = comparer.EqualsOf
        for i = 1, len do
          if equals(comparer, value, this[i][2]) then
            return true
          end
        end
      end
      return false
    end,
    Contains = function (this, pair)
      local key = pair[1]
      if key == nil then throw(ArgumentNullException("key")) end
      local len = #this
      if len > 0 then
        local comparer = this.comparer
        local equals = comparer.EqualsOf
        for i = 1, len do
          local t = this[i]
          if equals(comparer, t[1], key) then
            local comparer = EqualityComparer(this.__genericTValue__).getDefault()
            if comparer:EqualsOf(t[2], pair[2]) then
              return true
            end 
          end
        end
      end
      return false
    end,
    CopyTo = function (this, array, index)
      local count = #this
      checkIndexAndCount(array, index, count)
      if count > 0 then
        local KeyValuePair = this.__genericT__
        index = index + 1
        for i = 1, count do
          local t = this[i]
          array[index] = setmetatable({ t[1]:__clone__(), t[2] }, KeyValuePair)
          index = index + 1
        end
      end
    end,
    RemoveKey = remove,
    Remove = function (this, key)
      if isKeyValuePair(key) then
        local len = #this
        local k, v = key[1], key[2]
        for i = 1, #this do
          local pair = this[i]
          if pair[1]:EqualsObj(k) then
            local comparer = EqualityComparer(this.__genericTValue__).getDefault()
            if comparer:EqualsOf(pair[2], v) then
              tremove(this, i)
              return true
            end
          end
        end
      end
      return false
    end,
    TryGetValue = function (this, key)
      if key == nil then throw(ArgumentNullException("key")) end
      local len = #this
      if len > 0 then
        local comparer = this.comparer
        local equals = comparer.EqualsOf
        for i = 1, len do
          local pair = this[i]
          if equals(comparer, pair[1], key) then
            return true, pair[2]
          end
        end
      end
      return false, this.__genericTValue__:default()
    end,
    getComparer = function (this)
      return this.comparer
    end,
    getCount = lengthFn,
    get = function (this, key)
      if key == nil then throw(ArgumentNullException("key")) end
      local len = #this
      if len > 0 then
        local comparer = this.comparer
        local equals = comparer.EqualsOf
        for i = 1, len do
          local pair = this[i]
          if equals(comparer, pair[1], key) then
            return pair[2]
          end
        end
      end
      throw(KeyNotFoundException())
    end,
    set = function (this, key, value)
      add(this, key, value, true)
    end,
    GetEnumerator = Array.GetEnumerator,
    getKeys = function (this)
      return ArrayDictionaryCollection(this.__genericTKey__)(this)
    end,
    getValues = function (this)
      return ArrayDictionaryCollection(this.__genericTValue__)(this, true)
    end
  }
end)()

ArrayDictionaryFn = define("System.Collections.Generic.ArrayDictionary", function(TKey, TValue) 
  return { 
    base = { System.IDictionary_2(TKey, TValue), System.IDictionary, System.IReadOnlyDictionary_2(TKey, TValue) },
    __genericT__ = KeyValuePairFn(TKey, TValue),
    __genericTKey__ = TKey,
    __genericTValue__ = TValue,
  }
end, ArrayDictionary, 2)

function System.dictionaryFromTable(t, TKey, TValue)
  return setmetatable(t, Dictionary(TKey, TValue))
end

function System.isDictLike(t)
  return type(t) == "table" and t.GetEnumerator == dictionaryEnumerator
end

local DictionaryFn = define("System.Collections.Generic.Dictionary", function(TKey, TValue)
  local array, len
  if TKey.class == 'S' and type(TKey:default()) == "table" then
    array = ArrayDictionary
  else
    len = getCount
  end
  return { 
    base = { System.IDictionary_2(TKey, TValue), System.IDictionary, System.IReadOnlyDictionary_2(TKey, TValue) },
    __genericT__ = KeyValuePairFn(TKey, TValue),
    __genericTKey__ = TKey,
    __genericTValue__ = TValue,
    __len = len
  }, array
end, Dictionary, 2)

System.Dictionary = DictionaryFn
System.ArrayDictionary = ArrayDictionaryFn

local Object = System.Object
System.Hashtable = DictionaryFn(Object, Object)
end

-- CoreSystemLib: Collections\Queue.lua
do
local System = System
local Array = System.Array

local function tryDequeue(this)
  if #this == 0 then
    return false
  end
  return true, this:Dequeue()
end

local Queue = {
  __ctor__ = Array.ctorList,
  getCount = Array.getLength,
  Clear = Array.clear,
  Contains = Array.Contains,
  CopyTo = Array.CopyTo,
  Dequeue = Array.popFirst,
  Enqueue = Array.add,
  GetEnumerator = Array.GetEnumerator,
  Peek = Array.first,
  ToArray = Array.toArray,
  TrimExcess = System.emptyFn,
  TryDequeue = tryDequeue
}

function System.queueFromTable(t, T)
  return setmetatable(t, Queue(T))
end

local QueueFn = System.define("System.Collections.Generic.Queue", function(T) 
  return {
    base = { System.IEnumerable_1(T), System.ICollection },
    __genericT__ = T,
  }
end, Queue, 1)

System.Queue = QueueFn
System.queue = QueueFn(System.Object)
end

-- CoreSystemLib: Collections\Stack.lua
do
local System = System
local Array = System.Array

local Stack = {
  __ctor__ = Array.ctorList,
  getCount = Array.getLength,
  Clear = Array.clear,
  Contains = Array.Contains,
  GetEnumerator = Array.reverseEnumerator,
  Push = Array.add,
  Peek = Array.last,
  Pop = Array.popLast,
  ToArray = Array.toArray,
  TrimExcess = System.emptyFn
}

function System.stackFromTable(t, T)
  return setmetatable(t, Stack(T))
end

local StackFn = System.define("System.Collections.Generic.Stack", function(T) 
  return {
    base = { System.IEnumerable_1(T), System.ICollection },
    __genericT__ = T,
  }
end, Stack, 1)

System.Stack = StackFn
System.stack = StackFn(System.Object)
end

-- CoreSystemLib: Collections\HashSet.lua
do
local System = System
local throw = System.throw
local each = System.each
local Dictionary = System.Dictionary
local wrap = System.wrap
local unWrap = System.unWrap
local getEnumerator = Dictionary.GetEnumerator 
local ArgumentNullException = System.ArgumentNullException

local assert = assert
local pairs = pairs
local select = select

local counts = System.counts

local function build(this, collection, comparer)
  if comparer ~= nil then
    assert(false)
  end
  if collection == nil then
    throw(ArgumentNullException("collection"))
  end
  this:UnionWith(collection)
end

local function checkUniqueAndUnfoundElements(this, other, returnIfUnfound)
  if #this == 0 then
    local numElementsInOther = 0
    for _, item in each(other) do
      numElementsInOther = numElementsInOther + 1
      break
    end
    return 0, numElementsInOther
  end
  local set, uniqueCount, unfoundCount = {}, 0, 0
  for _, item in each(other) do
    item = wrap(item)
    if this[item] ~= nil then
      if set[item] == nil then
        set[item] = true
        uniqueCount = uniqueCount + 1
      end
    else
      unfoundCount = unfoundCount + 1
      if returnIfUnfound then
        break
      end
    end
  end
  return uniqueCount, unfoundCount
end

local HashSet = {
  __ctor__ = function (this, ...)
    local len = select("#", ...)
    if len == 0 then
    elseif len == 1 then
      local collection = ...
      if collection == nil then return end
      if collection.getEnumerator ~= nil then
        build(this, collection, nil)
      else
        assert(true)
      end
    else 
      build(this, ...)
    end
  end,
  Clear = Dictionary.Clear,
  getCount = Dictionary.getCount,
  getIsReadOnly = System.falseFn,
  Contains = function (this, item)
    item = wrap(item)
    return this[item] ~= nil
  end,
  Remove = function (this, item)
    item = wrap(item)
    if this[item] then
      this[item] = nil
      local t = counts[this]
      t[1] = t[1] - 1
      t[2] = t[2] + 1
      return true
    end
    return false
  end,
  GetEnumerator = function (this)
    return getEnumerator(this, 1)
  end,
  Add = function (this, v)
    v = wrap(v)
    if this[v] == nil then
      this[v] = true
      local t = counts[this]
      if t then
        t[1] = t[1] + 1
        t[2] = t[2] + 1
      else
        counts[this] = { 1, 1 }
      end
      return true
    end
    return false
  end,
  UnionWith = function (this, other)
    if other == nil then
      throw(ArgumentNullException("other"))
    end
    local count = 0
    for _, v in each(collection) do
      v = wrap(v)
      if this[v] == nil then
        this[v] = true
        count = count + 1
      end
    end
    if count > 0 then
      local t = counts[this]
      if t then
        t[1] = t[1] + count
        t[2] = t[2] + 1
      else
        counts[this] = { count, 1 }  
      end
    end
  end,
  IntersectWith = function (this, other)
    if other == nil then
      throw(ArgumentNullException("other"))
    end
    local set = {}
    for _, v in each(other) do
      v = wrap(v)
      if this[v] ~= nil then
        set[v] = true
      end
    end
    local count = 0
    for v, _ in pairs(this) do
      if set[v] == nil then
        this[v] = nil
        count = count + 1
      end
    end
    if count > 0 then
      local t = counts[this]
      t[1] = t[1] - count
      t[2] = t[2] + 1
    end
  end,
  ExceptWith = function (this, other)
    if other == nil then
      throw(ArgumentNullException("other"))
    end
    if other == this then
      this:Clear()
      return
    end
    local count = 0
    for _, v in each(other) do
      v = wrap(v)
      if this[v] ~= nil then
        this[v] = nil
        count = count + 1
      end
    end
    if count > 0 then
      local t = counts[this]
      t[1] = t[1] - count
      t[2] = t[2] + 1
    end
  end,
  SymmetricExceptWith = function (this, other)
    if other == nil then throw(ArgumentNullException("other")) end
    if other == this then
      this:Clear()
      return
    end
    local set = {}
    local count = 0
    local changed = false
    for _, v in each(other) do
      v = wrap(v)
      if this[v] == nil then
        this[v] = true
        count = count + 1
        changed = true
        set[v] = true
      elseif set[v] == nil then 
        this[v] = nil
        count = count - 1
        changed = true
      end
    end
    if changed then
      local t = counts[this]
      if t then
        t[1] = t[1] + count
        t[2] = t[2] + 1
      else
        counts[this] = { count, 1 }
      end
    end
  end,
  IsSubsetOf = function (this, other)
    if other == nil then
      throw(ArgumentNullException("other"))
    end
    local count = #this
    if count == 0 then
      return true
    end
    local uniqueCount, unfoundCount = checkUniqueAndUnfoundElements(this, other, false)
    return uniqueCount == count and unfoundCount >= 0
  end,
  IsProperSubsetOf = function (this, other)
    if other == nil then
      throw(ArgumentNullException("other"))
    end
    local uniqueCount, unfoundCount = checkUniqueAndUnfoundElements(this, other, false)
    return uniqueCount == #this and unfoundCount > 0
  end,
  IsSupersetOf = function (this, other)
    if other == nil then
      throw(ArgumentNullException("other"))
    end
    for _, element in each(other) do
      element = wrap(element)
      if this[element] == nil then
        return false
      end
    end
    return true
  end,
  IsProperSupersetOf = function (this, other)
    if other == nil then
      throw(ArgumentNullException("other"))
    end
    local count = #this
    if count == 0 then
      return false
    end
    local uniqueCount, unfoundCount = checkUniqueAndUnfoundElements(this, other, true)
    return uniqueCount < count and unfoundCount == 0
  end,
  Overlaps = function (this, other)
    if other == nil then
      throw(ArgumentNullException("other"))
    end
    if #this == 0 then
      return false
    end
    for _, element in each(other) do
      element = wrap(element)
      if this[element] ~= nil then
        return true
      end
    end
    return false
  end,
  SetEquals = function (this, other)
    if other == nil then
      throw(ArgumentNullException("other"))
    end
    local uniqueCount, unfoundCount = checkUniqueAndUnfoundElements(this, other, true)
    return uniqueCount == #this and unfoundCount == 0
  end,
  RemoveWhere = function (this, match)
    if match == nil then
      throw(ArgumentNullException("match"))
    end
    local numRemoved = 0
    for v, _ in pairs(this) do
      if match(unWrap(v)) then
        this[v] = nil
        numRemoved = numRemoved + 1
      end
    end
    if numRemoved > 0 then
      local t = counts[this]
      t[1] = t[1] - numRemoved
      t[2] = t[2] + 1
    end
    return numRemoved
  end,
  TrimExcess = System.emptyFn
}

function System.hashSetFromTable(t, T)
  return setmetatable(t, HashSet(T))
end

System.HashSet = System.define("System.Collections.Generic.HashSet", function(T) 
  return { 
    base = { System.ICollection_1(T), System.ISet_1(T) }, 
    __genericT__ = T,
    __genericTKey__ = T,
    __len = HashSet.getCount
  }
end, HashSet, 1)
end

-- CoreSystemLib: Collections\LinkedList.lua
do
local System = System
local define = System.define
local throw = System.throw
local each = System.each
local checkIndexAndCount = System.checkIndexAndCount
local ArgumentNullException = System.ArgumentNullException
local InvalidOperationException = System.InvalidOperationException
local EqualityComparer = System.EqualityComparer

local setmetatable = setmetatable
local select = select

local LinkedListNode = define("System.Collections.Generic.LinkedListNode", {
  __ctor__ = function (this, value)
    this.Value = value
  end,
  getNext = function (this)
    local next = this.next
    if next == nil or next == this.List.head then
      return nil
    end
    return next
  end,
  getPrevious = function (this)
    local prev = this.prev
    if prev == nil or this == this.List.head then
      return nil
    end
    return prev
  end
})
System.LinkedListNode = LinkedListNode

local function newLinkedListNode(list, value)
  return setmetatable({ List = assert(list), Value = value }, LinkedListNode)
end

local function vaildateNewNode(this, node)
  if node == nil then
    throw(ArgumentNullException("node"))
  end
  if node.List ~= nil then
    throw(InvalidOperationException("ExternalLinkedListNode"))
  end
end

local function vaildateNode(this, node)
  if node == nil then
    throw(ArgumentNullException("node"))
  end
  if node.List ~= this then
    throw(InvalidOperationException("ExternalLinkedListNode"))
  end
end

local function insertNodeBefore(this, node, newNode)
  newNode.next = node
  newNode.prev = node.prev
  node.prev.next = newNode
  node.prev = newNode
  this.Count = this.Count + 1
  this.version = this.version + 1
end

local function insertNodeToEmptyList(this, newNode)
  newNode.next = newNode
  newNode.prev = newNode
  this.head = newNode
  this.Count = this.Count + 1
  this.version = this.version + 1
end

local function invalidate(this)
  this.List = nil
  this.next = nil
  this.prev = nil
end

local function remvoeNode(this, node)
  if node.next == node then
    this.head = nil
  else
    node.next.prev = node.prev
    node.prev.next = node.next
    if this.head == node then
      this.head = node.next
    end
  end
  invalidate(node)
  this.Count = this.Count - 1
  this.version = this.version + 1
end

local LinkedListEnumerator = { 
  __index = false,
  getCurrent = System.getCurrent, 
  Dispose = System.emptyFn,
  MoveNext = function (this)
    local list = this.list
    local node = this.node
    if this.version ~= list.version then
      System.throwFailedVersion()
    end
    if node == nil then
      return false
    end
    this.current = node.Value
    node = node.next
    if node == list.head then
      node = nil
    end
    this.node = node
    return true
  end
}
LinkedListEnumerator.__index = LinkedListEnumerator

local LinkedList = { 
  Count = 0, 
  version = 0,
  __ctor__ = function (this, ...)
    local len = select("#", ...)
    if len == 1 then
      local collection = ...
      if collection == nil then
        throw(ArgumentNullException("collection"))
      end
      for _, item in each(collection) do
        this:AddLast(item)
      end
    end
  end,
  getCount = function (this)
    return this.Count
  end,
  getFirst = function(this)    
    return this.head
  end,
  getLast = function (this)
    local head = this.head
    return head ~= nil and head.prev or nil
  end,
  AddAfterNode = function (this, node, newNode)
    vaildateNode(this, node)
    vaildateNewNode(this, newNode)
    insertNodeBefore(this, node.next, newNode)
    newNode.List = this
  end,
  AddAfter = function (this, node, value)    
    vaildateNode(this, node)
    local result = newLinkedListNode(node.List, value)
    insertNodeBefore(this, node.next, result)
    return result
  end,
  AddBeforeNode = function (this, node, newNode)
    vaildateNode(this, node)
    vaildateNewNode(this, newNode)
    insertNodeBefore(this, node, newNode)
    newNode.List = this
    if node == this.head then
      this.head = newNode
    end
  end,
  AddBefore = function (this, node, value)
    vaildateNode(this, node)
    local result = newLinkedListNode(node.List, value)
    insertNodeBefore(this, node, result)
    if node == this.head then
      this.head = result
    end
    return result
  end,
  AddFirstNode = function (this, node)
	  vaildateNewNode(this, node)
    if this.head == nil then
      insertNodeToEmptyList(this, node)
    else
      insertNodeBefore(this, this.head, node)
      this.head = node
    end
    node.List = this
  end,
  AddFirst = function (this, value)
    local result = newLinkedListNode(this, value)
    if this.head == nil then
      insertNodeToEmptyList(this, result)
    else
      insertNodeBefore(this, this.head, result)
      this.head = result
    end
    return result
  end,
  AddLastNode = function (this, node)
    vaildateNewNode(this, node)
    if this.head == nil then
      insertNodeToEmptyList(this, node)
    else
      insertNodeBefore(this, this.head, node)
    end
    node.List = this
  end,
  AddLast = function (this, value)
    local result = newLinkedListNode(this, value)
    if this.head == nil then
      insertNodeToEmptyList(this, result)
    else
      insertNodeBefore(this, this.head, result)
    end
    return result
  end,
  Clear = function (this)
    local current = this.head
    while current ~= nil do
      local temp = current
      current = current.next
      invalidate(temp)
    end
    this.head = nil
    this.Count = 0
    this.version = this.version + 1
  end,
  Contains = function (this, value)
    return this:Find(value) ~= nil
  end,
  CopyTo = function (this, array, index)
    checkIndexAndCount(array, index, this.Count)
    local head = this.head
    local node = head
    if node then
      index = index + 1
      repeat
        local value = node.Value
        if value == nil then value = System.null end
        array[index] = value
        index = index + 1
        node = node.next
      until node == head
    end
  end,
  Find = function (this, value)     
    local head = this.head
    local node = head
    local comparer = EqualityComparer(this.__genericT__).getDefault()
    local equals = comparer.EqualsOf
    if node ~= nil then
      if value ~= nil then
        repeat
          if equals(comparer, node.Value, value) then
            return node
          end
          node = node.next
        until node == head
      else
        repeat 
          if node.Value == nil then
            return node
          end
          node = node.next
        until node == head
      end
    end
    return nil
  end,
  FindLast = function (this, value)
    local head = this.head
    if head == nil then return nil end
    local last = head.prev
    local node = last
    local comparer = EqualityComparer(this.__genericT__).getDefault()
    local equals = comparer.EqualsOf
    if node ~= nil then
      if value ~= nil then
        repeat
          if equals(comparer, node.Value, value) then
            return node
          end
          node = node.prev
        until node == last
      else
        repeat 
          if node.Value == nil then
            return node
          end
          node = node.prev
         until node == last
      end
    end
    return nil
  end,
  RemoveNode = function (this, node)
    vaildateNode(this, node)
    remvoeNode(this, node)
  end,
  Remove = function (this, node)
    node = this:Find(node)
    if node ~= nil then
      remvoeNode(this, node)
    end
    return false
  end,
  RemoveFirst = function (this)
    local head = this.head
    if head == nil then
      throw(InvalidOperationException("LinkedListEmpty"))
    end
    remvoeNode(this, head)
  end,
  RemoveLast = function (this)
    local head = this.head
    if head == nil then
      throw(InvalidOperationException("LinkedListEmpty"))
    end
    remvoeNode(this, head.prev)
  end,
  GetEnumerator = function (this)
    return setmetatable({ list = this, version = this.version, node = this.head }, LinkedListEnumerator)
  end
}

function System.linkedListFromTable(t, T)
  return setmetatable(t, LinkedList(T))
end

System.LinkedList = define("System.Collections.Generic.LinkedList", function(T) 
  return { 
  base = { System.ICollection_1(T), System.ICollection }, 
  __genericT__ = T,
  __len = LinkedList.getCount
  }
end, LinkedList, 1)
end

-- CoreSystemLib: Collections\Linq.lua
do
local System = System
local define = System.define
local throw = System.throw
local each = System.each
local identityFn = System.identityFn
local wrap = System.wrap
local unWrap = System.unWrap
local is = System.is
local cast = System.cast
local Int32 = System.Int32
local isArrayLike = System.isArrayLike
local isDictLike = System.isDictLike
local Array = System.Array
local arrayEnumerator = Array.GetEnumerator

local NullReferenceException = System.NullReferenceException
local ArgumentNullException = System.ArgumentNullException
local ArgumentOutOfRangeException = System.ArgumentOutOfRangeException
local InvalidOperationException = System.InvalidOperationException
local EqualityComparer = System.EqualityComparer
local Comparer_1 = System.Comparer_1
local Empty = System.Array.Empty

local IEnumerable_1 = System.IEnumerable_1
local IEnumerable = System.IEnumerable
local IEnumerator_1 = System.IEnumerator_1
local IEnumerator = System.IEnumerator

local assert = assert
local getmetatable = getmetatable
local setmetatable = setmetatable
local select = select
local pairs = pairs
local tsort = table.sort

local InternalEnumerable = define("System.Linq.InternalEnumerable", function(T) 
  return {
    base = { IEnumerable_1(T) }
  }
end, nil, 1)

local function createEnumerable(T, GetEnumerator)
  assert(T)
  return setmetatable({ __genericT__ = T, GetEnumerator = GetEnumerator }, InternalEnumerable(T))
end

local InternalEnumerator = define("System.Linq.InternalEnumerator", function(T) 
  return {
    base = { IEnumerator_1(T) }
  }
end, nil, 1)

local function createEnumerator(T, source, tryGetNext, init)
  assert(T)
  local state = 1
  local current
  local en
  return setmetatable({
    MoveNext = function()
      if state == 1 then
        state = 2
        if source then
          en = source:GetEnumerator() 
        end
        if init then
          init(en) 
        end
      end
      if state == 2 then
        local ok, v = tryGetNext(en)
        if ok then
          current = v
          return true
        elseif en then
          local dispose = en.Dispose
          if dispose then
            dispose(en)
          end    
        end
       end
       return false
    end,
    getCurrent = function()
      return current
    end
  }, InternalEnumerator(T))
end

local Enumerable = {}
define("System.Linq.Enumerable", Enumerable)

function Enumerable.Where(source, predicate)
  if source == nil then throw(ArgumentNullException("source")) end
  if predicate == nil then throw(ArgumentNullException("predicate")) end
  local T = source.__genericT__
  return createEnumerable(T, function() 
    local index = -1
    return createEnumerator(T, source, function(en)
      while en:MoveNext() do
        local current = en:getCurrent()
        index = index + 1
        if predicate(current, index) then
          return true, current
        end
      end 
      return false
    end)
  end)
end

function Enumerable.Select(source, selector, T)
  if source == nil then throw(ArgumentNullException("source")) end
  if selector == nil then throw(ArgumentNullException("selector")) end
  return createEnumerable(T, function()
    local index = -1
    return createEnumerator(T, source, function(en) 
      if en:MoveNext() then
        index = index + 1
        return true, selector(en:getCurrent(), index)
      end
      return false
    end)
  end)
end

local function selectMany(source, collectionSelector, resultSelector, T)
  if source == nil then throw(ArgumentNullException("source")) end
  if collectionSelector == nil then throw(ArgumentNullException("collectionSelector")) end
  if resultSelector == nil then throw(ArgumentNullException("resultSelector")) end
  return createEnumerable(T, function() 
    local element, midEn
    local index = -1
    return createEnumerator(T, source, function(en) 
      while true do
        if midEn and midEn:MoveNext() then
          return true, resultSelector(element, midEn:getCurrent())
        else
          if not en:MoveNext() then return false end
          index = index + 1
          local current = en:getCurrent()
          midEn = collectionSelector(current, index):GetEnumerator()
          if midEn == nil then
            throw(NullReferenceException())
          end
          element = current
        end  
      end
    end)
  end)
end

local function identityFnOfSelectMany(s, x)
  return x
end

function Enumerable.SelectMany(source, ...)
  local len = select("#", ...)
  if len == 2 then
    local collectionSelector, T = ...
    return selectMany(source, collectionSelector, identityFnOfSelectMany, T)
  else
    return selectMany(source, ...)
  end
end

function Enumerable.Take(source, count)
  if source == nil then throw(ArgumentNullException("source")) end
  local T = source.__genericT__
  return createEnumerable(T, function()
    return createEnumerator(T, source, function(en)
      if count > 0 then
        if en:MoveNext() then
          count = count - 1
          return true, en:getCurrent()
        end
      end
      return false
    end)
  end)
end

function Enumerable.TakeWhile(source, predicate)
  if source == nil then throw(ArgumentNullException("source")) end
  if predicate == nil then throw(ArgumentNullException("predicate")) end
  local T = source.__genericT__
  return createEnumerable(T, function()
    local index = -1
    return createEnumerator(T, source, function(en)
      if en:MoveNext() then
        local current = en:getCurrent()
        index = index + 1
        if not predicate(current, index) then
          return false
        end
        return true, current
      end
      return false
    end)
  end)
end

function Enumerable.Skip(source, count)
  if source == nil then throw(ArgumentNullException("source")) end
  local T = source.__genericT__
  return createEnumerable(T, function()
    return createEnumerator(T, source, function(en)
      while count > 0 and en:MoveNext() do count = count - 1 end
      if count <= 0 then
        if en:MoveNext() then
          return true, en:getCurrent() 
        end
      end
      return false
    end)
  end)
end

function Enumerable.SkipWhile(source, predicate)
  if source == nil then throw(ArgumentNullException("source")) end
  if predicate == nil then throw(ArgumentNullException("predicate")) end
  local T = source.__genericT__
  return createEnumerable(T, function()
    local index = -1
    local isSkipEnd = false
    return createEnumerator(T, source, function(en)
      while not isSkipEnd do
        if en:MoveNext() then
          local current = en:getCurrent()
          index = index + 1
          if not predicate(current, index) then
            isSkipEnd = true
            return true, current
          end     
        else 
          return false
        end
      end
      if en:MoveNext() then
        return true, en:getCurrent()
      end
      return false
    end)
  end)
end

local IGrouping = System.defInf("System.Linq.IGrouping_2", function (TKey, TElement)
  return {
    base = { IEnumerable_1(TElement) } 
  }
end)

local Grouping = define("System.Linq.Grouping", function (TKey, TElement)
  return {
    __genericT__ = TElement,
    base = { IGrouping(TKey, TElement) },
    GetEnumerator = arrayEnumerator,
    getKey = function (this)
      return this.key
    end,
    getCount = function (this)
      return #this
    end
  }
end, nil, 2)

local function getGrouping(this, key)
  local hashCode = this.comparer:GetHashCodeOf(key)
  local groupIndex = this.indexs[hashCode]
  return this.groups[groupIndex]
end

local Lookup = {
  __ctor__ = function (this, comparer)
    this.comparer = comparer or EqualityComparer(this.__genericTKey__).getDefault()
    this.groups = {}
    this.indexs = {}
  end,
  get = function (this, key)
    local grouping = getGrouping(this, key)
    if grouping ~= nil then return grouping end 
    return Empty(this.__genericTElement__)
  end,
  GetCount = function (this)
    return #this.groups
  end,
  Contains = function (this, key)
    return getGrouping(this, key) ~= nil
  end,
  GetEnumerator = function (this)
    return arrayEnumerator(this.groups, IGrouping)
  end
}

local LookupFn = define("System.Linq.Lookup", function(TKey, TElement)
  local cls = {
    __genericTKey__ = TKey,
    __genericTElement__ = TElement,
  }
  return cls
end, Lookup, 2)

local function addToLookup(this, key, value)
  local hashCode = this.comparer:GetHashCodeOf(key)
  local groupIndex = this.indexs[hashCode]
  local group
  if groupIndex == nil then
	  groupIndex = #this.groups + 1
	  this.indexs[hashCode] = groupIndex
	  group = setmetatable({ key = key }, Grouping(this.__genericTKey__, this.__genericTElement__))
	  this.groups[groupIndex] = group
  else
	  group = this.groups[groupIndex]
	  assert(group)
  end
  group[#group + 1] = wrap(value)
end

local function createLookup(source, keySelector, elementSelector, comparer, TKey, TElement)
  local lookup = LookupFn(TKey, TElement)(comparer)
  for _, item in each(source) do
    addToLookup(lookup, keySelector(item), elementSelector(item))
  end
  return lookup
end

local function createLookupForJoin(source, keySelector, comparer, TKey, TElement)
  local lookup = LookupFn(TKey, TElement)(comparer)
  for _, item in each(source) do
    local key = keySelector(item)
    if key ~= nil then
      addToLookup(lookup, key, item)
    end
  end
  return lookup
end

function Enumerable.Join(outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer, TKey, TResult)
  if outer == nil then throw(ArgumentNullException("outer")) end
  if inner == nil then throw(ArgumentNullException("inner")) end
  if outerKeySelector == nil then throw(ArgumentNullException("outerKeySelector")) end
  if innerKeySelector == nil then throw(ArgumentNullException("innerKeySelector")) end
  if resultSelector == nil then throw(ArgumentNullException("resultSelector")) end
  local lookup = createLookupForJoin(inner, innerKeySelector, comparer, TKey, inner.__genericT__)
  return createEnumerable(TResult, function ()
    local item, grouping, index
    return createEnumerator(TResult, outer, function (en)
      while true do
        if grouping ~= nil then
          index = index + 1
          if index < #grouping then
            return true, resultSelector(item, unWrap(grouping[index + 1]))
          end
        end
        if not en:MoveNext() then return false end
        local current = en:getCurrent()
        item = current
        grouping = getGrouping(lookup, outerKeySelector(current))
        index = -1
      end
    end)
  end)
end

function Enumerable.GroupJoin(outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer, TKey, TResult)
  if outer == nil then throw(ArgumentNullException("outer")) end
  if inner == nil then throw(ArgumentNullException("inner")) end
  if outerKeySelector == nil then throw(ArgumentNullException("outerKeySelector")) end
  if innerKeySelector == nil then throw(ArgumentNullException("innerKeySelector")) end
  if resultSelector == nil then throw(ArgumentNullException("resultSelector")) end
  local lookup = createLookupForJoin(inner, innerKeySelector, comparer, TKey, inner.__genericT__)
  return createEnumerable(TResult, function ()
    return createEnumerator(TResult, outer, function (en)
      if en:MoveNext() then
        local item = en:getCurrent()
        return true, resultSelector(item, lookup:get(outerKeySelector(item)))
      end
      return false
    end)
  end)
end

local function ordered(source, compare)
  local T = source.__genericT__
  local orderedEnumerable = createEnumerable(T, function()
    local t = {}
    local index = 0
    return createEnumerator(T, source, function() 
      index = index + 1
      local v = t[index]
      if v ~= nil then
        return true, unWrap(v)
      end
      return false
    end, 
    function() 
      local count = 1
      if isDictLike(source) then
        for k, v in pairs(source) do
          t[count] = setmetatable({ k, v }, T)
          count = count + 1
        end
      else
        for _, v in each(source) do
          t[count] = wrap(v)
          count = count + 1
        end
      end
      if count > 1 then
        tsort(t, function(x, y)
          return compare(unWrap(x), unWrap(y)) < 0 
        end)
      end
    end)
  end)
  orderedEnumerable.source = source
  orderedEnumerable.compare = compare
  return orderedEnumerable
end

local function orderBy(source, keySelector, comparer, TKey, descending)
  if source == nil then throw(ArgumentNullException("source")) end
  if keySelector == nil then throw(ArgumentNullException("keySelector")) end
  if comparer == nil then comparer = Comparer_1(TKey).getDefault() end 
  local keys = {}
  local function getKey(t) 
    local k = keys[t]
    if k == nil then
      k = keySelector(t)
      keys[t] = k
    end
    return k
  end
  local c = comparer.Compare
  local compare
  if descending then
    compare = function(x, y)
      return -c(comparer, getKey(x), getKey(y))
    end
  else
    compare = function(x, y)
      return c(comparer, getKey(x), getKey(y))
    end
  end
  return ordered(source, compare)
end

function Enumerable.OrderBy(source, keySelector, comparer, TKey)
  return orderBy(source, keySelector, comparer, TKey, false)
end

function Enumerable.OrderByDescending(source, keySelector, comparer, TKey)
  return orderBy(source, keySelector, comparer, TKey, true)
end

local function thenBy(source, keySelector, comparer, TKey, descending)
  if source == nil then throw(ArgumentNullException("source")) end
  if keySelector == nil then throw(ArgumentNullException("keySelector")) end
  if comparer == nil then comparer = Comparer_1(TKey).getDefault() end
  local keys = {}
  local function getKey(t) 
    local k = keys[t]
    if k == nil then
      k = keySelector(t)
      keys[t] = k
    end
    return k
  end
  local c = comparer.Compare
  local compare
  local parentSource, parentCompare = source.source, source.compare
  if descending then
    compare = function(x, y)
      local v = parentCompare(x, y)
      if v ~= 0 then
        return v
      else
        return -c(comparer, getKey(x), getKey(y))
      end
    end
  else
    compare = function(x, y)
      local v = parentCompare(x, y)
      if v ~= 0 then
        return v
      else
        return c(comparer, getKey(x), getKey(y))
      end
    end
  end
  return ordered(parentSource, compare)
end

function Enumerable.ThenBy(source, keySelector, comparer, TKey)
  return thenBy(source, keySelector, comparer, TKey, false)
end

function Enumerable.ThenByDescending(source, keySelector, comparer, TKey)
  return thenBy(source, keySelector, comparer, TKey, true)
end

local function groupBy(source, keySelector, elementSelector, comparer, TKey, TElement)
  if source == nil then throw(ArgumentNullException("source")) end
  if keySelector == nil then throw(ArgumentNullException("keySelector")) end
  if elementSelector == nil then throw(ArgumentNullException("elementSelector")) end
  return createEnumerable(IGrouping, function()
    return createLookup(source, keySelector, elementSelector, comparer, TKey, TElement):GetEnumerator()
  end)
end

function Enumerable.GroupBy(source, ...)
  if source == nil then throw(ArgumentNullException("source")) end
  local len = select("#", ...)
  if len == 2 then
    local keySelector, TKey = ...
    return groupBy(source, keySelector, identityFn, nil, TKey, source.__genericT__)
  elseif len == 3 then
    local keySelector, comparer, TKey = ...
    return groupBy(source, keySelector, identityFn, comparer, TKey, source.__genericT__)
  elseif len == 4 then
    local keySelector, elementSelector, TKey, TElement = ...
    return groupBy(source, keySelector, elementSelector, nil, TKey, TElement)
  else
    return groupBy(source, ...)
  end
end

local function groupBySelect(source, keySelector, elementSelector, resultSelector, comparer, TKey, TElement, TResult)
  if source == nil then throw(ArgumentNullException("source")) end
  if keySelector == nil then throw(ArgumentNullException("keySelector")) end
  if elementSelector == nil then throw(ArgumentNullException("elementSelector")) end
  if resultSelector == nil then throw(ArgumentNullException("resultSelector")) end
  return createEnumerable(TResult, function()
    local lookup = createLookup(source, keySelector, elementSelector, comparer, TKey, TElement)
    return createEnumerator(TResult, lookup, function(en)
      if en:MoveNext() then
        local current = en:getCurrent()
        return resultSelector(current.key, current)
      end
      return false
    end)
  end)
end

function Enumerable.GroupBySelect(source, ...)
  local len = select("#", ...)
  if len == 4 then
    local keySelector, resultSelector, TKey, TResult = ...
    return groupBySelect(source, keySelector, identityFn, resultSelector, nil, TKey, source.__genericT__, TResult)
  elseif len == 5 then
    local keySelector, resultSelector, comparer, TKey, TResult = ...
    return groupBySelect(source, keySelector, identityFn, resultSelector, comparer, TKey, source.__genericT__, TResult)
  elseif len == 6 then
    local keySelector, elementSelector, resultSelector, TKey, TElement, TResult = ...
    return groupBySelect(source, keySelector, elementSelector, resultSelector, nil, TKey, TElement, TResult)
  else
    return groupBySelect(source, ...)
  end
end

function Enumerable.Concat(first, second)
  if first == nil then throw(ArgumentNullException("first")) end
  if second == nil then throw(ArgumentNullException("second")) end
  local T = first.__genericT__
  return createEnumerable(T, function()
    local secondEn
    return createEnumerator(T, first, function(en)
      if secondEn == nil then
        if en:MoveNext() then
          return true, en:getCurrent()
        end
        secondEn = second:GetEnumerator()
      end
      if secondEn:MoveNext() then
        return true, secondEn:getCurrent()
      end
      return false
    end)
  end)
end

function Enumerable.Zip(first, second, resultSelector, TResult) 
  if first == nil then throw(ArgumentNullException("first")) end
  if second == nil then throw(ArgumentNullException("second")) end
  if resultSelector == nil then throw(ArgumentNullException("resultSelector")) end
  return createEnumerable(TResult, function()
    local e2
    return createEnumerator(TResult, first, function(e1)
      if e1:MoveNext() and e2:MoveNext() then
          return true, resultSelector(e1:getCurrent(), e2:getCurrent())
      end
    end, 
    function()
      e2 = second:GetEnumerator()
    end)
  end)
end

local function addToSet(set, v, getHashCode, comparer)
  local hashCode = getHashCode(comparer, v)
  if set[hashCode] == nil then
    set[hashCode] = true
    return true
  end
  return false
end

local function removeFromSet(set, v, getHashCode, comparer)
  local hashCode = getHashCode(comparer, v)
  if set[hashCode] ~= nil then
    set[hashCode] = nil
    return true
  end
  return false
end

local function getComparer(source, comparer)
  return comparer or EqualityComparer(source.__genericT__).getDefault()
end

function Enumerable.Distinct(source, comparer)
  if source == nil then throw(ArgumentNullException("source")) end
  local T = source.__genericT__
  return createEnumerable(T, function()
    local set = {}
    comparer = getComparer(source, comparer)
    local getHashCode = comparer.GetHashCodeOf
    return createEnumerator(T, source, function(en)
      while en:MoveNext() do
        local current = en:getCurrent()
        if addToSet(set, current, getHashCode, comparer) then
          return true, current  
        end
      end
      return false
    end)
  end)
end

function Enumerable.Union(first, second, comparer)
  if first == nil then throw(ArgumentNullException("first")) end
  if second == nil then throw(ArgumentNullException("second")) end
  local T = first.__genericT__
  return createEnumerable(T, function()
    local set = {}
    comparer = getComparer(first, comparer)
    local getHashCode = comparer.GetHashCodeOf
    local secondEn
    return createEnumerator(T, first, function(en)
      if secondEn == nil then
        while en:MoveNext() do
          local current = en:getCurrent()
          if addToSet(set, current, getHashCode, comparer) then
            return true, current  
          end
        end
        secondEn = second:GetEnumerator()
      end
      while secondEn:MoveNext() do
        local current = secondEn:getCurrent()
        if addToSet(set, current, getHashCode, comparer) then
          return true, current  
        end
      end
      return false
    end)
  end)
end

function Enumerable.Intersect(first, second, comparer)
  if first == nil then throw(ArgumentNullException("first")) end
  if second == nil then throw(ArgumentNullException("second")) end
  local T = first.__genericT__
  return createEnumerable(T, function()
    local set = {}
    comparer = getComparer(first, comparer)
    local getHashCode = comparer.GetHashCodeOf
    return createEnumerator(T, first, function(en)
      while en:MoveNext() do
        local current = en:getCurrent()
        if removeFromSet(set, current, getHashCode, comparer) then
          return true, current
        end
      end
      return false
    end,
    function()
      for _, v in each(second) do
        addToSet(set, v, getHashCode, comparer)
      end
    end)
  end) 
end

function Enumerable.Except(first, second, comparer)
  if first == nil then throw(ArgumentNullException("first")) end
  if second == nil then throw(ArgumentNullException("second")) end
  local T = first.__genericT__
  return createEnumerable(T, function()
    local set = {}
    comparer = getComparer(first, comparer)
    local getHashCode = comparer.GetHashCodeOf
    return createEnumerator(T, first, function(en) 
      while en:MoveNext() do
        local current = en:getCurrent()
        if addToSet(set, current, getHashCode, comparer) then
          return true, current  
        end
      end
      return false
    end,
    function()
      for _, v in each(second) do
        addToSet(set, v, getHashCode, comparer)
      end
    end)
  end)
end

function Enumerable.Reverse(source)
  if source == nil then throw(ArgumentNullException("source")) end
  local T = source.__genericT__
  return createEnumerable(T, function()
    local t = {}    
    local index
    return createEnumerator(T, nil, function() 
      if index > 1 then
        index = index - 1
        return true, t[index]
      end
      return false
    end,
    function()
      local count = 1
      for _, v in each(source) do
        t[count] = v
        count = count + 1
      end  
      index = count
    end)
  end)
end

function Enumerable.SequenceEqual(first, second, comparer)
  if first == nil then throw(ArgumentNullException("first")) end
  if second == nil then throw(ArgumentNullException("second")) end
  comparer = getComparer(first, comparer)
  local equals = comparer.EqualsOf
  local e1 = first:GetEnumerator()
  local e2 = second:GetEnumerator()
  while e1:MoveNext() do
    if not(e2:MoveNext() and equals(comparer, e1:getCurrent(), e2:getCurrent())) then
      return false
    end
  end
  if e2:MoveNext() then
    return false
  end
  return true
end

Enumerable.ToArray = Array.toArray

function Enumerable.ToList(source)
  return System.List(source.__genericT__)(source)
end

local function toDictionary(source, keySelector, elementSelector, comparer, TKey, TValue)
  if source == nil then throw(ArgumentNullException("source")) end
  if keySelector == nil then throw(ArgumentNullException("keySelector")) end
  if elementSelector == nil then throw(ArgumentNullException("elementSelector")) end
  local dict = System.Dictionary(TKey, TValue)(comparer)
  for _, v in each(source) do
    dict:Add(keySelector(v), elementSelector(v))
  end
  return dict
end

function Enumerable.ToDictionary(source, ...)
  local len = select("#", ...)
  if len == 2 then
    local keySelector, TKey = ...
    return toDictionary(source, keySelector, identityFn, nil, TKey, source.__genericT__)
  elseif len == 3 then
    local keySelector, comparer, TKey = ...
    return toDictionary(source, keySelector, identityFn, comparer, TKey, source.__genericT__)
  elseif len == 4 then
    local keySelector, elementSelector, TKey, TElement = ...
    return toDictionary(source, keySelector, elementSelector, nil, TKey, TElement)
  else
    return toDictionary(source, ...)
  end
end

local function toLookup(source, keySelector, elementSelector, comparer, TKey, TElement )
  if source == nil then throw(ArgumentNullException("source")) end
  if keySelector == nil then throw(ArgumentNullException("keySelector")) end
  if elementSelector == nil then throw(ArgumentNullException("elementSelector")) end
  return createLookup(source, keySelector, elementSelector, comparer, TKey, TElement)
end

function Enumerable.ToLookup(source, ...)
  local len = select("#", ...)
  if len == 2 then
    local keySelector, TKey = ...
    return toLookup(source, keySelector, identityFn, nil, TKey, source.__genericT__)
  elseif len == 3 then
    local keySelector, comparer, TKey = ...
    return toLookup(source, keySelector, identityFn, comparer, TKey, source.__genericT__)
  elseif len == 4 then
    local keySelector, elementSelector, TKey, TElement = ...
    return toLookup(source, keySelector, elementSelector, nil, TKey, TElement)
  else
    return toLookup(source, ...)
  end
end

function Enumerable.DefaultIfEmpty(source)
  if source == nil then throw(ArgumentNullException("source")) end
  local T = source.__genericT__
  local state 
  return createEnumerable(T, function()
    return createEnumerator(T, source, function(en)
      if not state then
        if en:MoveNext() then
          state = 1
          return true, en:getCurrent()
        end
        state = 2
        return true, T:default()
      elseif state == 1 then
        if en:MoveNext() then
          return true, en:getCurrent()
        end
      end
      return false
    end)
  end)
end

function Enumerable.OfType(source, T)
  if source == nil then throw(ArgumentNullException("source")) end
  return createEnumerable(T, function()
    return createEnumerator(T, source, function(en) 
      while en:MoveNext() do
        local current = en:getCurrent()
        if is(current, T) then
          return true, current
        end
      end
      return false
    end)
  end)
end

function Enumerable.Cast(source, T)
  if source == nil then throw(ArgumentNullException("source")) end
  if is(source, IEnumerable_1(T)) then return source end
  return createEnumerable(T, function()
    return createEnumerator(T, source, function(en) 
      if en:MoveNext() then
        return true, cast(T, en:getCurrent())
      end
      return false
    end)
  end)
end

local function first(source, ...)
  if source == nil then throw(ArgumentNullException("source")) end
  local len = select("#", ...)
  if len == 0 then
    if isArrayLike(source) then
      local count = #source
      if count > 0 then
        return true, unWrap(source[1])
      end
    else
      local en = source:GetEnumerator()
      if en:MoveNext() then 
        return true, en:getCurrent()
      end
    end
    return false, 0
  else
    local predicate = ...
    if predicate == nil then throw(ArgumentNullException("predicate")) end
    for _, v in each(source) do
      if predicate(v) then 
        return true, v
      end
    end
    return false, 1
  end
end

function Enumerable.First(source, ...)
  local ok, result = first(source, ...)
  if ok then return result end
  if result == 0 then
    throw(InvalidOperationException("NoElements"))
  end
  throw(InvalidOperationException("NoMatch"))
end

function Enumerable.FirstOrDefault(source, ...)
  local ok, result = first(source, ...)
  return ok and result or source.__genericT__:default()
end

local function last(source, ...)
  if source == nil then throw(ArgumentNullException("source")) end
  local len = select("#", ...)
  if len == 0 then
    if isArrayLike(source) then
      local count = #source
      if count > 0 then
        return true, unWrap(source[count])
      end
    else
      local en = source:GetEnumerator()
      if en:MoveNext() then 
        local result
        repeat
          result = en:getCurrent()
        until not en:MoveNext()
        return true, result
      end
    end
    return false, 0
  else
    local predicate = ...
    if predicate == nil then throw(ArgumentNullException("predicate")) end
    local result, found
    for _, v in each(source) do
      if predicate(v) then
        result = v
        found = true
      end
    end    
    if found then return true, result end
    return false, 1
  end
end

function Enumerable.Last(source, ...)
  local ok, result = last(source, ...)
  if ok then return result end
  if result == 0 then
    throw(InvalidOperationException("NoElements"))
  end
  throw(InvalidOperationException("NoMatch"))
end

function Enumerable.LastOrDefault(source, ...)
  local ok, result = last(source, ...)
  return ok and result or source.__genericT__:default()
end

local function single(source, ...)
  if source == nil then throw(ArgumentNullException("source")) end
  local len = select("#", ...)
  if len == 0 then
    if isArrayLike(source) then
      local count = #source
      if count == 0 then
        return false, 0
      elseif count == 1 then
        return true, unWrap(source[1])
      end
    else
      local en = source:GetEnumerator()
      if not en:MoveNext() then return false, 0 end
      local result = en:getCurrent()
      if not en:MoveNext() then
        return true, result
      end
    end
    return false, 1
  else
    local predicate = ...
    if predicate == nil then throw(ArgumentNullException("predicate")) end
    local result, found
    for _, v in each(source) do
      if predicate(v) then
        result = v
        if found then
          return false, 1
        end
        found = true
      end
    end
    if foun then return true, result end    
    return false, 0    
  end
end

function Enumerable.Single(source, ...)
  local ok, result = single(source, ...)
  if ok then return result end
  if result == 0 then
    throw(InvalidOperationException("NoElements"))
  end
  throw(InvalidOperationException("MoreThanOneMatch"))
end

function Enumerable.SingleOrDefault(source, ...)
  local ok, result = single(source, ...)
  return ok and result or source.__genericT__:default()
end

local function elementAt(source, index)
  if source == nil then throw(ArgumentNullException("source")) end
  if index >= 0 then
    if isArrayLike(source) then
      local count = #source
      if index < count then
        return true, unWrap(source[index + 1])
      end
    else
      local en = source:GetEnumerator()
      while true do
        if not en:MoveNext() then break end
        if index == 0 then return true, en:getCurrent() end
        index = index - 1
      end
    end
  end
  return false
end

function Enumerable.ElementAt(source, index)
  local ok, result = elementAt(source, index)
  if ok then return result end
  throw(ArgumentOutOfRangeException("index"))
end

function Enumerable.ElementAtOrDefault(source, index)
  local ok, result = elementAt(source, index)
  return ok and result or source.__genericT__:default()
end

function Enumerable.Range(start, count)
  if count < 0 then throw(ArgumentOutOfRangeException("count")) end
  return createEnumerable(Int32, function()
    local index = -1
    return createEnumerator(Int32, nil, function()
      index = index + 1
      if index < count then
        return true, start + index  
      end
      return false
    end)
  end)
end

function Enumerable.Repeat(element, count, T)
  if count < 0 then throw(ArgumentOutOfRangeException("count")) end
  return createEnumerable(T, function()
    local index = -1
    return createEnumerator(T, nil, function()
      index = index + 1
      if index < count then
        return true, element  
      end
      return false
    end)
  end)
end

function Enumerable.Any(source, ...)
  if source == nil then throw(ArgumentNullException("source")) end
  local len = select("#", ...)
  if len == 0 then
    local en = source:GetEnumerator()
    return en:MoveNext()
  else
    local predicate = ...
    if predicate == nil then throw(ArgumentNullException("predicate")) end
    for _, v in each(source) do
      if predicate(v) then
        return true
      end
    end
    return false
  end
end

function Enumerable.All(source, predicate)
  if source == nil then throw(ArgumentNullException("source")) end
  if predicate == nil then throw(ArgumentNullException("predicate")) end
  for _, v in each(source) do
    if not predicate(v) then
      return false
    end
  end
  return true
end

function Enumerable.Count(source, ...)
  if source == nil then throw(ArgumentNullException("source")) end
  local len = select("#", ...)
  if len == 0 then
    if isArrayLike(source) then
      return #source
    end
    local count = 0
    local en = source:GetEnumerator()
    while en:MoveNext() do 
      count = count + 1 
    end
    return count
  else
    local predicate = ...
    if predicate == nil then throw(ArgumentNullException("predicate")) end
    local count = 0
    for _, v in each(source) do
      if predicate(v) then
        count = count + 1
      end
    end
    return count
  end
end

function Enumerable.Contains(source, value, comparer)
  if source == nil then throw(ArgumentNullException("source")) end
  comparer = getComparer(source, comparer)
  local equals = comparer.EqualsOf
  for _, v in each(source) do
    if equals(comparer, v, value) then
      return true
    end
  end
  return false
end

function Enumerable.Aggregate(source, ...)
  if source == nil then throw(ArgumentNullException("source")) end
  local len = select("#", ...);
  if len == 1 then
    local func = ...
    if func == nil then throw(ArgumentNullException("func")) end
    local e = source:GetEnumerator()
    if not e:MoveNext() then throw(InvalidOperationException("NoElements")) end
    local result = e:getCurrent()
    while e:MoveNext() do
      result = func(result, e:getCurrent())
    end
    return result
  elseif len == 2 then
    local seed, func = ...
    if func == nil then throw(ArgumentNullException("func")) end
    local result = seed
    for _, element in each(source) do
      result = func(result, element)
    end
    return result
  else 
    local seed, func, resultSelector = ...
    if func == nil then throw(ArgumentNullException("func")) end
    if resultSelector == nil then throw(ArgumentNullException("resultSelector")) end
    local result = seed
    for _, element in each(source) do
      result = func(result, element)
    end
    return resultSelector(result)
  end
end

function Enumerable.Sum(source, ...)
  if source == nil then throw(ArgumentNullException("source")) end
  local len = select("#", ...)
  if len == 0 then
    local sum = 0
    for _, v in each(source) do
      sum = sum + v
    end
    return sum
  else
    local selector = ...
    if selector == nil then throw(ArgumentNullException("selector")) end
    local sum = 0
    for _, v in each(source) do
      sum = sum + selector(v)
    end
    return sum
  end
end

local function minOrMax(compareFn, source, ...)
  if source == nil then throw(ArgumentNullException("source")) end
  local len = select("#", ...)
  local selector, T 
  if len == 0 then
    selector, T = identityFn, source.__genericT__
  else
    selector, T = ...
    if selector == nil then throw(ArgumentNullException("selector")) end
  end
  local comparer = Comparer_1(T).getDefault()
  local compare = comparer.Compare
  local value = T:default()
  if value == nil then
    for _, x in each(source) do
      x = selector(x)
      if x ~= nil and (value == nil or compareFn(compare, comparer, x, value)) then
        value = x
      end 
    end
    return value
  else
    local hasValue = false
    for _, x in each(source) do
      x = selector(x)
      if hasValue then
        if compareFn(compare, comparer, x, value) then
          value = x
        end
      else
        value = x
        hasValue = true
      end
    end
    if hasValue then return value end
    throw(InvalidOperationException("NoElements"))
  end
end

local function minFn(compare, comparer, x, y)
  return compare(comparer, x, y) < 0
end

function Enumerable.Min(source, ...)
  return minOrMax(minFn, source, ...)
end

local function maxFn(compare, comparer, x, y)
  return compare(comparer, x, y) > 0
end

function Enumerable.Max(source, ...)
  return minOrMax(maxFn, source, ...)
end

function Enumerable.Average(source, ...)
  if source == nil then throw(ArgumentNullException("source")) end
  local sum, count = 0, 0
  local len = select("#", ...)
  if len == 0 then
    for _, v in each(source) do
      sum = sum + v
      count = count + 1
    end
  else
    local selector = ...
    if selector == nil then throw(ArgumentNullException("selector")) end
    for _, v in each(source) do
      sum = sum + selector(v)
      count = count + 1
    end
  end
  if count > 0 then
    return sum / count
  end
  throw(InvalidOperationException("NoElements"))
end
end

-- CoreSystemLib: Collections\SortedSet.lua
do
local System = System
local Array = System.Array

local SortedSet = {
  __ctor__ = Array.ctorOrderSet,
  getMin = Array.firstOrDefault,
  getMax = Array.lastOrDefault,
  getCount = System.lengthFn,
  getComparer = Array.getOrderComparer,
  CreateSetComparer = Array.createSetComparer,
  Add = Array.addOrder,
  Clear = Array.clear,
  Contains = Array.containsOrder,
  CopyTo = Array.CopyTo,
  ExceptWith = Array.exceptWithOrder,
  GetEnumerator = Array.GetEnumerator,
  GetViewBetween = Array.getViewBetweenOrder,
  IntersectWith = Array.intersectWithOrder,
  IsProperSubsetOf = Array.isProperSubsetOfOrder,
  IsProperSupersetOf = Array.isProperSupersetOfOrder,
  IsSubsetOf = Array.isSubsetOfOrder,
  IsSupersetOf = Array.isSupersetOfOrder,
  Overlaps = Array.isOverlapsOrder,
  Remove = Array.removeOrder,
  RemoveWhere = Array.removeAll,
  Reverse = Array.reverseEnumerable,
  SetEquals = Array.equalsOrder,
  SymmetricExceptWith = Array.symmetricExceptWithOrder,
  TryGetValue = Array.tryGetValueOrder,
  UnionWith = Array.addOrderRange,
}

local SortedSetFn = System.define("System.Collections.Generic.SortedSet", function(T) 
  return { 
    base = { System.ICollection_1(T), System.IReadOnlyCollection_1(T), System.ISet_1(T) }, 
    __genericT__ = T,
  }
end, SortedSet, 1)

System.SortedSet = SortedSetFn
end

-- CoreSystemLib: Convert.lua
do
local System = System
local throw = System.throw
local cast = System.cast
local as = System.as
local trunc = System.trunc
local define = System.define
local band = System.band
local bor = System.bor
local sl = System.sl
local sr = System.sr
local div = System.div
local identityFn = System.identityFn
local IConvertible = System.IConvertible
local systemToString = System.toString
local checkIndex = System.checkIndexAndCount

local OverflowException = System.OverflowException
local FormatException = System.FormatException
local ArgumentException = System.ArgumentException
local ArgumentOutOfRangeException = System.ArgumentOutOfRangeException
local ArgumentNullException = System.ArgumentNullException
local InvalidCastException = System.InvalidCastException

local SByte = System.SByte
local Byte = System.Byte
local Int16 = System.Int16
local UInt16 = System.UInt16
local Int32 = System.Int32
local UInt32 = System.UInt32
local Int64 = System.Int64
local UInt64 = System.UInt64
local Single = System.Single
local Double = System.Double
local Boolean = System.Boolean
local Char = System.Char
local DateTime = System.DateTime
local String = System.String
local Object = System.Object

local ParseSByte = SByte.Parse
local ParseByte = Byte.Parse
local ParseInt16 = Int16.Parse
local ParseUInt16 = UInt16.Parse
local ParseInt32 = Int32.Parse
local ParseUInt32 = UInt32.Parse
local ParseInt64 = Int64.Parse
local ParseUInt64 = UInt64.Parse

local ParseSingle = Single.Parse
local ParseDouble = Double.Parse
local ParseBoolean = Boolean.Parse

local type = type
local string = string
local sbyte = string.byte
local math = math
local floor = math.floor
local tconcat = table.concat
local setmetatable = setmetatable
local getmetatable = getmetatable
local tonumber = tonumber
local select = select

local function toBoolean(value)
  if value == nil then return false end
  local typename = type(value)
  if typename == "number" then
    return value ~= 0
  elseif typename == "string" then
    return ParseBoolean(value)  
  elseif typename == "boolean" then
    return value
  else
    return cast(IConvertible, value):ToBoolean()   
  end
end

local function toChar(value)
  if value == nil then return 0 end
  local typename = type(value)
  if typename == "number" then
    if value ~= floor(value) or value > 9223372036854775807 or value < (-9223372036854775807 - 1) then
      throw(InvalidCastException("InvalidCast_FromTo_Char"))
    end
    if value < 0 or value > 65535 then 
      throw(OverflowException("Overflow_Char")) 
    end
    return value
  elseif typename == "string" then
    if #value ~= 1 then
      throw(FormatException("Format_NeedSingleChar"))
    end
    return sbyte(value)
  else
    return cast(IConvertible, value):ToChar()
  end
end

local function parseBits(s, p, n)
  local i, j, v = s:find(p)
  if not i then
    throw(FormatException())
  end
  v = tonumber(v)
  for i = j + 1, #s do
    local ch = sbyte(s, i)
    local b = ch - 48
    if b < 0 or b >= n then
      if not s:find("^%s*$", i) then
        throw(FormatException())
      end
      break
    end
    v = v * n + b
  end
  return v
end

local function parseNumberFromBase(value, fromBase, min, max)
  if fromBase == 2 then
    value = parseBits(value, "^%s*([01])", fromBase)
  elseif fromBase == 8 then
    value = parseBits(value, "^%s*([0-7])", fromBase)
  elseif fromBase == 16 then
    local _, _, v = value:find("^%s*(%w+)%s*$")
    if not v then
      throw(ArgumentException("String cannot contain a minus sign if the base is not 10."))
    end
    local ch = sbyte(v, 2)
    if ch == 120 or ch == 88 then
    else
      v = "0x" .. v
    end
    value = tonumber(v)
    if value == nil then
      throw(FormatException())
    end
  else
    throw(ArgumentException("fromBase")) 
  end
  if max == 127 and value <= 255 then
    return System.toSByte(value)
  end
  if max == 32767 and value <= 65535 then
    return System.toInt16(value)
  end
  if max == 2147483647 and value <= 4294967295 then
    return System.toInt32(value)
  end
  if value < min or value > max then
    throw(OverflowException())
  end
  return value
end

local function toNumber(value, min, max, parse, objectTo, sign)
  if value == nil then return 0 end
  local typename = type(value)
  if typename == "number" then
    if sign == false then
      value = System.ToSingle(value * 1.0)
    elseif sign == true then
      value = value * 1.0
    else
      local i = value
      value = trunc(value)
      if value ~= i then
        local dif = i - value
        if value >= 0 then
          if dif > 0.5 or (dif == 0.5 and value % 2 ~= 0) then
            value = value + 1  
          end
        else
          if dif < -0.5 or (dif == -0.5 and value % 2 ~= 0) then
            value = value - 1  
          end
        end
      end
      if value < min or value > max then
        throw(OverflowException())
      end
    end
    return value
  elseif typename == "string" then
    if sign and sign ~= 10 and type(sign) == "number" then
      return parseNumberFromBase(value, sign, min, max)
    end
    return parse(value) 
  elseif typename == "boolean" then
    return value and 1 or 0
  else
    return objectTo(value)
  end
end

local function objectToSByte(value)
  return cast(IConvertible, value):ToSByte()
end

local function toSByte(value, fromBase)
  return toNumber(value, -128, 127, ParseSByte, objectToSByte, fromBase)
end

local function objectToByte(value)
  return cast(IConvertible, value):ToByte()
end

local function toByte(value, fromBase)
  return toNumber(value, 0, 255, ParseByte, objectToByte, fromBase) 
end

local function objectToInt16(value)
  return cast(IConvertible, value):ToInt16()
end

local function toInt16(value, fromBase)
  return toNumber(value, -32768, 32767, ParseInt16, objectToInt16, fromBase) 
end

local function objectToUInt16(value)
  return cast(IConvertible, value):ToUInt16()
end

local function toUInt16(value, fromBase)
  return toNumber(value, 0, 65535, ParseUInt16, objectToUInt16, fromBase) 
end

local function objectToInt32(value)
  return cast(IConvertible, value):ToInt32()
end

local function toInt32(value, fromBase)
  return toNumber(value, -2147483648, 2147483647, ParseInt32, objectToInt32, fromBase) 
end

local function objectToUInt32(value)
  return cast(IConvertible, value):ToUInt32()
end

local function toUInt32(value, fromBase)
  return toNumber(value, 0, 4294967295, ParseUInt32, objectToUInt32, fromBase) 
end

local function objectToInt64(value)
  return cast(IConvertible, value):ToInt64()
end

local function toInt64(value, fromBase)
  return toNumber(value, (-9223372036854775807 - 1), 9223372036854775807, ParseInt64, objectToInt64, fromBase) 
end

local function objectToUInt64(value)
  return cast(IConvertible, value):ToUInt64()
end

local function toUInt64(value, fromBase)
  return toNumber(value, 0, 18446744073709551615.0, ParseUInt64, objectToUInt64, fromBase) 
end

local function objectToSingle(value)
  return cast(IConvertible, value):ToSingle()
end

local function toSingle(value)
  return toNumber(value, nil, nil, ParseSingle, objectToSingle, false) 
end

local function objectToDouble(value)
  return cast(IConvertible, value):ToDouble()
end

local function toDouble(value)
  return toNumber(value, nil, nil, ParseDouble, objectToDouble, true) 
end

local function toDateTime(value)
  if value == nil then return DateTime.MinValue end
  if getmetatable(value) == DateTime then return value end
  if type(value) == "string" then return DateTime.Parse(value) end
  return cast(IConvertible, value):ToDateTime()
end

local function toBaseType(ic, targetType)
  local cls = targetType[1]
  if cls == Boolean then return ic:ToBoolean() end
  if cls == Char then return ic:ToChar() end
  if cls == SByte then return ic:ToSByte() end
  if cls == Byte then return ic:ToByte() end
  if cls == Int16 then return ic:ToInt16() end
  if cls == UInt16 then return ic:ToUInt16() end
  if cls == Int32 then return ic:ToInt32() end
  if cls == UInt32 then return ic:ToUInt32() end
  if cls == Int64 then return ic:ToInt64() end
  if cls == UInt64 then return ic:ToUInt64() end
  if cls == Single then return ic:ToSingle() end
  if cls == Double then return ic:ToDouble() end
  if cls == DateTime then return ic:ToDateTime() end
  if cls == String then return ic:ToString() end
  if cls == Object then return value end
end

local function defaultToType(value, targetType)
  if targetType == nil then throw(ArgumentNullException("targetType")) end
  if value:GetType() == targetType then return value end
  local v = toBaseType(value, targetType)
  if v ~= nil then
    return v
  end
  throw(InvalidCastException())
end

local function changeType(value, conversionType)
  if conversionType == nil then
    throw(ArgumentNullException("conversionType"))
  end
  if value == nil then
    if conversionType:getIsValueType() then
      throw(InvalidCastException("InvalidCast_CannotCastNullToValueType"))
    end
    return nil
  end
  local ic = as(value, IConvertible)
  if ic == nil then
    if value:GetType() == conversionType then
      return value
    end
    throw(InvalidCastException("InvalidCast_IConvertible"))
  end
  local v = toBaseType(ic, conversionType)
  if v ~= nil then
    return v
  end
  return ic.ToType(conversionType)
end

local rexp
if math.frexp then
  rexp = function (x)
    local _, v = math.frexp(x)
    return v
  end
else
  local abs, log = math.abs, math.log
  local log2 = log(2)
  rexp = function (x)
    return floor(log(abs(x)) / log2) + 1
  end
end

local function toBits(num, bits)
  -- returns a table of bits, most significant first.
  bits = bits or math.max(1, rexp(num))
  local t = {} -- will contain the bits        
  for b = bits, 1, -1 do
    local i =  num % 2
    t[b] = i
    num = div(num - i, 2)
  end
  if bits == 64 and t[1] == 0 then
    return tconcat(t, nil, 2, bits)
  end
  return tconcat(t)
end

local function toString(value, toBaseOrProvider, cast)
  if value == nil then
    return ""
  end
  if toBaseOrProvider then
    if type(toBaseOrProvider) == "number" then
      if toBaseOrProvider ~= 10 then
        if cast and value < 0 then
          value = cast(value)
        end
      end
      if toBaseOrProvider == 2 then
        return toBits(value)
      elseif toBaseOrProvider == 8 then
        return ("%o"):format(value)
      elseif toBaseOrProvider == 10 then
        return value .. ""
      elseif toBaseOrProvider == 16 then
        return ("%x"):format(value)
      else
        throw(ArgumentException())
      end
    end
  end
  return systemToString(value)
end

local base64Table = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O',
                      'P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d',
                      'e','f','g','h','i','j','k','l','m','n','o','p','q','r','s',
                      't','u','v','w','x','y','z','0','1','2','3','4','5','6','7',
                      '8','9','+','/','=' };

local function toBase64String(t, ...)
  if t == nil then throw(ArgumentNullException("inArray")) end
  local n = select("#", ...)
  local offset, length, options
  if n == 0 then
    offset, length, options = 0, #t, 0
  elseif n == 1 then
    offset, length, options = 0, #t, ...
  elseif n == 2 then
    options, offset, length = 0, ...
    checkIndex(t, offset, length)
  else
    offset, length, options = ...
    checkIndex(t, offset, length)
  end
  local insertLineBreaks, lengthmod3, outChars  = options == 1, length % 3, {}
  local calcLength, j, charcount = offset + (length - lengthmod3), 1, 0
  local i = offset
  while i < calcLength do
    if insertLineBreaks then
      if charcount == 76 then
        outChars[j] = "\r\n"
        j = j + 1
        charcount = 0
      end
      charcount = charcount + 4
    end
    local a, b, c = t:get(i), t:get(i + 1), t:get(i + 2)
    outChars[j] =  base64Table[sr(band(a, 0xfc), 2) + 1]
    outChars[j + 1] = base64Table[bor(sl(band(a, 0x03), 4), sr(band(b, 0xf0), 4)) + 1]
    outChars[j + 2] = base64Table[bor(sl(band(b, 0x0f), 2), sr(band(c, 0xc0), 6)) + 1]
    outChars[j + 3] = base64Table[band(c, 0x3f) + 1]
    j = j + 4
    i = i + 3
  end

  i = calcLength
  if insertLineBreaks and lengthmod3 ~= 0 and charcount == 76 then
    outChars[j] = "\r\n"
    j = j + 1
  end
  
  if lengthmod3 == 2 then
    local a, b = t:get(i), t:get(i + 1)
    outChars[j] =  base64Table[sr(band(a, 0xfc), 2) + 1]
    outChars[j + 1] = base64Table[bor(sl(band(a, 0x03), 4), sr(band(b, 0xf0), 4)) + 1]
    outChars[j + 2] = base64Table[sl(band(b, 0x0f), 2) + 1]
    outChars[j + 3] = '='
  elseif lengthmod3 == 1 then
    local a = t:get(i)
    outChars[j] =  base64Table[sr(band(a, 0xfc), 2) + 1]
    outChars[j + 1] = base64Table[sl(band(a, 0x03), 4) + 1]
    outChars[j + 2] = '='
    outChars[j + 3] = '='
  end
  return tconcat(outChars)
end

local function fromBase64ComputeResultLength(s, len)
  local usefulInputLength, padding = len, 0
  for i = 1, len do
    local c = sbyte(s, i)
    if c <= 32 then
      usefulInputLength = usefulInputLength - 1
    elseif c == 61 then
      usefulInputLength = usefulInputLength - 1
      padding = padding + 1
    end
  end
  if padding ~= 0 then
    if padding == 1 then
      padding = 2
    elseif padding == 2 then
      padding = 1
    else
      throw(FormatException("Format_BadBase64Char"))
    end
  end
  return div(usefulInputLength, 4) * 3 + padding
end

local function FromBase64Decode(s, len, t, resultLength)
  local i, j, codes, c, gotoEqualityCharEncountered = 1, 0, 0x000000ff
  while true do
    if i > len then
      break
    end
    c = sbyte(s, i)
    i = i + 1
    if c >= 65 then
      if c <= 90 then
        c = c - 65
      elseif c <= 122 then
        c = c - 71 
      end
    else
      if c == 43 then
        c = 62
      elseif c == 47 then
        c = 63
      elseif c == 13 or c == 10 or c == 32 or c == 9 then
      elseif c == 61 then
        gotoEqualityCharEncountered = true
        break
      else
        throw(FormatException("Format_BadBase64Char"))
      end
    end
    codes = bor(sl(codes, 6), c)
    if (band(codes, 0x80000000)) ~= 0 then
      if resultLength - j < 3 then
        return - 1
      end
      t[j + 1] = band(sr(codes, 16), 0xff)
      t[j + 2] = band(sr(codes, 8), 0xff)
      t[j + 3] = band(codes, 0xff)
      j = j + 3
      codes = 0x000000ff
    end
  end

  if gotoEqualityCharEncountered then
    if i > len then
      codes = sl(codes, 6)
      if (band(codes, 0x80000000)) == 0 then
        throw(FormatException("Format_BadBase64CharArrayLength"))
      end

      if j < 2 then
        return - 1
      end

      t[j + 1] = band(sr(codes, 16), 0xff)
      t[j + 2] = band(sr(codes, 8), 0xff)
      j = j + 2
      codes = 0x000000ff
    else
      while i < len do
        c = sbyte(s, i)
        if c ~= 32 and c ~= 10 and c ~= 13 and c ~= 9 then
          break
        end
        i = i + 1
      end

      if i == len and sbyte(s, i) == 61 then
        codes = sl(codes, 12)
        if (band(codes, 0x80000000)) == 0 then
          throw(FormatException(("Format_BadBase64CharArrayLength")))
        end

        if resultLength - j < 1 then
          return - 1
        end

        t[j + 1] = band(sr(codes, 16), 0xff)
        j = j + 1
        codes = 0x000000ff
      else
        System.throw(System.FormatException(("Format_BadBase64Char")))
      end
    end
  end

  if codes ~= 0x000000ff then
    throw(FormatException(("Format_BadBase64CharArrayLength")))
  end
  return j
end

local function fromBase64String(s)
  if s == nil then throw(ArgumentNullException("s")) end
  local len = #s
  while len > 0 do
    local lastChar = sbyte(s, len)
    if lastChar ~= 32 and lastChar ~= 10 and lastChar ~= 13 and lastChar ~= 9 then
      break
    end
    len = len - 1
  end
  local resultLength = fromBase64ComputeResultLength(s, len)
  local t = {}
  FromBase64Decode(s, len, t, resultLength)
  return System.arrayFromTable(t, Byte)
end

define("System.Convert", {
  ToBoolean = toBoolean,
  ToChar = toChar,
  ToSByte = toSByte,
  ToByte = toByte,
  ToInt16 = toInt16,
  ToUInt16 = toUInt16,
  ToInt32 = toInt32,
  ToUInt32 = toUInt32,
  ToInt64 = toInt64,
  ToUInt64 = toUInt64,
  ToSingle = toSingle,
  ToDouble = toDouble,
  ToDateTime = toDateTime,
  ToBase64String = toBase64String,
  FromBase64String = fromBase64String,
  ChangeType = changeType,
  ToString = toString,
  ToStringFromChar = string.char
})

String.ToBoolean = toBoolean
String.ToChar = toChar
String.ToSByte = toSByte
String.ToByte = toByte
String.ToInt16 = toInt16
String.ToUInt16 = toUInt16
String.ToInt32 = toInt32
String.ToUInt32 = toUInt32
String.ToInt64 = toInt64
String.ToUInt64 = toUInt64
String.ToSingle = identityFn
String.ToDouble = toDouble
String.ToDateTime = toDateTime
String.ToType = defaultToType

local function throwInvalidCastException()
  throw(InvalidCastException())
end

local Number = System.Number
Number.ToBoolean = toBoolean
Number.ToChar = toChar
Number.ToSByte = toSByte
Number.ToByte = toByte
Number.ToInt16 = toInt16
Number.ToUInt16 = toUInt16
Number.ToInt32 = toInt32
Number.ToUInt32 = toUInt32
Number.ToInt64 = toInt64
Number.ToUInt64 = toUInt64
Number.ToSingle = toSingle
Number.ToDouble = toDouble
Number.ToDateTime = throwInvalidCastException
Number.ToType = defaultToType

Boolean.ToBoolean = identityFn
Boolean.ToChar = throwInvalidCastException
Boolean.ToSByte = toSByte
Boolean.ToByte = toByte
Boolean.ToInt16 = toInt16
Boolean.ToUInt16 = toUInt16
Boolean.ToInt32 = toInt32
Boolean.ToUInt32 = toUInt32
Boolean.ToInt64 = toInt64
Boolean.ToUInt64 = toUInt64
Boolean.ToSingle = toSingle
Boolean.ToDouble = toDouble
Boolean.ToDateTime = throwInvalidCastException
Boolean.ToType = defaultToType

DateTime.ToBoolean = throwInvalidCastException
DateTime.ToChar = throwInvalidCastException
DateTime.ToSByte = throwInvalidCastException
DateTime.ToByte = throwInvalidCastException
DateTime.ToInt16 = throwInvalidCastException
DateTime.ToUInt16 = throwInvalidCastException
DateTime.ToInt32 = throwInvalidCastException
DateTime.ToUInt32 = throwInvalidCastException
DateTime.ToInt64 = throwInvalidCastException
DateTime.ToUInt64 = throwInvalidCastException
DateTime.ToSingle = throwInvalidCastException
DateTime.ToDouble = throwInvalidCastException
DateTime.ToDateTime = identityFn
DateTime.ToType = defaultToType

-- BitConverter
local global = System.global
local systemToInt16 = System.toInt16
local systemToInt32 = System.toInt32
local systemToUInt64 = System.toUInt64
local arrayFromTable = System.arrayFromTable
local NotSupportedException = System.NotSupportedException

local assert = assert
local rawget = rawget
local unpack = table.unpack
local schar = string.char

-- https://github.com/ToxicFrog/vstruct/blob/master/io/endianness.lua#L30
local isLittleEndian = true
if rawget(global, "jit") then
  if require("ffi").abi("be") then
    isLittleEndian = false
  end
else 
  local dump = string.dump
  if dump and sbyte(dump(System.emptyFn), 7) == 0x00 then
    isLittleEndian = false
  end
end

local function bytes(t)
  return arrayFromTable(t, Byte)    
end

local function checkIndex(value, startIndex, count)
  if value == nil then throw(ArgumentNullException("value")) end
  local len = #value
  if startIndex < 0 or startIndex >= len then
    throw(ArgumentOutOfRangeException("startIndex"))
  end
  if startIndex > len - count then
    throw(ArgumentException())
  end
end

local spack, sunpack, getBytesFromInt64, toInt64
if System.luaVersion < 5.3 then
  local struct = rawget(global, "struct")
  if struct then
    spack, sunpack = struct.pack, struct.unpack
  end
  if not spack then
    spack = function ()
      throw(NotSupportedException("not found struct"), 1) 
    end
    sunpack = spack
  end

  getBytesFromInt64 = function (value)
    if value <= -2147483647 or value >= 2147483647 then
      local s = spack("i8", value)
      return bytes({
        sbyte(s, 1),
        sbyte(s, 2),
        sbyte(s, 3),
        sbyte(s, 4),
        sbyte(s, 5),
        sbyte(s, 6),
        sbyte(s, 7),
        sbyte(s, 8)
      })
    end
    return bytes({
      band(value, 0xff),
      band(sr(value, 8), 0xff),
      band(sr(value, 16), 0xff),
      band(sr(value, 24), 0xff),
      0,
      0,
      0,
      0
    })
  end

  toInt64 = function (value, startIndex)
    checkIndex(value, startIndex, 8)
    if value <= -2147483647 or value >= 2147483647 then
      throw(System.NotSupportedException()) 
    end
    if isLittleEndian then
      local i = value[startIndex + 1]
      i = bor(i, sl(value[startIndex + 2], 8))
      i = bor(i, sl(value[startIndex + 3], 16))
      i = bor(i, sl(value[startIndex + 4], 24))
      return i
    else
      local i = value[startIndex + 8]
      i = bor(i, sl(value[startIndex + 7], 8))
      i = bor(i, sl(value[startIndex + 6], 16))
      i = bor(i, sl(value[startIndex + 5], 24))
      return i
    end
  end
else
  spack, sunpack = string.pack, string.unpack
  getBytesFromInt64 = function (value)
    return bytes({
      band(value, 0xff),
      band(sr(value, 8), 0xff),
      band(sr(value, 16), 0xff),
      band(sr(value, 24), 0xff),
      band(sr(value, 32), 0xff),
      band(sr(value, 40), 0xff),
      band(sr(value, 48), 0xff),
      band(sr(value, 56), 0xff)
    })
  end

  toInt64 = function (value, startIndex)
    checkIndex(value, startIndex, 8)
    if isLittleEndian then
      local i = value[startIndex + 1]
      i = bor(i, sl(value[startIndex + 2], 8))
      i = bor(i, sl(value[startIndex + 3], 16))
      i = bor(i, sl(value[startIndex + 4], 24))
      i = bor(i, sl(value[startIndex + 5], 32))
      i = bor(i, sl(value[startIndex + 6], 40))
      i = bor(i, sl(value[startIndex + 7], 48))
      i = bor(i, sl(value[startIndex + 8], 56))
      return i
    else
      local i = value[startIndex + 8]
      i = bor(i, sl(value[startIndex + 7], 8))
      i = bor(i, sl(value[startIndex + 6], 16))
      i = bor(i, sl(value[startIndex + 5], 24))
      i = bor(i, sl(value[startIndex + 4], 32))
      i = bor(i, sl(value[startIndex + 3], 40))
      i = bor(i, sl(value[startIndex + 2], 48))
      i = bor(i, sl(value[startIndex + 1], 56))
      return i
    end
  end
end

local function getBytesFromBoolean(value)
  return bytes({ value and 1 or 0 })
end

local function getBytesFromInt16(value)
  return bytes({
    band(value, 0xff),
    band(sr(value, 8), 0xff),
  })
end

local function getBytesFromInt32(value)
  return bytes({
    band(value, 0xff),
    band(sr(value, 8), 0xff),
    band(sr(value, 16), 0xff),
    band(sr(value, 24), 0xff)
  })
end

local function getBytesFromFloat(value)
  local s = spack("f", value)
  return bytes({
    sbyte(s, 1),
    sbyte(s, 2),
    sbyte(s, 3),
    sbyte(s, 4)
  })
end

local function getBytesFromDouble(value)
  local s = spack("d", value)
  return bytes({
    sbyte(s, 1),
    sbyte(s, 2),
    sbyte(s, 3),
    sbyte(s, 4),
    sbyte(s, 5),
    sbyte(s, 6),
    sbyte(s, 7),
    sbyte(s, 8)
  })
end

local function toBoolean(value, startIndex)
  checkIndex(value, startIndex, 1)
  return value[startIndex + 1] ~= 0 and true or false
end

local function toUInt16(value, startIndex)
  checkIndex(value, startIndex, 2)
  if isLittleEndian then
    value = bor(value[startIndex + 1], sl(value[startIndex + 2], 8))
  else
    value = bor(sl(value[startIndex + 1], 8), value[startIndex + 2])
  end
  return value
end

local function toInt16(value, startIndex)
  value = toUInt16(value, startIndex)
  return systemToInt16(value)
end

local function toUInt32(value, startIndex)
  checkIndex(value, startIndex, 4)
  local i
  if isLittleEndian then
    i = value[startIndex + 1]
    i = bor(i, sl(value[startIndex + 2], 8))
    i = bor(i, sl(value[startIndex + 3], 16))
    i = bor(i, sl(value[startIndex + 4], 24))
  else
    local i = value[startIndex + 4]
    i = bor(i, sl(value[startIndex + 3], 8))
    i = bor(i, sl(value[startIndex + 2], 16))
    i = bor(i, sl(value[startIndex + 1], 24))
  end
  return i
end

local function toInt32(value, startIndex)
  value = toUInt32(value, startIndex)
  return systemToInt32(value)
end

local function toUInt64(value, startIndex)
  value = toInt64(value, startIndex)
  return systemToUInt64(value)
end

local function toSingle(value, startIndex)
  checkIndex(value, startIndex, 4)
  return sunpack("f", schar(unpack(value, startIndex + 1)))
end

local function toDouble(value, startIndex)
  checkIndex(value, startIndex, 8)
  return sunpack("d", schar(unpack(value, startIndex + 1)))
end

local function getHexValue(i)
  assert(i >= 0 and i < 16, "i is out of range.")
  if i < 10 then
    return i + 48
  end
  return i - 10 + 65
end

local function toString(value, startIndex, length)
  if value == nil then throw(ArgumentNullException("value")) end
  local len = #value
  if not startIndex then
    startIndex, length = 0, #value
  elseif not length then
    length = len - startIndex
  end
  if startIndex < 0 or (startIndex >= len and startIndex > 0) then
    throw(ArgumentOutOfRangeException("startIndex"))
  end
  if length < 0 then
    throw(ArgumentOutOfRangeException("length"))
  end
  if startIndex + length > len then
    throw(ArgumentException())
  end
  if length == 0 then
    return ""
  end
  local t = {}
  local len = 1
  for i = startIndex + 1, startIndex + length  do
    local b = value[i]
    t[len] = getHexValue(div(b, 16))
    t[len + 1] = getHexValue(b % 16)
    t[len + 2] = 45
    len = len + 3
  end
  return schar(unpack(t, 1, len - 2))
end

local function doubleToInt64Bits(value)
  local s = spack("d", value)
  return (sunpack("i8", s))
end

local function int64BitsToDouble(value)
  local s = spack("i8", value)
  return (sunpack("d", s))
end

define("System.BitConverter", {
  IsLittleEndian = isLittleEndian,
  GetBytesFromBoolean = getBytesFromBoolean,
  GetBytesFromInt16 = getBytesFromInt16,
  GetBytesFromInt32 = getBytesFromInt32,
  GetBytesFromInt64 = getBytesFromInt64,
  GetBytesFromFloat = getBytesFromFloat,
  GetBytesFromDouble = getBytesFromDouble,
  ToBoolean = toBoolean,
  ToChar = toUInt16,
  ToInt16 = toInt16,
  ToUInt16 = toUInt16,
  ToInt32 = toInt32,
  ToUInt32 = toUInt32,
  ToInt64 = toInt64,
  ToUInt64 = toUInt64,
  ToSingle = toSingle,
  ToDouble = toDouble,
  ToString = toString,
  DoubleToInt64Bits = doubleToInt64Bits,
  Int64BitsToDouble = int64BitsToDouble
})
end

-- CoreSystemLib: Math.lua
do
local System = System
local trunc = System.trunc

local math = math
local floor = math.floor
local ceil = math.ceil
local min = math.min
local max = math.max
local abs = math.abs
local log = math.log
local sqrt = math.sqrt
local ln2 = log(2)

local function acosh(a)
  return log(a + sqrt(a ^ 2 - 1))
end

local function asinh(a)
  return log(a + sqrt(a ^ 2 + 1))
end

local function atanh(a)
  return 0.5 * log((1 + a) / (1 - a))
end

local function cbrt(a)
  if a >= 0 then
    return a ^ (1 / 3)
  else
    return -abs(a) ^ (1 / 3) 
  end
end

local function copySign(a, b)
  if b >= 0 then
    return a >= 0 and a or -a
  else
    return a >= 0 and -a or a
  end
end

local function fusedMultiplyAdd(a, b, c)
  return a * b + c
end

local function ilogB(a)
  return a == 0 and -2147483648 or floor(log(abs(a)) / ln2)
end

local function log2(a)
  return log(a) / ln2
end

local function maxMagnitude(a, b)
  local x = abs(a)
  local y = abs(b)
  if x > y then
    return a
  elseif x < y then
    return b
  else
    return a > b and a or b
  end
end

local function minMagnitude(a, b)
  local x = abs(a)
  local y = abs(b)
  if x < y then
    return a
  elseif x > y then
    return b
  else
    return a < b and a or b
  end
end

local function reciprocalEstimate(a)
  return 1 / a
end

local function reciprocalSqrtEstimate(a)
  return sqrt(1 / a)
end

local function scaleB(a, b)
  return a * 2 ^ b
end

local function sinCos(a)
  return System.ValueTuple(math.sin(a), math.cos(a))
end

local function bigMul(a, b)
  return a * b
end

local function divRem(a, b)
  local remainder = a % b
  return (a - remainder) / b, remainder
end

local function round(value, digits, mode)
  local mult = 10 ^ (digits or 0)
  local i = value * mult
  if mode == 1 then
    value = trunc(i + (value >= 0 and 0.5 or -0.5))
  elseif mode == 2 then
    value = i >= 0 and floor(i) or ceil(i)
  elseif mode == 3 then
    value = floor(i)
  elseif mode == 4 then
    value = ceil(i)
  else
    value = trunc(i)
    if value ~= i then
      local dif = i - value
      if i >= 0 then
        if dif > 0.5 or (dif == 0.5 and value % 2 ~= 0) then
          value = value + 1  
        end
      else
        if dif < -0.5 or (dif == -0.5 and value % 2 ~= 0) then
          value = value - 1  
        end
      end
    end
  end
  return value / mult
end

local function sign(v)
  return v == 0 and 0 or (v > 0 and 1 or -1) 
end

local function IEEERemainder(x, y)
  if x ~= x then
    return x
  end
  if y ~= y then
    return y
  end
  local regularMod = System.mod(x, y)
  if regularMod ~= regularMod then
    return regularMod
  end
  if regularMod == 0 and x < 0 then
    return -0.0
  end
  local alternativeResult = regularMod - abs(y) * sign(x)
  local i, j = abs(alternativeResult), abs(regularMod)
  if i == j then
    local divisionResult = x / y
    local roundedResult = round(divisionResult)
    if abs(roundedResult) > abs(divisionResult) then
      return alternativeResult
    else
      return regularMod
    end
  end
  if i < j then
    return alternativeResult
  else
    return regularMod
  end
end

local function clamp(a, b, c)
  return min(max(a, b), c)
end

local function truncate(d)
  return trunc(d) * 1.0
end

local log10 = math.log10
if not log10 then
  log10 = function (x) return log(x, 10) end
  math.log10 = log10
end

local exp = math.exp
local cosh = math.cosh or function (x) return (exp(x) + exp(-x)) / 2.0 end
local pow = math.pow or function (x, y) return x ^ y end
local sinh = math.sinh or function (x) return (exp(x) - exp(-x)) / 2.0 end
local tanh = math.tanh or function (x) return sinh(x) / cosh(x) end

local Math = math
Math.Abs = abs
Math.Acos = math.acos
Math.Acosh = acosh
Math.Asin = math.asin
Math.Asinh = asinh
Math.Atan = math.atan
Math.Atanh = atanh
Math.Atan2 = math.atan2 or math.atan
Math.BigMul = bigMul
Math.Cbrt = cbrt
Math.Ceiling = ceil
Math.Clamp = clamp
Math.CopySign = copySign
Math.Cos = math.cos
Math.Cosh = cosh
Math.DivRem = divRem
Math.Exp = exp
Math.Floor = floor
Math.FusedMultiplyAdd = fusedMultiplyAdd
Math.IEEERemainder = IEEERemainder
Math.ILogB = ilogB
Math.Log = log
Math.Log10 = log10
Math.Log2 = log2
Math.Max = max
Math.MaxMagnitude = maxMagnitude
Math.Min = min
Math.MinMagnitude = minMagnitude
Math.Pow = pow
Math.ReciprocalEstimate = reciprocalEstimate
Math.ReciprocalSqrtEstimate = reciprocalSqrtEstimate
Math.Round = round
Math.ScaleB = scaleB
Math.Sign = sign
Math.Sin = math.sin
Math.SinCos = sinCos
Math.Sinh = sinh
Math.Sqrt = sqrt
Math.Tan = math.tan
Math.Tanh = tanh
Math.Truncate = truncate

System.define("System.Math", Math)
System.define("System.MathF", Math)
end

-- CoreSystemLib: Random.lua
do
-- Compiled from https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/Random.cs
-- Generated by CSharp.lua Compiler
-- Licensed to the .NET Foundation under one or more agreements.
-- The .NET Foundation licenses this file to you under the MIT license.
-- See the LICENSE file in the project root for more information.
local System = System
local ArrayInt32 = System.Array(System.Int32)
System.define("System.Random", (function ()
  local Sample, InternalSample, GenerateSeed, Next, GetSampleForLargeRange, NextDouble, 
  NextBytes, internal, __ctor__, rnd
  internal = function (this)
    this._seedArray = ArrayInt32:new(56)
  end
  __ctor__ = function (this, Seed)
    if not Seed then Seed = GenerateSeed() end
    internal(this)
    local ii = 0
    local mj, mk

    --Initialize our Seed array.
    local subtraction = (Seed == -2147483648 --[[Int32.MinValue]]) and 2147483647 --[[Int32.MaxValue]] or math.Abs(Seed)
    mj = 161803398 --[[Random.MSEED]] - subtraction
    this._seedArray:set(55, mj)
    mk = 1
    for i = 1, 54 do
      --Apparently the range [1..55] is special (Knuth) and so we're wasting the 0'th position.
      ii = ii + 21
      if ii >= 55 then
        ii = ii - 55
      end
      this._seedArray:set(ii, mk)
      mk = mj - mk
      if mk < 0 then
        mk = mk + 2147483647 --[[Random.MBIG]]
      end
      mj = this._seedArray:get(ii)
    end
    for k = 1, 4 do
      for i = 1, 55 do
        local n = i + 30
        if n >= 55 then
          n = n - 55
        end
        local v =  this._seedArray:get(i) - this._seedArray:get(1 + n)
        this._seedArray:set(i, System.toInt32(v))
        if this._seedArray:get(i) < 0 then
          this._seedArray:set(i, this._seedArray:get(i) + 2147483647 --[[Random.MBIG]])
        end
      end
    end
    this._inext = 0
    this._inextp = 21
    Seed = 1
  end
  Sample = function (this)
    --Including this division at the end gives us significantly improved
    --random number distribution.
    return (InternalSample(this) * (4.6566128752457969E-10 --[[1.0 / MBIG]]))
  end
  InternalSample = function (this)
    local retVal
    local locINext = this._inext
    local locINextp = this._inextp

    locINext = locINext + 1
    if locINext >= 56 then
      locINext = 1
    end
    locINextp = locINextp + 1
    if locINextp >= 56 then
      locINextp = 1
    end

    retVal = this._seedArray:get(locINext) - this._seedArray:get(locINextp)

    if retVal == 2147483647 --[[Random.MBIG]] then
      retVal = retVal - 1
    end
    if retVal < 0 then
      retVal = retVal + 2147483647 --[[Random.MBIG]]
    end

    this._seedArray:set(locINext, retVal)

    this._inext = locINext
    this._inextp = locINextp

    return retVal
  end
  GenerateSeed = function ()
    if not rnd then
      math.randomseed(os.time())
      rnd = math.random
    end
    return rnd(0, 2147483647)
  end
  Next = function (this, minValue, maxValue)
    if not minValue then
      return InternalSample(this)
    end

    if not maxValue then
      maxValue = minValue
      if maxValue < 0 then
        System.throw(System.ArgumentOutOfRangeException("maxValue" --[[nameof(maxValue)]], "'maxValue' must be greater than zero."))
      end
      return System.ToInt32((Sample(this) * maxValue))
    end

    if minValue > maxValue then
      System.throw(System.ArgumentOutOfRangeException("minValue" --[[nameof(minValue)]], "'minValue' cannot be greater than maxValue."))
    end
    local range = maxValue - minValue
    if range <= 2147483647 --[[Int32.MaxValue]] then
      return (System.ToInt32((Sample(this) * range)) + minValue)
    else
      return System.toInt32((System.ToInt64((GetSampleForLargeRange(this) * range)) + minValue))
    end
  end
  GetSampleForLargeRange = function (this)
    -- The distribution of double value returned by Sample 
    -- is not distributed well enough for a large range.
    -- If we use Sample for a range [int.MinValue..int.MaxValue)
    -- We will end up getting even numbers only.

    local result = InternalSample(this)
    -- Note we can't use addition here. The distribution will be bad if we do that.
    local negative = (InternalSample(this) % 2 == 0) and true or false
    -- decide the sign based on second sample
    if negative then
      result = - result
    end
    local d = result
    d = d + (2147483646 --[[int.MaxValue - 1]])
    -- get a number in range [0 .. 2 * Int32MaxValue - 1)
    d = d / (4294967293 --[[2 * (uint)int.MaxValue - 1]])
    return d
  end
  NextDouble = function (this)
    return Sample(this)
  end
  NextBytes = function (this, buffer)
    if buffer == nil then
      System.throw(System.ArgumentNullException("buffer" --[[nameof(buffer)]]))
    end
    do
      local i = 0
      while i < #buffer do
        buffer:set(i, System.toByte(InternalSample(this)))
        i = i + 1
      end
    end
  end
  return {
    _inext = 0,
    _inextp = 0,
    Sample = Sample,
    Next = Next,
    NextDouble = NextDouble,
    NextBytes = NextBytes,
    __ctor__ = __ctor__
  }
end)())

end

-- CoreSystemLib: Text\StringBuilder.lua
do
local System = System
local throw = System.throw
local clear = System.Array.clear
local toString = System.toString
local ArgumentNullException = System.ArgumentNullException
local ArgumentOutOfRangeException = System.ArgumentOutOfRangeException
local IndexOutOfRangeException = System.IndexOutOfRangeException

local table = table
local tconcat = table.concat
local schar = string.char
local ssub = string.sub
local sbyte = string.byte
local type = type
local select = select

local function build(this, value, startIndex, length)
  value = value:Substring(startIndex, length)
  local len = #value
  if len > 0 then
    this[#this + 1] = value
    this.Length = len
  end
end

local function getItemIndex(this, index)
  for i = 1, #this do
    local s = this[i]
    local len = #s
    local begin = index
    index = index - len
    if index < 0 then
      begin = begin + 1
      local ch = sbyte(s, begin)
      if not ch then
        break
      end
      return i, s, begin, ch
    end
  end
end

local function getLength(this)
  return this.Length
end

local StringBuilder = System.define("System.Text.StringBuilder", { 
  Length = 0,
  ToString = tconcat,
  __tostring = tconcat,
  __ctor__ = function (this, ...)
    local len = select("#", ...)
    if len == 0 then
    elseif len == 1 or len == 2 then
      local value = ...
      if type(value) == "string" then
        build(this, value, 0, #value)
      else
        build(this, "", 0, 0)
      end
    else 
      local value, startIndex, length = ...
      build(this, value, startIndex, length)
    end
  end,
  get = function (this, index)
    local _, _, _, ch = getItemIndex(this, index)
    if not _ then
      throw(IndexOutOfRangeException())
    end
    return ch
  end,
  set = function (this, index, value)
    local i, s, j = getItemIndex(this, index)
    if not i then
      throw(ArgumentOutOfRangeException("index"))
    end
    this[i] = ssub(s, 1, j - 1) .. schar(value) .. ssub(s, j + 1)
  end,
  setCapacity = function (this, value)
    if value < this.Length then
      throw(ArgumentOutOfRangeException())
    end
  end,
  getCapacity = getLength,
  getMaxCapacity = getLength,
  getLength = getLength,
  setLength = function (this, value) 
    if value < 0 then throw(ArgumentOutOfRangeException("value")) end
    if value == 0 then
      this:Clear()
      return
    end
    local delta = value - this.Length
    if delta > 0 then
      this:AppendCharRepeat(0, delta)
    else
      local length, remain = #this, value
      for i = 1, length do
        local s = this[i]
        local len = #s
        if len >= remain then
          if len ~= remain then
            s = ssub(s, 0, remain)
            this[i] = s
          end
          for j = i + 1, length do
            this[j] = nil
          end
          break
        end
        remain = remain - len
      end
      this.Length = this.Length + delta
    end  
  end,
  Append = function (this, value, startIndex, count)
    if not startIndex then
      if value ~= nil then
        value = toString(value)
        if value ~= nil then
          this[#this + 1] = value
          this.Length =  this.Length + #value
        end
      end
    else
      if value == nil then
        throw(ArgumentNullException("value"))
      end
      value = value:Substring(startIndex, count)
      this[#this + 1] = value
      this.Length =  this.Length + #value
    end
    return this
  end,
  AppendChar = function (this, v) 
    v = schar(v)
    this[#this + 1] = v
    this.Length = this.Length + 1
    return this
  end,
  AppendCharRepeat = function (this, v, repeatCount)
    if repeatCount < 0 then throw(ArgumentOutOfRangeException("repeatCount")) end
    if repeatCount == 0 then return this end
    v = schar(v)
    local count = #this + 1
    for i = 1, repeatCount do
      this[count] = v
      count = count + 1
    end
    this.Length = this.Length + repeatCount
    return this
  end,
  AppendFormat = function (this, format, ...)
    local value = format:Format(...)
    this[#this + 1] = value
    this.Length = this.Length + #value
    return this
  end,
  AppendLine = function (this, value)
    local count = 1
    local len = #this + 1
    if value ~= nil then
      this[len] = value
      len = len + 1
      count = count + #value
    end
    this[len] = "\n"
    this.Length = this.Length + count
    return this
  end,
  Clear = function (this)
    clear(this)
    this.Length = 0
    return this
  end,
  Insert = function (this, index, value)
    local length = this.Length
    if value ~= nil then
      if index == length then
        this:Append(value)
      else
        value = toString(value)
        if value ~= nil then
          local i, s, j = getItemIndex(this, index)
          if not i then
            throw(ArgumentOutOfRangeException("index"))
          end
          this[i] = ssub(s, 1, j - 1) .. value .. ssub(s, j)
          this.Length = length + #value
        end
      end
    end
  end
})
System.StringBuilder = StringBuilder
end

-- CoreSystemLib: Console.lua
do
local System = System
local toString = System.toString

local print = print
local select = select
local string = string
local byte = string.byte
local char = string.char
local Format = string.Format

local function getWriteValue(v, ...)
  if select("#", ...) ~= 0 then
    return Format(v, ...)
  end
  return toString(v)
end

local Console = System.define("System.Console", {
  WriteLine = function (v, ...)
    print(getWriteValue(v, ...))     
  end,
  WriteLineChar = function (v)
    print(char(v))     
  end
})

local io = io
if io then
  local stdin = io.stdin
  local stdout = io.stdout
  local read = stdin.read
  local write = stdout.write

  function Console.Read()
    local ch = read(stdin, 1)
    return byte(ch)
  end

  function Console.ReadLine()
     return read(stdin)
  end

  function Console.Write(v, ...)
    write(stdout, getWriteValue(v, ...))
  end

  function Console.WriteChar(v)
     write(stdout, char(v))
  end
end
end

-- CoreSystemLib: IO\File.lua
do
local io = io
if io then

local System = System
local define = System.define
local throw = System.throw
local each = System.each

local open = io.open
local remove = os.remove

local IOException = define("System.IO.IOException", {
  __tostring = System.Exception.ToString,
  base = { System.Exception },
  __ctor__ = function(this, message, innerException) 
    System.Exception.__ctor__(this, message or "I/O error occurred.", innerException)
  end,
})

local function openFile(path, mode)
  local f, err = open(path, mode)
  if f == nil then
    throw(IOException(err))
  end
  return f
end

local function readAll(path, mode)
  local f = openFile(path, mode)
  local bytes = f:read("*all")
  f:close()
  return bytes
end

local function writeAll(path, contents, mode)
  local f = openFile(path, mode)
  f:write(contents)
  f:close()
end

define("System.IO.File", {
  ReadAllBytes = function (path)
    return readAll(path, "rb")
  end,
  ReadAllText = function (path)
    return readAll(path, "r")
  end,
  ReadAllLines = function (path)
    local t = {}
    local count = 1
    for line in io.lines(path) do
      t[count] = line
      count = count + 1
    end
    return System.arrayFromTable(t, System.String)
  end,  
  WriteAllBytes = function (path, contents)
    writeAll(path, contents, "wb")
  end,
  WriteAllText = function (path, contents)
    writeAll(path, contents, "w")
  end,
  WriteAllLines = function (path, contents)
    local f = openFile(path, "w")
    for _, line in each(contents) do
      if line == nil then
        f:write("\n")
      else
        f:write(line, "\n")
      end
    end
    f:close()
  end,
  Exists = function (path)
    local file = io.open(path, "rb")
    if file then file:close() end
    return file ~= nil
  end,
  Delete = function (path)
    local ok, err = remove(path)
    if not ok then
      throw(IOException(err))
    end
  end
})

end
end

-- CoreSystemLib: Reflection\Assembly.lua
do
local System = System
local define = System.define
local throw = System.throw
local div = System.div
local Type = System.Type
local typeof = System.typeof
local getClass = System.getClass
local is = System.is
local band = System.band
local arrayFromTable = System.arrayFromTable
local toLuaTable = System.toLuaTable

local Exception = System.Exception
local NotSupportedException = System.NotSupportedException
local ArgumentException = System.ArgumentException
local ArgumentNullException = System.ArgumentNullException

local assert = assert
local pairs = pairs
local getmetatable = getmetatable
local setmetatable = setmetatable
local rawget = rawget
local type = type
local unpack = table.unpack
local select = select
local floor = math.floor

local TargetException = define("System.Reflection.TargetException", {
  __tostring = Exception.ToString,
  base = { Exception }
})

local TargetParameterCountException = define("System.Reflection.TargetParameterCountException", {
  __tostring = Exception.ToString,
  base = { Exception },
  __ctor__ = function(this, message, innerException)
    Exception.__ctor__(this, message or "Parameter count mismatch.", innerException)
  end,
})

local AmbiguousMatchException = define("System.Reflection.AmbiguousMatchException", {
  __tostring = Exception.ToString,
  base = { System.SystemException },
  __ctor__ = function(this, message, innerException)
    Exception.__ctor__(this, message or "Ambiguous match found.", innerException)
  end,
})

local MissingMethodException = define("System.MissingMethodException", {
  __tostring = Exception.ToString,
  base = { Exception },
  __ctor__ = function(this, message, innerException)
    Exception.__ctor__(this, message or "Specified method could not be found.", innerException)
  end
})

local function throwNoMatadata(sign)
  throw(NotSupportedException("not found metadata for " .. sign), 1)
end

local function eq(left, right)
  return left[1] == right[1] and left.name == right.name
end

local function getName(this)
  return this.name
end

local function isAccessibility(this, kind)
  local metadata = this:getMetadata()
  return band(metadata[2], 0x7) == kind
end

local MemberInfo = define("System.Reflection.MemberInfo", {
  getName = getName,
  getCls = function (this)
    return this.c
  end,
  getMetadata = function (this)
	  local metadata = this.metadata
    if not metadata then
      throwNoMatadata(this:getCls().__name__ .. "." .. this.name)
    end
    return metadata
  end,
  EqualsObj = function (this, obj)
    if getmetatable(this) ~= getmetatable(obj) then
      return false
    end
    return eq(this, obj)
  end,
  getMemberType = function (this)
    return this.memberType
  end,
  getDeclaringType = function (this)
    return typeof(this:getCls())
  end,
  getIsAbstract = function (this)
	  local metadata = this:getMetadata()
    return band(metadata[2], 0x10) ~= 0
  end,
  getIsStatic = function (this)
    local metadata = this:getMetadata()
    return band(metadata[2], 0x8) ~= 0
  end,
  getIsPrivate = function (this)
    return isAccessibility(this, 1)
  end,
  getIsFamilyAndAssembly = function (this)
    return isAccessibility(this, 2)
  end,
  getIsFamily = function (this)
    return isAccessibility(this, 3)
  end,
  getIsAssembly = function (this)
    return isAccessibility(this, 4)
  end,
  getIsFamilyOrAssembly = function (this)
    return isAccessibility(this, 5)
  end,
  getIsPublic = function (this)
    return isAccessibility(this, 6)
  end
})

local function getFieldOrPropertyType(this)
  local metadata = this.metadata
  if not metadata then
    throwNoMatadata(this.c.__name__ .. "." .. this.name)
  end
  return typeof(metadata[3])
end

local function checkObj(obj, cls)
  if not is(obj, cls) then
    throw(ArgumentException("Object does not match target type.", "obj"), 1)
  end
end

local function checkTarget(cls, obj, metadata)
  if band(metadata[2], 0x8) == 0 then
    if obj == nil then
      throw(TargetException())
    end
    checkObj(obj, cls)
  else
    return true
  end
end

local function checkValue(value, valueClass)
  if value == nil then
    if valueClass.class == "S" then
      value = valueClass:default()
    end
  else
    checkObj(value, valueClass)
  end
  return value
end

local function getOrSetField(this, obj, isSet, value)
  local cls, metadata = this.c, this.metadata
  if metadata then
    if checkTarget(cls, obj, metadata) then
      obj = cls
    end
    local name = metadata[4]
    if type(name) ~= "string" then
      name = this.name
    end
    if isSet then
      obj[name] = checkValue(value, metadata[3])
    else
      return obj[name]
    end
  else
    if obj ~= nil then
      checkObj(obj, cls)
    else
      obj = cls
    end
    if isSet then
      obj[this.name] = value
    else
      return obj[this.name]
    end
  end
end

local function isMetadataDefined(metadata, index, attributeType)
  attributeType = attributeType[1]
  for i = index, #metadata do
    if is(metadata[i], attributeType) then
      return true
    end
  end
  return false
end

local function fillMetadataCustomAttributes(t, metadata, index, attributeType)
  local count = #t + 1
  if attributeType then
    attributeType = attributeType[1]
    for i = index, #metadata do
      if is(metadata[i], attributeType) then
        t[count] = metadata[i]
        count = count + 1
      end
    end
  else
    for i = index, #metadata do
      t[count] = metadata[i]
      count = count + 1
    end
  end
end

local FieldInfo = define("System.Reflection.FieldInfo", {
  __eq = eq,
  base = { MemberInfo },
  memberType = 4,
  getFieldType = getFieldOrPropertyType,
  GetValue = getOrSetField,
  SetValue = function (this, obj, value)
    getOrSetField(this, obj, true, value)
  end,
  IsDefined = function (this, attributeType)
    if attributeType == nil then throw(ArgumentNullException()) end
    local metadata = this.metadata
    if metadata then
      return isMetadataDefined(metadata, 4, attributeType)
    end
    return false
  end,
  GetCustomAttributes = function (this, attributeType, inherit)
    if type(attributeType) == "boolean" then
      attributeType, inherit = nil, attributeType
    else
      if attributeType == nil then throw(ArgumentNullException()) end
    end
    local t = {}
    local metadata = this.metadata
    if metadata then
      local index = 4
      if type(metadata[index]) == "string" then
        index = 5
      end
      fillMetadataCustomAttributes(t, metadata, index, attributeType)
    end
    return arrayFromTable(t, System.Attribute)
  end
})

local function getOrSetProperty(this, obj, isSet, value)
  local cls, metadata = this.c, this.metadata
  if metadata then
    local isStatic
    if checkTarget(cls, obj, metadata) then
      obj = cls
      isStatic = true
    end
    if isSet then
      value = checkValue(value, metadata[3])
    end
    local kind = band(metadata[2], 0x300)
    if kind == 0 then
      local name = metadata[4]
      if type(name) ~= "string" then
        name = this.name
      end
      if isSet then
        obj[name] = value
      else
        return obj[name]
      end
    else
      local index
      if kind == 0x100 then
        index = isSet and 5 or 4
      elseif kind == 0x200 then
        if isSet then
          throw(ArgumentException("Property Set method was not found."))
        end
        index = 4
      else
        if not isSet then
          throw(ArgumentException("Property Get method was not found."))
        end
        index = 4
      end
      local fn = metadata[index]
      if type(fn) == "table" then
        fn = fn[1]
      end
      if isSet then
        if isStatic then
          fn(value)
        else
          fn(obj, value)
        end
      else
        return fn(obj)
      end
    end
  else
    local isStatic
    if obj ~= nil then
      checkObj(obj, cls)
    else
      obj = cls
      isStatic = true
    end
    if this.isField then
      if isSet then
        obj[this.name] = value
      else
        return obj[this.name]
      end
    else
      if isSet then
        local fn = obj["set" .. this.name]
        if fn == nil then
          throw(ArgumentException("Property Set method not found."))
        end
        if isStatic then
          fn(value)
        else
          fn(obj, value)
        end
      else
        local fn = obj["get" .. this.name]
        if fn == nil then
          throw(ArgumentException("Property Get method not found."))
        end
        return fn(obj)
      end
    end
  end
end

local function getPropertyAttributesIndex(metadata)
  local kind = band(metadata[2], 0x300)
  local index
  if kind == 0 then
    index = 4
  elseif kind == 0x100 then
    index = 6
  else
    index = 5
  end
  return index
end

local PropertyInfo = define("System.Reflection.PropertyInfo", {
  __eq = eq,
  base = { MemberInfo },
  memberType = 16,
  getPropertyType = getFieldOrPropertyType,
  GetValue = getOrSetProperty,
  SetValue = function (this, obj, value)
    getOrSetProperty(this, obj, true, value)
  end,
  IsDefined = function (this, attributeType)
    if attributeType == nil then throw(ArgumentNullException()) end
    local metadata = this.metadata
    if metadata then
      local index = getPropertyAttributesIndex(metadata)
      return isMetadataDefined(metadata, index, attributeType)
    end
    return false
  end,
  GetCustomAttributes = function (this, attributeType, inherit)
    if type(attributeType) == "boolean" then
      attributeType, inherit = nil, attributeType
    else
      if attributeType == nil then throw(ArgumentNullException()) end
    end
    local t = {}
    local metadata = this.metadata
    if metadata then
      local index = getPropertyAttributesIndex(metadata)
      fillMetadataCustomAttributes(t, metadata, index, attributeType)
    end
    return arrayFromTable(t, System.Attribute)
  end
})

local function hasPublicFlag(flags)
  return band(flags, 0x7) == 6
end

local function getMethodParameterCount(flags)
  local count = band(flags, 0xFF00)
  if count ~= 0 then
    count = count / 256
  end
  return floor(count)
end

local function getMethodAttributesIndex(metadata)
  local flags = metadata[2]
  local index
  local typeParametersCount = band(flags, 0xFF0000)
  if typeParametersCount == 0 then
    local parameterCount = getMethodParameterCount(flags)
    if band(flags, 0x80) == 0 then
      index = 4 + parameterCount
    else
      index = 5 + parameterCount
    end
  else
    index = 5
  end
  return index
end

local MethodInfo = define("System.Reflection.MethodInfo", {
  __eq = eq,
  base = { MemberInfo },
  memberType = 8,
  getReturnType = function (this)
    local metadata = this.metadata
    if not metadata then
      throwNoMatadata(this.c.__name__ .. "." .. this.name)
    end
    local flags = metadata[2]
    if band(flags, 0x80) == 0 then
      return Type.Void
    end
    if band(flags, 0xC00) > 0 then
      assert(false, "not implement for generic method")
    end
    local parameterCount = getMethodParameterCount(flags)
    return typeof(metadata[4 + parameterCount])
  end,
  Invoke = function (this, obj, parameters)
    local cls, metadata = this.c, this.metadata
    if metadata then
      local isStatic
      if checkTarget(cls, obj, metadata) then
        isStatic = true
      end
      local t = {}
      local parameterCount = getMethodParameterCount(metadata[2])
      if parameterCount == 0 then
        if parameters ~= nil and #parameters > 0 then
          throw(TargetParameterCountException())
        end
      else
        if parameters == nil and #parameters ~= parameterCount then
          throw(TargetParameterCountException())
        end
        for i = 4, 3 + parameterCount do
          local j = #t
          local paramValue, mtData = parameters:get(j), metadata[i]
          if mtData ~= nil then
            paramValue = checkValue(paramValue, mtData)
          end
          t[j + 1] = paramValue
        end
      end
      local f = metadata[3]
      if isStatic then
        if t then
          return f(unpack(t, 1, parameterCount))
        else
          return f()
        end
      else
        if t then
          return f(obj, unpack(t, 1, parameterCount))
        else
          return f(obj)
        end
      end
    else
      local f = assert(this.f)
      if obj ~= nil then
        checkObj(obj, cls)
        if parameters ~= nil then
          local t = toLuaTable(parameters)
          return f(obj, unpack(t, 1, #parameters))
        else
          return f(obj)
        end
      else
        if parameters ~= nil then
          local t = toLuaTable(parameters)
          return f(unpack(t, 1, #parameters))
        else
          return f()
        end
      end
    end
  end,
  IsDefined = function (this, attributeType, inherit)
    if attributeType == nil then throw(ArgumentNullException()) end
    local metadata = this.metadata
    if metadata then
      local index = getMethodAttributesIndex(metadata)
      return isMetadataDefined(metadata, index, attributeType)
    end
    return false
  end,
  GetCustomAttributes = function (this, attributeType, inherit)
    if type(attributeType) == "boolean" then
      attributeType, inherit = nil, attributeType
    else
      if attributeType == nil then throw(ArgumentNullException()) end
    end
    local t = {}
    local metadata = this.metadata
    if metadata then
      local index = getMethodAttributesIndex(metadata)
      fillMetadataCustomAttributes(t, metadata, index, attributeType)
    end
    return arrayFromTable(t, System.Attribute)
  end
})

local function buildFieldInfo(cls, name, metadata)
  return setmetatable({ c = cls, name = name, metadata = metadata }, FieldInfo)
end

local function buildPropertyInfo(cls, name, metadata, isField)
  return setmetatable({ c = cls, name = name, metadata = metadata, isField = isField }, PropertyInfo)
end

local function buildMethodInfo(cls, name, metadata, f)
  return setmetatable({ c = cls, name = name, metadata = metadata, f = f }, MethodInfo)
end

-- https://en.cppreference.com/w/cpp/algorithm/lower_bound
local function lowerBound(t, first, last, value, comp)
  local count = last - first
  local it, step
  while count > 0 do
    it = first
    step = div(count, 2)
    it = it + step
    if comp(t[it], value) then
      it = it + 1
      first = it
      count = count - (step + 1)
    else
      count = step
    end
  end
  return first
end

local function metadataItemCompByName(item, name)
  return item[1] < name
end

local function binarySearchByName(metadata, name)
  local last = #metadata + 1
  local index = lowerBound(metadata, 1, last, name, metadataItemCompByName)
  if index ~= last then
    local item = metadata[index]
    if item[1] == name then
      return metadata[index], index
    end
  end
  return nil
end

function Type.GetField(this, name)
  if name == nil then throw(ArgumentNullException()) end
  local cls = this[1]
  local metadata = cls.__metadata__
  if metadata then
    local fields = metadata.fields
    if fields then
      local field = binarySearchByName(fields, name)
      if field then
        return buildFieldInfo(cls, name, field)
      end
      return nil
    end
  end
  if type(cls[name]) ~= "function" then
    return buildFieldInfo(cls, name)
  end
end

function Type.GetFields(this)
  local t = {}
  local cls = this[1]
  local count = 1
  repeat
    local metadata = rawget(cls, "__metadata__")
    if metadata then
      local fields = metadata.fields
      if fields then
        for i = 1, #fields do
          local field = fields[i]
          if hasPublicFlag(field[2]) then
            t[count] = buildFieldInfo(cls, field[1], field)
            count = count + 1
          end
        end
      else
        metadata = nil
      end
    end
    if not metadata then
      for k, v in pairs(cls) do
        if type(v) ~= "function" then
          t[count] = buildFieldInfo(cls, k)
          count = count + 1
        end
      end
    end
    cls = getmetatable(cls)
  until cls == nil
  return arrayFromTable(t, FieldInfo)
end

function Type.GetProperty(this, name)
  if name == nil then throw(ArgumentNullException()) end
  local cls = this[1]
  local metadata = cls.__metadata__
  if metadata then
    local properties = metadata.properties
    if properties then
      local property = binarySearchByName(properties, name)
      if property then
        return buildPropertyInfo(cls, name, property)
      end
      return nil
    end
  end
  if cls["get" .. name] or cls["set" .. name] then
    return buildPropertyInfo(cls, name)
  else
    return buildPropertyInfo(cls, name, nil, true)
  end
end

function Type.GetProperties(this)
  local t = {}
  local cls = this[1]
  local count = 1
  repeat
    local metadata = rawget(cls, "__metadata__")
    if metadata then
      local properties = metadata.properties
      if properties then
        for i = 1, #properties do
          local property = properties[i]
          if hasPublicFlag(property[2]) then
            t[count] = buildPropertyInfo(cls, property[1], property)
            count = count + 1
          end
        end
      end
    end
    cls = getmetatable(cls)
  until cls == nil
  return arrayFromTable(t, PropertyInfo)
end

function Type.GetMethod(this, name)
  if name == nil then throw(ArgumentNullException()) end
  local cls = this[1]
  local metadata = cls.__metadata__
  if metadata then
    local methods = metadata.methods
    if methods then
      local item, index = binarySearchByName(methods, name)
      if item then
        local next = methods[index + 1]
        if next and next[1] == name then
          throw(AmbiguousMatchException())
        end
        return buildMethodInfo(cls, name, item, item[3])
      end
      return nil
    end
  end
  local f = cls[name]
  if type(f) == "function" then
    return buildMethodInfo(cls, name, nil, f)
  end
end

function Type.GetMethods(this)
  local t = {}
  local cls = this[1]
  local count = 1
  repeat
    local metadata = rawget(cls, "__metadata__")
    if metadata then
      local methods = metadata.methods
      if methods then
        for i = 1, #methods do
          local method = methods[i]
          if hasPublicFlag(method[2]) then
            t[count] = buildMethodInfo(cls, method[1], method, method[3])
            count = count + 1
          end
        end
      else
        metadata = nil
      end
    end
    if not metadata then
      for k, v in pairs(cls) do
        if type(v) == "function" then
          t[count] = buildMethodInfo(cls, k, nil, v)
          count = count + 1
        end
      end
    end
    cls = getmetatable(cls)
  until cls == nil
  return arrayFromTable(t, MethodInfo)
end

function Type.GetMembers(this)
  local t = arrayFromTable({}, MemberInfo)
  t:addRange(this:GetFields())
  t:addRange(this:GetProperties())
  t:addRange(this:GetMethods())
  return t
end

function Type.IsDefined(this, attributeType, inherit)
  if attributeType == nil then throw(ArgumentNullException()) end
  local cls = this[1]
  if not inherit then
    local metadata = rawget(cls, "__metadata__")
    if metadata then
      local class  = metadata.class
      if class then
        return isMetadataDefined(class, 3, attributeType)
      end
    end
    return false
  else
    repeat
      local metadata = rawget(cls, "__metadata__")
      if metadata then
        local class  = metadata.class
        if class then
          if isMetadataDefined(class, 3, attributeType) then
            return true
          end
        end
      end
      cls = getmetatable(cls)
    until cls == nil
    return false
  end
end

function Type.GetCustomAttributes(this, attributeType, inherit)
  if type(attributeType) == "boolean" then
    attributeType, inherit = nil, attributeType
  else
    if attributeType == nil then throw(ArgumentNullException()) end
  end
  local cls = this[1]
  local t = {}
  if not inherit then
    local metadata = rawget(cls, "__metadata__")
    if metadata then
      local class  = metadata.class
      if class then
        fillMetadataCustomAttributes(t, class, 3, attributeType)
      end
    end
  else
    repeat
      local metadata = rawget(cls, "__metadata__")
      if metadata then
        local class  = metadata.class
        if class then
          fillMetadataCustomAttributes(t, class, 3, attributeType)
        end
      end
      cls = getmetatable(cls)
    until cls == nil
  end
  return arrayFromTable(t, System.Attribute)
end

local Assembly, coreSystemAssembly
local function getAssembly(t)
  local assembly = t[1].__assembly__
  if assembly then
    return setmetatable(assembly, Assembly)
  end
  return coreSystemAssembly
end

local function getAssemblyName(this)
  local name = this.name or "CSharpLua.CoreLib"
  return name .. ", Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
end

Assembly = define("System.Reflection.Assembly", {
  GetName = getAssemblyName,
  getFullName = getAssemblyName,
  GetAssembly = getAssembly,
  GetTypeFrom = Type.GetTypeFrom,
  GetEntryAssembly = function ()
    local entryAssembly = System.entryAssembly
    if entryAssembly then
      return setmetatable(entryAssembly, Assembly)
    end
    return nil
  end,
  getEntryPoint = function (this)
    local entryPoint = this.entryPoint
    if entryPoint ~= nil then
      local _, _, t, name = entryPoint:find("(.*)%.(.*)")
      local cls = getClass(t)
      local f = assert(cls[name])
      return buildMethodInfo(cls, name, nil, f)
    end
    return nil
  end,
  GetExportedTypes = function (this)
    if this.exportedTypes then
      return this.exportedTypes
    end
    local t = {}
    local classes = this.classes
    if classes then
      for i = 1, #classes do
        t[i] = typeof(classes[i])
      end
    end
    local array = arrayFromTable(t, Type, true)
    this.exportedTypes = array
    return array
  end
})
coreSystemAssembly = Assembly()

function System.GetExecutingAssembly(assembly)
	return setmetatable(assembly, Assembly)
end

setmetatable(Type, MemberInfo)
Type.getAssembly = getAssembly

Type.memberType = 32

Type.getCls = function (this)
  return this[1]
end

Type.getMetadata = function (this)
  local cls = this[1]
  local metadata = rawget(cls, "__metadata__")
  if not metadata then
    throwNoMatadata(cls.__name__)
  end
  return metadata.class
end

function Type.getAssemblyQualifiedName(this)
  return this:getName() .. ', ' .. getName(assembly)
end

function Type.getAttributes(this)
  local cls = this[1]
  local metadata = rawget(cls, "__metadata__")
  if metadata then
    metadata = metadata.class
    if metadata then
      return metadata[2]
    end
  end
  throwNoMatadata(cls.__name__)
end

local function getGenericClsFrom(name)
  local _, i = name:find('.*`')
  if i then
    local genericBaseName = name:sub(1, i - 1)
    local genericArgumentCount = name:sub(i + 1, i + 1)
    name = genericBaseName .. '_' .. genericArgumentCount
  end
  return getClass(name)
end

local function getClsFrom(name)
  local i = name:find("%[")
  if i then
    local t, count = {}, 1
    local genericName = name:sub(1, i - 1)
    local cls = getGenericClsFrom(genericName)
    i = i + 1
    while true do
      local j = name:find(",", i) or -1
      local clsName = name:sub(i, j - 1)
      t[count] = getClsFrom(clsName)
      if j == -1 then
        break
      end
      count = count + 1
      i = j + 1
    end
    return cls(unpack(t))
  end
  return getClass(name)
end

function Type.GetGenericArguments(this)
  local t = {}
  local count = 1

  local cls = this[1]
  local metadata = rawget(cls, "__metadata__")
  if metadata then
    metadata = metadata.class
    if metadata then
      local flags = metadata[2]
      local typeParameterCount = band(flags, 0xFF00)
      if typeParameterCount ~= 0 then
        typeParameterCount = typeParameterCount / 256
        for i = 3, 2 + typeParameterCount do
          t[count] = typeof(metadata[i])
          count = count + 1
        end
      end
      return arrayFromTable(t, Type)
    end
  end

  local name = cls.__name__
  local i = name:find("%[")
  if i then
    i = i + 1
    while true do
      local j = name:find(",", i) or -1
      local clsName = name:sub(i, j - 1)
      t[count] = typeof(getClsFrom(clsName))
      if j == -1 then
        break
      end
      count = count + 1
      i = j + 1
    end
  end
  return arrayFromTable(t, Type)
end

local Attribute = System.Attribute

function Attribute.GetCustomAttribute(element, attributeType, inherit)
  return element:GetCustomAttributes(attributeType, inherit)
end

function Attribute.GetCustomAttributes(element, attributeType, inherit)
  return element:GetCustomAttributes(attributeType, inherit)
end

function Attribute.IsDefined(element, attributeType, inherit)
	return element:IsDefined(attributeType, inherit)
end

local function createInstance(T, nonPublic)
  local metadata = rawget(T, "__metadata__")
  if metadata then
    local methods = metadata.methods
    if methods then
      local ctorMetadata = methods[1]
      if ctorMetadata[1] == ".ctor" then
        local flags = ctorMetadata[2]
        if nonPublic or hasPublicFlag(flags) then
          local parameterCount = getMethodParameterCount(flags)
          if parameterCount == 0 then
            return T()
          end
        end
        throw(MissingMethodException())
      end
    end
  end
  return T()
end

local function isCtorMatch(method, n, f, ...)
  local flags = method[2]
  if hasPublicFlag(flags) then
    local parameterCount = getMethodParameterCount(flags)
    if parameterCount == n then
      for j = 4, 3 + parameterCount do
        local p = f(j - 3, ...)
        if not is(p, method[j]) then
          return false
        end
      end
      return true
    end
  end
  return false
end

local function findMatchCtor(T, n, f, ...)
  local metadata = rawget(T, "__metadata__")
  if metadata then
    local hasCtor
    local methods = metadata.methods
    for i = 1, #methods do
      local method = methods[i]
      if method[1] == ".ctor" then
        if isCtorMatch(method, n, f, ...) then
          return i
        end
        hasCtor = true
      else
        break
      end
    end
    if hasCtor then
      throw(MissingMethodException())
    end
  end
end

define("System.Activator", {
  CreateInstance = function (type, ...)
    if type == nil then throw(ArgumentNullException("type")) end
    if getmetatable(type) ~= Type then
      return createInstance(type)
    end
    local T, n = type[1], select("#", ...)
    if n == 0 then
      return createInstance(T)
    elseif n == 1 then
      local args = ...
      if System.isArrayLike(args) then
        n = #args
        if n == 0 then
          return createInstance(T)
        end
        local i = findMatchCtor(T, n, function (i, args) return args:get(i - 1) end, args)
        if i and i ~= 1 then
          return System.new(T, i, unpack(args, 1, n))
        end
        return T(unpack(args, 1, n))
      end
    end
    local i = findMatchCtor(T, n, select, ...)
    if i and i ~= 1 then
      return System.new(T, i, ...)
    end
    return T(...)
  end,
  CreateInstance1 = function (type, nonPublic)
    if type == nil then throw(ArgumentNullException("type")) end
    return createInstance(type[1], nonPublic)
  end
})

define("System.Reflection.CustomAttributeExtensions", {
  GetCustomAttribute = function (element, attributeType, inherit)
    if element == nil then throw(ArgumentNullException("element")) end
    if attributeType == nil then throw(ArgumentNullException("attributeType")) end
    if type(attributeType) == "boolean" then
      attributeType, inherit = inherit, attributeType
    end
    if getmetatable(attributeType) ~= Type then
      attributeType = typeof(attributeType)
    end
    return element:GetCustomAttributes(attributeType, inherit)
  end,
  IsDefined = function (element, attributeType, inherit)
    if element == nil then throw(ArgumentNullException("element")) end
    return element:IsDefined(attributeType, inherit)
  end
})

System.Delegate.CreateDelegate = function (delegateType, ...)
  if delegateType == nil then throw(ArgumentNullException("delegateType")) end
  local n = select("#", ...)
  if n == 1 then
    local method = ...
    if method == nil then throw(ArgumentNullException("method")) end
    return method.f
  end
  local target, method, ignoreCase, throwOnBindFailure = ...
  if target == nil or method == nil then ArgumentNullException() end
  if type(method) == "boolean" then
    return method.f
  end
  if type(method) == "string" then
    if getmetatable(target) == Type then
      method = target:GetMethod(method, ignoreCase)
      if method == nil then
        if throwOnBindFailure == false then
          return nil
        end
       throw(MissingMethodException()) 
      end
      return method.f
    end
    method = typeof(target):GetMethod(method)
    if method == nil then
      if ignoreCase == false then
        return nil 
      end
      throw(MissingMethodException()) 
    end
  end
  return System.fn(target, method.f)
end
end

-- CoreSystemLib: Threading\Timer.lua
do
local System = System
local define = System.define
local throw = System.throw
local Array = System.Array
local heapAdd = Array.heapAdd
local heapPop = Array.heapPop
local heapDown = Array.heapDown
local currentTimeMillis = System.currentTimeMillis
local ArgumentNullException = System.ArgumentNullException
local ArgumentOutOfRangeException  = System.ArgumentOutOfRangeException
local NotImplementedException = System.NotImplementedException
local ObjectDisposedException = System.ObjectDisposedException

local type = type

local config = System.config
local setTimeout = config.setTimeout
local clearTimeout = config.clearTimeout

if setTimeout and clearTimeout then
  System.post = function (fn) 
    setTimeout(fn, 0) 
  end
else
  System.post = function (fn)
    fn()
  end
  local function notset()
    throw(NotImplementedException("System.config.setTimeout or clearTimeout is not registered."))
  end
  setTimeout = notset
  clearTimeout = notset
end

local TimeoutQueue = define("System.TimeoutQueue", (function ()
  local Add, AddRepeating, AddRepeating1, getNextExpiration, Erase, RunLoop, Contains, __ctor__
  __ctor__ = function (this)
	this.c = function (a, b) return a.Expiration - b.Expiration end
  end
  Add = function (this, now, delay, callback)
    return AddRepeating1(this, now, delay, 0, callback)
  end
  AddRepeating = function (this, now, interval, callback)
    return AddRepeating1(this, now, interval, interval, callback)
  end
  AddRepeating1 = function (this, now, delay, interval, callback)
    local id = {
      Expiration = now + delay,
      RepeatInterval = interval,
      Callback = callback
    }
    heapAdd(this, id, this.c)
    return id
  end
  getNextExpiration = function (this)
    if #this > 0 then return this[1].Expiration end
  end
  Erase = function (this, id)
    if not id.cancel then
      id.cancel = true
      return true
    end
    return false
  end
  RunLoop = function (this, now)
    while true do
      local e = this[1]
      if e == nil then break end
      if e.cancel then
        heapPop(this, this.c)
      else
        if e.Expiration <= now then
          if e.RepeatInterval <= 0 then
            heapPop(this, this.c)
            e.cancel = true
          else
            e.Expiration = now + e.RepeatInterval
            heapDown(this, 1, #this, this.c)
          end
          e.Callback(e, now)
        else
          return e.Expiration
        end
      end
    end
  end
  Contains = function (this, id)
    return not id.cancel
  end
  return {
    nextId_ = 1,
    Add = Add,
    AddRepeating = AddRepeating,
    AddRepeating1 = AddRepeating1,
    getNextExpiration = getNextExpiration,
    Erase = Erase,
    RunLoop = RunLoop,
    Contains = Contains,
    __ctor__ = __ctor__
  }
end)())

local timerQueue = TimeoutQueue()
local driverTimer

local function runTimerQueue()
  local now = currentTimeMillis()
  local nextExpiration = timerQueue:RunLoop(now)
  if nextExpiration then
    driverTimer = setTimeout(runTimerQueue, nextExpiration - now)
  else
    driverTimer = nil
  end
end

local function addTimer(fn, dueTime, period)
  local now = currentTimeMillis()
  local id = timerQueue:AddRepeating1(now, dueTime, period or 0, fn)
  if timerQueue[1] == id then
    if driverTimer then
      clearTimeout(driverTimer)
    end
    driverTimer = setTimeout(runTimerQueue, dueTime)
  end
  return id
end

local function removeTimer(id)
  return timerQueue:Erase(id)
end

System.addTimer = addTimer
System.removeTimer = removeTimer

local function close(this)
  local id = this.id
  if id then
    removeTimer(id)
  end
end

local function change(this, dueTime, period)
  if type(dueTime) == "table" then
    dueTime = dueTime:getTotalMilliseconds()
    period = period:getTotalMilliseconds()
  end
  if dueTime < -1 or dueTime > 0xfffffffe then
    throw(ArgumentOutOfRangeException("dueTime"))
  end
  if period < -1 or period > 0xfffffffe then
    throw(ArgumentOutOfRangeException("period"))
  end
  if this.id == false then throw(ObjectDisposedException()) end
  close(this)
  if dueTime ~= -1 then
    this.id = addTimer(this.callback, dueTime, period)
  end
  return true
end

System.Timer = define("System.Threading.Timer", {
  __ctor__ =  function (this, callback, state,  dueTime, period)
    if callback == nil then throw(ArgumentNullException("callback")) end
    this.callback = function () callback(state) end
    change(this, dueTime, period)
  end,
  Change = change,
  Dispose = function (this)
    close(this)
    this.id = false
  end,
  getActiveCount = function ()
    local count = 0
    for i = 1, #timerQueue do
      if not timerQueue[i].cancel then
        count = count + 1
      end
    end
    return count
  end,
  __gc = close
})
end

-- CoreSystemLib: Threading\Thread.lua
do
local System = System
local define = System.define
local throw = System.throw
local trunc = System.trunc
local post = System.post
local addTimer = System.addTimer
local Exception = System.Exception
local ArgumentNullException = System.ArgumentNullException
local ArgumentOutOfRangeException = System.ArgumentOutOfRangeException
local NotSupportedException = System.NotSupportedException

local assert = assert
local type = type
local setmetatable = setmetatable
local coroutine = coroutine
local ccreate = coroutine.create
local cresume = coroutine.resume
local cstatus = coroutine.status
local cyield = coroutine.yield

local mainThread

local ThreadStateException = define("System.Threading.ThreadStateException", {
  __tostring = Exception.ToString,
  base = { Exception },

  __ctor__ = function(this, message, innerException)
     Exception.__ctor__(this, message or "Thread is running or terminated; it cannot restart.", innerException)
  end
})

local ThreadAbortException = define("System.Threading.ThreadAbortException", {
  __tostring = Exception.ToString,
  base = { Exception },
  __ctor__ = function(this, message, innerException)
    Exception.__ctor__(this, message or "Thread aborted.", innerException)
end
})

local nextThreadId = 1
local currentThread

local function getThreadId()
  local id = nextThreadId
  nextThreadId = nextThreadId + 1
  return id
end

local function checkTimeout(timeout)
  if type(timeout) == "table" then
    timeout = trunc(timeout:getTotalMilliseconds())
  end
  if timeout < -1 or timeout > 2147483647 then
    throw(ArgumentOutOfRangeException("timeout"))
  end
  return timeout
end

local function resume(t, obj)
  local prevThread = currentThread
  currentThread = t
  local co = assert(t.co)
  local ok, v = cresume(co, obj)
  currentThread = prevThread
  if ok then
    if type(v) == "function" then
      v()
    elseif cstatus(co) == "dead" then
      local joinThread = t.joinThread
      if joinThread then
        resume(joinThread, true)
      end
      t.co = false
    end
  else
    t.co = false
    print("Warning: Thread.run" , v)
  end
end

local function run(t, obj)
  post(function ()
    resume(t, obj)
  end)
end

local Thread =  define("System.Threading.Thread", {
  IsBackground = false,
  IsThreadPoolThread = false,
  Priority = 2,
  ApartmentState = 2,
  Abort = function ()
    throw(ThreadAbortException())
  end,
  getCurrentThread = function ()
    return currentThread
  end,
  __ctor__ = function (this, start)
	  if start == nil then throw(ArgumentNullException("start")) end
    this.start = start
  end,
  getIsAlive = function (this)
    local co = this.co
    return co and cstatus(co) ~= "dead"
  end,
  ManagedThreadId = function (this)
	  local id = this.id
    if not id then
      id = getThreadId()
      this.id = id
    end
    return id
  end,
  Sleep = function (timeout)
    local current = currentThread
    if current == mainThread then
      throw(NotSupportedException("mainThread not support"))
    end
    timeout = checkTimeout(timeout)
    local f
    if timeout ~= -1 then
      f = function ()
        addTimer(function () 
          resume(current) 
        end, timeout)
      end
    end
    cyield(f)
  end,
  Yield = function ()
    local current = currentThread
    if current == mainThread then
      return false
    end
    cyield(function ()
      run(current)
    end)
    return true
  end,
  Join = function (this, timeout)
    if currentThread == mainThread then
      throw(NotSupportedException("mainThread not support"))
    end
    if this.joinThread then
      throw(ThreadStateException())
    end
    this.joinThread = currentThread  
    if timeout == nil then
      cyield()
    else
      timeout = checkTimeout(timeout)
      local f
      if timeout ~= -1 then
        f = function ()
          addTimer(function ()
            resume(currentThread, false)
          end, timeout)
        end
      end
      return cyield(f)
    end
  end,
  Start = function (this, parameter)
    if this.co ~= nil then throw(ThreadStateException()) end
    local co = ccreate(this.start)
    this.co = co
    this.start = nil
    run(this, parameter)
  end,
  waitTask = function (taskContinueActions)
    if currentThread == mainThread then
      throw(NotSupportedException("mainThread not support"))
    end
    taskContinueActions[#taskContinueActions + 1] = function ()
      resume(currentThread)
    end
    cyield()
  end,
})

mainThread = setmetatable({ id = getThreadId() }, Thread)
currentThread = mainThread

System.ThreadStateException = ThreadStateException
System.ThreadAbortException = ThreadAbortException
System.Thread = Thread
end

-- CoreSystemLib: Threading\Task.lua
do
local System = System
local define = System.define
local defStc = System.defStc
local throw = System.throw
local try = System.try
local trunc = System.trunc
local Void = System.Void
local post = System.post
local addTimer = System.addTimer
local removeTimer = System.removeTimer
local waitTask = System.Thread.waitTask
local arrayFromTable = System.arrayFromTable
local Exception = System.Exception
local NullReferenceException = System.NullReferenceException
local NotImplementedException = System.NotImplementedException
local ArgumentException = System.ArgumentException
local ArgumentNullException = System.ArgumentNullException
local ArgumentOutOfRangeException = System.ArgumentOutOfRangeException
local InvalidOperationException = System.InvalidOperationException
local AggregateException = System.AggregateException
local ObjectDisposedException = System.ObjectDisposedException

local ccreate = System.ccreate
local cpool = System.cpool
local cresume = System.cresume
local cyield = System.yield

local type = type
local table = table
local select = select
local assert = assert
local getmetatable = getmetatable
local setmetatable = setmetatable
local tremove = table.remove
local pack = table.pack
local unpack = table.unpack
local error = error

local TaskCanceledException = define("System.Threading.Tasks.TaskCanceledException", {
  __tostring = Exception.ToString,
  base = { Exception },
  __ctor__ = function (this, task)
    this.task = task  
    Exception.__ctor__(this, "A task was canceled.")
  end,
  getTask = function(this) 
    return this.task
  end
})
System.TaskCanceledException = TaskCanceledException

local TaskStatusCreated = 0
local TaskStatusWaitingForActivation = 1
local TaskStatusWaitingToRun = 2
local TaskStatusRunning = 3
local TaskStatusWaitingForChildrenToComplete = 4
local TaskStatusRanToCompletion = 5
local TaskStatusCanceled = 6
local TaskStatusFaulted = 7

System.TaskStatus = System.defEnum("System.Threading.Tasks.TaskStatus", {
  Created = TaskStatusCreated,
  WaitingForActivation = TaskStatusWaitingForActivation,
  WaitingToRun = TaskStatusWaitingToRun,
  Running = TaskStatusRunning,
  WaitingForChildrenToComplete = TaskStatusWaitingForChildrenToComplete,
  RanToCompletion = TaskStatusRanToCompletion,
  Canceled = TaskStatusCanceled,
  Faulted = TaskStatusFaulted,
})

local UnobservedTaskExceptionEventArgs = define("System.Threading.Tasks.UnobservedTaskExceptionEventArgs", {
  __ctor__ = function (this, exception)
    this.exception = exception
  end,
  SetObserved = function (this)
    this.observed = true
  end,
  getObserved = function (this)
    if this.observed then
      return true
    end
    return false
  end,
  getException = function (this)
    return this.exception
  end
})
System.UnobservedTaskExceptionEventArgs = UnobservedTaskExceptionEventArgs

local unobservedTaskException
local function publishUnobservedTaskException(sender, ueea)
  local handler = unobservedTaskException
  if handler then
    handler(sender, ueea)
  end
end

local TaskScheduler = define("System.Threading.Tasks.TaskScheduler", {
  addUnobservedTaskException = function (value)
    unobservedTaskException = unobservedTaskException + value
  end,
  removeUnobservedTaskException = function (value)
    unobservedTaskException = unobservedTaskException - value
  end
})
System.TaskScheduler = TaskScheduler

local TaskExceptionHolder = {
  __index = false,
  __gc = function (this)
    if not this.isHandled then
      local e = this.exception
      if e then
        local ueea = UnobservedTaskExceptionEventArgs(e)
        publishUnobservedTaskException(this.task, ueea)
        if not ueea.observed then
          print("Warning: TaskExceptionHolder" , e)
        end
      end
    end
  end
}
TaskExceptionHolder.__index = TaskExceptionHolder

local function newTaskExceptionHolder(task, exception) 
  return setmetatable({ task = task, exception = exception }, TaskExceptionHolder)
end

local function getException(task, await)
  local holder = task.data
  if not holder.isHandled then
    holder.isHandled = true
  end
  local e = holder.exception
  if await then
    return e
  end
  return AggregateException(e)
end

local Task
local nextTaskId = 1
local currentTask
local completedTask

local function getNewId()
  local id = nextTaskId
  nextTaskId = nextTaskId + 1
  return id
end

local function getId(this)
  local id = this.id
  if id == nil then
    id = getNewId()
    this.id = id
  end
  return id 
end

local function isCompleted(this)
  local status = this.status
  return status == TaskStatusRanToCompletion or status == TaskStatusFaulted or status == TaskStatusCanceled
end

local function newTask(status, data)
  return setmetatable({ status = status, data = data }, Task)
end

local function fromResult(result)
  return newTask(TaskStatusRanToCompletion, result)
end

local function fromCanceled(cancellationToken)
  if cancellationToken and cancellationToken:getIsCancellationRequested() then 
    throw(ArgumentOutOfRangeException("cancellationToken"))
  end
  return newTask(TaskStatusCanceled, cancellationToken)
end

local function fromException(exception)
  local data = newTaskExceptionHolder(false, exception)
  local t = newTask(TaskStatusFaulted, data) 
  data.task = t
  return t
end

local function getCompletedTask()
  local t = completedTask
  if t == nil then
    t = fromResult()
    completedTask = t
  end
  return t
end

local function trySetComplete(this, status, data)
  if isCompleted(this) then
    return false
  end

  this.status = status
  this.data = data

  local continueActions = this.continueActions
  if continueActions then
    for i = 1, #continueActions do
      continueActions[i](this)
    end
    this.continueActions = nil
  end
  return true
end

local function trySetResult(this, result)
  return trySetComplete(this, TaskStatusRanToCompletion, result)
end

local function trySetException(this, exception)
  if this.data == Void then
    throw(exception)
  end
  return trySetComplete(this, TaskStatusFaulted, newTaskExceptionHolder(this, exception))
end

local function trySetCanceled(this, cancellationToken)
  return trySetComplete(this, TaskStatusCanceled, cancellationToken)
end

local function newWaitingTask(isVoid)
  return newTask(TaskStatusWaitingForActivation, isVoid and Void)
end

local function getContinueActions(task) 
  local continueActions = task.continueActions
  if continueActions == nil then
    continueActions = {}
    task.continueActions = continueActions
  end
  return continueActions
end

local function addContinueAction(task, f)
  local continueActions = getContinueActions(task)
  continueActions[#continueActions + 1] = assert(f)
end

local function checkTasks(...)
  local tasks
  local n = select("#", ...)
  if n == 1 then
    local args = ...
    if args == nil then throw(ArgumentNullException("tasks")) end
    if System.isArrayLike(args) then
      tasks = args
    elseif System.isEnumerableLike(args) then
      tasks = System.Array.toArray(args)
    end
    if tasks ~= nil then
      for i = 1, #tasks do
        if tasks[i] == System.null then
          throw(ArgumentNullException())
        end
      end
    end
  end
  if tasks == nil then
    tasks = { ... }
    for i = 1, n do
      if tasks[i] == nil then
        throw(ArgumentNullException())
      end
    end
  end
  return tasks
end

local function getDelay(delay)
  if type(delay) == "table" then
    delay = trunc(delay:getTotalMilliseconds())
    if delay < -1 or delay > 2147483647 then
      throw(ArgumentOutOfRangeException("delay"))
    end
  elseif delay < -1 then
    throw(ArgumentOutOfRangeException("millisecondsDelay"))  
  end
  return delay
end

local waitToken = {}
local function getResult(this, await)
  local status = this.status
  if status == TaskStatusRanToCompletion then
    return this.data
  elseif status == TaskStatusFaulted then
    throw(getException(this, await))
  elseif status == TaskStatusCanceled then
    local e = TaskCanceledException(this)
    if not await then e = AggregateException(e) end
    throw(e)
  end
  return waitToken
end

local function getAwaitResult(task)
  local status = task.status
  local ok, v
  if status == TaskStatusRanToCompletion then
    ok, v = true, task.data
  elseif status == TaskStatusFaulted then
    ok, v = false, getException(task, true)
  elseif status == TaskStatusCanceled then
    ok, v = false, TaskCanceledException(task)
  else
    assert(false)
  end
  return ok, v
end

local factory = {
  StartNew = function (_, f, state)
    local t = newWaitingTask()
    post(function ()
      try(function ()
        assert(trySetResult(t, f(state)))
      end, function (e)
        assert(trySetException(t, e))
      end)
    end)
    return t
  end
}

Task = define("System.Threading.Tasks.Task", {
  Dispose = System.emptyFn,
  __ctor__ = function (this, action, state)
    if action == nil then throw(ArgumentNullException("action")) end
    this.status = TaskStatusCreated
    this.data = function ()
      return action(state)
    end
  end,
  getId = getId,
  getCurrentId = function ()
    local t = currentTask
    if t then
      return getId(t)
    end
  end,
  getFactory = function ()
    return factory
  end,
  getStatus = function (this)
    return this.status
  end,
  getException = function (this)
    if this.status == TaskStatusFaulted then
      return getException(this)
    end
    return nil
  end,
  getResult = function (this)
    local result = getResult(this)
    if result == waitToken then
      waitTask(getContinueActions(this))
      result = getResult(this)
      assert(result ~= waitToken)
    end
    return result
  end,
  getIsCompleted = isCompleted,
  getIsCanceled = function (this)
    return this.status == TaskStatusCanceled
  end,
  getIsFaulted = function (this)
    return this.status == TaskStatusFaulted
  end,
  FromResult = fromResult,
  FromCanceled = fromCanceled,
  FromException = fromException,
  getCompletedTask = getCompletedTask,
  Delay = function (delay, cancellationToken)
    delay = getDelay(delay)

    if cancellationToken and cancellationToken:getIsCancellationRequested() then
      return fromCanceled(cancellationToken)
    elseif delay == 0 then
      return getCompletedTask()
    end

    local t = newWaitingTask()
    local timerId, registration  

    if cancellationToken and cancellationToken:getCanBeCanceled() then
      registration = cancellationToken:Register(function ()
        local success = trySetCanceled(t, cancellationToken)
        if success and timerId then
          removeTimer(timerId)
        end
      end)
    end

    if delay ~= -1 then
      timerId = addTimer(function ()
        local success = trySetResult(t)
        if success and registration then
          registration:Dispose()
        end
      end, delay)
    end

    return t
  end,
  Run = function (f, cancellationToken)
    local t = Task(f) 
    t:Start()
    return t
  end,
  WhenAll = function (T, ...)
    local tasks = checkTasks(...)
    local count = #tasks
    if count == 0 then
      return getCompletedTask()
    end
    local result, exceptions, cancelled = {}, {}
    local t = newWaitingTask()
    local function f(task)
      local status = task.status
      if status == TaskStatusRanToCompletion then
        result[#result + 1] = task.data
      elseif status == TaskStatusFaulted then
        local exception = getException(task, true)
        exceptions[#exceptions + 1] = exception
      elseif status == TaskStatusCanceled then
        cancelled = true
      end
      count = count - 1
      if count == 0 then
        if #exceptions > 0 then
          trySetException(t, arrayFromTable(exceptions, Exception))
        elseif cancelled then
          trySetCanceled(t)
        else
          if T then
            trySetResult(t, arrayFromTable(result, T))
          end
            trySetResult(t)
        end
      end
    end
    for i = 1, count do
      local task = tasks[i]
      if isCompleted(task) then
        post(function ()
          f(task)
        end)
      else
        addContinueAction(task, f)
      end
    end
    return t
  end,
  WhenAny = function (...)
    local tasks = checkTasks(...)
    local count = #tasks
    if count == 0 then
      throw(ArgumentException())
    end
    local t = newWaitingTask()
    local function f(task)
      local status = task.status
      if status == TaskStatusRanToCompletion then
        trySetResult(t, task)
      elseif status == TaskStatusFaulted then
        trySetException(t, getException(task))
      elseif status == TaskStatusCanceled then
        trySetCanceled(t)
      end
    end
    for i = 1, count do
      local task = tasks[i]
      if isCompleted(task) then
        post(function ()
          f(task)
        end)
      else
        addContinueAction(task, f)
      end
    end
    return t
  end,
  ContinueWith = function (this, continuationAction)
    if continuationAction == nil then throw(ArgumentNullException("continuationAction")) end
    local t = newWaitingTask()
    local function f(task)
      try(function ()
        t.status = TaskStatusRunning
        assert(trySetResult(t, continuationAction(task)))
      end, function (e)
        assert(trySetException(t, e))
      end)
    end
    if isCompleted(this) then
      post(function ()
        f(this)
      end)
    else
      addContinueAction(this, f)
    end
    return t
  end,
  Start = function (this)
    if this.status ~= TaskStatusCreated then throw(InvalidOperationException("Task was already started.")) end
    this.status = TaskStatusWaitingToRun
    post(function ()
      try(function ()
        this.status = TaskStatusRunning
        assert(trySetResult(this, this.data()))
      end, function (e)
        assert(trySetException(this, e))
      end)
    end)
  end,
  Wait = function (this)
    waitTask(getContinueActions(this))
  end,
  Await = function (this, t)
    local a = t:GetAwaiter()
    if a:getIsCompleted() then
      return a:GetResult()
    end
    a:OnCompleted(function ()
      local ok, v
      try(function ()
        ok, v = true, a:GetResult()
      end, function (e)
        ok, v = false, e
      end)
      ok, v = cresume(this.c, ok, v)
      if not ok then
        assert(trySetException(this, v))
      end
    end)
    local ok, v = cyield()
    if ok then
      return v
    else
      error(v)
    end
  end,
  await = function (this, task)
    if getmetatable(task) ~= Task then
      return this:Await(task)
    end

    local result = getResult(task, true)
    if result ~= waitToken then
      return result
    end
    addContinueAction(task, function (task)
      local ok, v = getAwaitResult(task)
      ok, v = cresume(this.c, ok, v)
      if not ok then
        assert(trySetException(this, v))
      end
    end)
    local ok, v = cyield()
    if ok then
      return v
    else
      error(v)
    end
  end
})
System.Task = Task

local TaskT_TransitionToFinal_AlreadyCompleted = "An attempt was made to transition a task to a final state when it had already completed."
local TaskCompletionSource = define("System.Threading.Tasks.TaskCompletionSource", {
  __ctor__ = function (this)
    this.task = newWaitingTask()
  end,
  getTask = function (this)
    return this.task
  end,
  SetCanceled = function (this)
    if not trySetCanceled(this.task) then
      throw(InvalidOperationException(TaskT_TransitionToFinal_AlreadyCompleted))
    end
  end,
  SetException = function (this, exception)
    if exception == nil then throw(ArgumentNullException("exception")) end
    if not trySetException(this.task, exception) then
      throw(InvalidOperationException(TaskT_TransitionToFinal_AlreadyCompleted))
    end
  end,
  SetResult = function (this, result)
    if not trySetResult(this.task, result) then
      throw(InvalidOperationException(TaskT_TransitionToFinal_AlreadyCompleted))
    end
  end,
  TrySetCanceled = trySetCanceled,
  TrySetException = trySetException,
  TrySetResult = trySetResult
})
System.TaskCompletionSource = TaskCompletionSource

local CancellationTokenRegistration = defStc("System.Threading.CancellationTokenRegistration", (function ()
  local function unregister(this)
    local token = this.token
    if token then
      local f = this.f
      if f then
        this.f = nil
        return token.source:unRegister(f)
      end
    end
    return false
  end
  return {
    base =  function(_, T)
      return { System.IDisposable, System.IEquatable_1(T) }
    end,
    __ctor__ = function (this, token, f)
      if not token then
        return
      end
      this.token = token
      this.f = f
    end,
    getToken = function (this)
      return this.token
    end,
    Equals = System.equals,
    Unregister = unregister,
    Dispose = unregister
  }
end)())
System.CancellationTokenRegistration = CancellationTokenRegistration

local OperationCanceledException = define("System.OperationCanceledException", {
  __tostring = Exception.ToString,
  base = { System.SystemException },
  __ctor__ = function (this, message, innerException, token)
    Exception.__ctor__(this, message or "The operation was canceled.", innerException)
    this.tokne = token
  end,
  getCancellationToken = function (this)
    return this.token
  end
})

local canceledSource
local CancellationToken 
CancellationToken = defStc("System.Threading.CancellationToken", {
  __ctor__ = function (this, canceled)
    if canceled == nil then
      return
    end
    if canceled == true then
      this.source = canceledSource
    elseif canceled then
      this.source = canceled
    end
  end,
  getCanBeCanceled = function (this)
    return this.source ~= nil
  end,
  getIsCancellationRequested = function (this)
    local source = this.source
    if source then
      return source:getIsCancellationRequested()
    end
    return false
  end,
  getNone = function ()
    return CancellationToken()
  end,
  Equals = System.equals,
  Register = function (this, callback, state)
    local source = this.source
    if source then
      if not source:getIsCancellationRequested() then
        local function f()
          callback(state)
        end
        this.source:register(f)
        return CancellationTokenRegistration(this, f)
      end
      callback(state)
    end
    return CancellationTokenRegistration()
  end,
  ThrowIfCancellationRequested = function (this)
    if this:getIsCancellationRequested() then
      throw(OperationCanceledException())
    end
  end
})
System.CancellationToken = CancellationToken

local CancellationTokenSource 
CancellationTokenSource = define("System.Threading.CancellationTokenSource", (function ()
  local function clean(this)
    local timerId = this.timerId
    if timerId then
      removeTimer(timerId)
    end
    local links = this.links
    if links then
      for i = 1, #links do
        links[i]:Dispose()
      end
    end
  end
  return  {
    state = 0,
    base = { System.IDisposable },
    __ctor__  = function (this, delay)
      if delay then
        delay = getDelay(delay)
        if delay == 0 then
          this.state = 1
        else
          this.timerId = addTimer(function ()
            this.Cancel()
          end, delay)
        end
      end
    end,
    Cancel = function (this, throwOnFirstException)
      if this.disposed then throw(ObjectDisposedException()) end
      if this.state == 1  then
        return
      end
      clean(this)
      this.state = 1
      local actions = this.continueActions
      if actions then
        local t = {}
        for i = 1, #actions do
          try(function ()
            actions[i]()          
          end, function (e)
            if throwOnFirstException then
              throw(e)
            end
            t[#t + 1] = e
          end)
        end
        if #t > 0 then
          throw(AggregateException(arrayFromTable(t, Exception)))
        end
      end
    end,
    CancelAfter = function (this, delay)
      if this.disposed then throw(ObjectDisposedException()) end
      delay = getDelay(delay)
      if this.state == 1  then
        return
      end
      local timerId = this.timerId
      if timerId then
        removeTimer(timerId)
      end
      this.timerId = addTimer(function ()
        this:Cancel()
      end, delay)
    end,
    Dispose = function (this)
      if this.disposed then
        return
      end
      clean(this)
      this.disposed = true
    end,
    getIsCancellationRequested = function (this)
      return this.state == 1
    end,
    getToken = function (this)
      local t = this.token
      if not t then
        t = CancellationToken(this)
        this.token = t
      end
      return t
    end,
    register = addContinueAction,
    unRegister = function (this, f)
      local actions = this.continueActions
      if actions then
        for i = 1, #actions do
          if actions[i] == f then
            tremove(actions, i)
            return true
          end
        end
      end
      return false
    end,
    CreateLinkedTokenSource = function (...)
      local cts, links, count = CancellationTokenSource(), {}, 1
      cts.links = links
      local n = select("#", ...)
      if n == 1 then
        local args = ...
        if System.isArrayLike(args) then
          for i = 1, #args do
            links[count] = args[i]:Register(cts.Cancel, cts)
            count = count + 1 
          end
          return cts
        end
      end
      for i = 1, n do
        local token = select(i, ...)
        links[count] = token:Register(cts.Cancel, cts)
        count = count + 1 
      end
      return cts
    end
  }
end)())
System.CancellationTokenSource = CancellationTokenSource
canceledSource = setmetatable({ state = 1 }, CancellationTokenSource)

local function taskCoroutineCreate(t, f)
  local c = ccreate(function (...)
    local r = f(t, ...)
    assert(trySetResult(t, r))
  end)
  t.c = c
  return c
end

function System.async(f, void, ...)
  local t = newWaitingTask(void)
  local c = taskCoroutineCreate(t, f)
  local ok, v = cresume(c, ...)
  if not ok then
    assert(trySetException(t, v))
  end
  return t
end

local IAsyncDisposable = System.defInf("System.IAsyncDisposable")
local IAsyncEnumerable = System.defInf("System.Collections.Generic.IAsyncEnumerable", System.emptyFn, nil, 1)
local IAsyncEnumerator = System.defInf("System.Collections.Generic.IAsyncEnumerator", System.emptyFn, nil, 1)

System.IAsyncEnumerable_1 =  IAsyncEnumerable
System.IAsyncEnumerator_1 = IAsyncEnumerator

local yieldAsync 
local function checkYieldAsync(this, ok, v, current)
  if ok then
    if v == yieldAsync then
      this.e.current = current
      assert(trySetResult(this.t, true))
    elseif v == cpool then
      this.c = nil
      this.e.current = nil
      assert(trySetResult(this.t, false))
    end
  else
    assert(trySetException(this.t, v))
  end
end
yieldAsync = {
  __index = false,
  await = function (this, task)
    local result = getResult(task, true)
    if result ~= waitToken then
      return result
    end
    addContinueAction(task, function (task)
      local current
      local ok, v = getAwaitResult(task)
      ok, v, current = cresume(this.c, ok, v)
      checkYieldAsync(this, ok, v, current)
    end)
    local ok, v = cyield()
    if ok then
      return v
    else
      error(v)
    end
  end,
  yield = function (this, v)
    cyield(yieldAsync, v)
  end
}
yieldAsync.__index = yieldAsync

local YieldAsyncEnumerable
YieldAsyncEnumerable = define("System.YieldAsyncEnumerable", function (T)
   return {
    base = { IAsyncEnumerable(T), IAsyncEnumerator(T), IAsyncDisposable },
    __genericT__ = T
  }
end, {
  getCurrent = System.getCurrent, 
  GetAsyncEnumerator = function (this)
    return setmetatable({ f = this.f, args = this.args }, YieldAsyncEnumerable(this.__genericT__))
  end,
  DisposeAsync = function (this)
    return getCompletedTask()
  end,
  MoveNextAsync = function (this)
    local a = this.a
    if a and a.c == nil then
      return fromResult(false)
    end

    local t = newWaitingTask()
    local ok, v, current
    if a == nil then
      local c = ccreate(this.f)
      a = setmetatable({ t = t, c = c, e = this }, yieldAsync)
      this.a = a
      local args = this.args
      ok, v, current = cresume(c, a, unpack(args, 1, args.n))
      this.args = nil
    else
      a.t = t
      ok, v, current = cresume(a.c)
    end
    checkYieldAsync(a, ok, v, current)
    return t
  end
}, 1)

local function yieldIAsyncEnumerable(f, T, ...)
  return setmetatable({ f = f, args = pack(...) }, YieldAsyncEnumerable(T))
end

System.yieldIAsyncEnumerable = yieldIAsyncEnumerable
System.yieldIAsyncEnumerator = yieldIAsyncEnumerable

local function eachFn(en, async)
  if async:await(en:MoveNextAsync()) then
    return async, en:getCurrent()
  end
  return nil
end

local function each(async, t)
  if t == nil then throw(NullReferenceException(), 1) end
  local en = t:GetAsyncEnumerator()
  return eachFn, en, async
end

System.asynceach = each
end

-- CoreSystemLib: Utilities.lua
do
local System = System
local throw = System.throw
local define = System.define
local trunc = System.trunc
local sl = System.sl
local bor = System.bor
local TimeSpan = System.TimeSpan
local ArgumentNullException = System.ArgumentNullException

local select = select
local type = type
local os = os
local clock = os.clock
local tostring = tostring
local collectgarbage = collectgarbage

define("System.Environment", {
  Exit = os.exit,
  getStackTrace = System.traceback,
  getTickCount = function ()
    return System.currentTimeMillis() % 2147483648
  end
})

define("System.GC", {
  Collect = function ()
    collectgarbage("collect")
  end,
  GetTotalMemory = function (forceFullCollection)
    if forceFullCollection then 
      collectgarbage("collect")
    end
    return collectgarbage("count") * 1024
  end
})

local Lazy = {
  created = false,
  __ctor__ = function (this, ...)
    local n = select("#", ...)
    if n == 0 then
    elseif n == 1 then
      local valueFactory = ...
      if valueFactory == nil then
        throw(ArgumentNullException("valueFactory"))
      elseif type(valueFactory) ~= "boolean" then
        this.valueFactory = valueFactory
      end
    elseif n == 2 then
      local valueFactory = ...
      if valueFactory == nil then
        throw(ArgumentNullException("valueFactory"))
      end
      this.valueFactory = valueFactory
    end
  end,
  getIsValueCreated = function (this)
    return this.created
  end,
  getValue = function (this)
    if not this.created then
      local valueFactory = this.valueFactory
      if valueFactory then
        this.value = valueFactory()
        this.valueFactory = nil
      else
        this.value = this.__genericT__()
      end
      this.created = true
    end
    return this.value
  end,
  ToString = function (this)
    if this.created then
      return this.value:ToString()
    end
    return "Value is not created."
  end
}

define("System.Lazy", function (T)
  return { 
    __genericT__ = T 
  }
end, Lazy, 1)

local ticker, frequency
local time = System.config.time
if time then
  ticker = time
  frequency = 10000
else
  ticker = clock
  frequency = 1000
end

local function getRawElapsedSeconds(this)
  local timeElapsed = this.elapsed
  if this.running then
    local currentTimeStamp = ticker()
    local elapsedUntilNow  = currentTimeStamp - this.startTimeStamp
    timeElapsed = timeElapsed + elapsedUntilNow
  end
  return timeElapsed
end

local Stopwatch
Stopwatch = define("System.Diagnostics.Stopwatch", {
  elapsed = 0,
  running = false,
  IsHighResolution = false,
  Frequency = frequency,
  StartNew = function ()
    local t = Stopwatch()
    t:Start()
    return t
  end,
  GetTimestamp = function ()
    return trunc(ticker() * frequency)
  end,
  Start = function (this)
    if not this.running then
      this.startTimeStamp = ticker()
      this.running = true
    end
  end,
  Stop = function (this)
    if this.running then
      local endTimeStamp = ticker()
      local elapsedThisPeriod = endTimeStamp - this.startTimeStamp
      local elapsed = this.elapsed + elapsedThisPeriod
      this.running = false
      if elapsed < 0 then
        -- os.clock may be return negative value
        elapsed = 0
      end
      this.elapsed = elapsed
    end
  end,
  Reset = function (this)
    this.elapsed = 0
    this.running = false
    this.startTimeStamp = 0
  end,
  Restart = function (this)
    this.elapsed = 0
    this.startTimeStamp = ticker()
    this.running = true
  end,
  getIsRunning = function (this)
    return this.running
  end,
  getElapsed = function (this)
    return TimeSpan(trunc(getRawElapsedSeconds(this) * 1e7))
  end,
  getElapsedMilliseconds = function (this)
    return trunc(getRawElapsedSeconds(this) * 1000)
  end,
  getElapsedTicks = function (this)
    return trunc(getRawElapsedSeconds(this) * frequency)
  end
})
System.Stopwatch = Stopwatch

local weaks = setmetatable({}, { __mode = "kv" })

local function setWeakTarget(this, target)
  weaks[this] = target
end

define("System.WeakReference", {
  trackResurrection = false,
  SetTarget = setWeakTarget,
  setTarget = setWeakTarget,
  __ctor__ = function (this, target, trackResurrection)
    if trackResurrection then
      this.trackResurrection = trackResurrection
    end
    weaks[this] = target
  end,
  TryGetTarget = function (this)
    local target = weaks[this]
    return target ~= nil, target
  end,
  getIsAlive = function (this)
    return weaks[this] ~= nil
  end,
  getTrackResurrection = function (this)
    return this.trackResurrection
  end,
  getTarget = function (this)
    return weaks[this]
  end
})

define("System.Guid", {})
define("System.ArraySegment", {})
end

-- CoreSystemLib: Globalization\Globalization.lua
do
local System = System
local emptyFn = System.emptyFn
local define = System.define

define("System.Globalization.NumberFormatInfo", {
  getInvariantInfo = emptyFn,
  getCurrentInfo = emptyFn,
})

define("System.Globalization.CultureInfo", {
  getInvariantCulture = emptyFn,
})

define("System.Globalization.DateTimeFormatInfo", {
  getInvariantInfo = emptyFn,
})
end

-- CoreSystemLib: Numerics\HashCodeHelper.lua
do
local System = System
local bitLShift = System.sl
local bitNot = System.bnot

local HashCodeHelper = {}

function HashCodeHelper.CombineHashCodes(h1, h2)
  return (bitLShift(h1, 5) + h1) * bitNot(h2)
end

System.define("System.Numerics.HashCodeHelper", HashCodeHelper)
end

-- CoreSystemLib: Numerics\Complex.lua
do
-- Compiled from https://github.com/dotnet/corefx/blob/master/src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
-- Generated by CSharp.lua Compiler
-- Licensed to the .NET Foundation under one or more agreements.
-- The .NET Foundation licenses this file to you under the MIT license.
-- See the LICENSE file in the project root for more information.
local System = System

local assert = assert
local type = type
local math = math

-- <summary>
-- A complex number z is a number of the form z = x + yi, where x and y
-- are real numbers, and i is the imaginary unit, with the property i2= -1.
-- </summary>
System.define("System.Numerics.Complex", (function ()
  local Zero, One, ImaginaryOne, NaN, Infinity, s_sqrtRescaleThreshold, s_asinOverflowThreshold, s_log2, 
  getReal, getImaginary, getMagnitude, getPhase, FromPolarCoordinates, Negate, Add, Subtract, 
  Multiply, Divide, Abs, Hypot, Log1P, Conjugate, Reciprocal, op_Equality, EqualsObj, Equals, 
  GetHashCode, ToString, Sin, Sinh, Asin, Cos, Cosh, Acos, 
  Tan, Tanh, Atan, Asin_Internal, IsFinite, IsInfinity, IsNaN, Log, 
  Log10, Exp, Sqrt, Pow, Pow1, Scale, ToComplex, 
  class, static, __ctor__
  static = function (this)
    Zero = class(0.0, 0.0)
    this.Zero = Zero
    One = class(1.0, 0.0)
    this.One = One
    ImaginaryOne = class(0.0, 1.0)
    this.ImaginaryOne = ImaginaryOne
    NaN = class(System.Double.NaN, System.Double.NaN)
    this.NaN = NaN
    Infinity = class(System.Double.PositiveInfinity, System.Double.PositiveInfinity)
    this.Infinity = Infinity
    s_sqrtRescaleThreshold = 1.79769313486232E+308 --[[Double.MaxValue]] / (math.Sqrt(2.0) + 1.0)
    s_asinOverflowThreshold = math.Sqrt(1.79769313486232E+308 --[[Double.MaxValue]]) / 2.0
    s_log2 = math.Log(2.0)
  end
  __ctor__ = function (this, real, imaginary)
    if real == nil then
      return
    end
    this.m_real = real
    this.m_imaginary = imaginary
  end
  getReal = function (this)
    return this.m_real
  end
  getImaginary = function (this)
    return this.m_imaginary
  end
  getMagnitude = function (this)
    return Abs(this)
  end
  getPhase = function (this)
    return math.Atan2(this.m_imaginary, this.m_real)
  end
  FromPolarCoordinates = function (magnitude, phase)
    return class(magnitude * math.Cos(phase), magnitude * math.Sin(phase))
  end
  Negate = function (value)
    return class(- value.m_real, - value.m_imaginary)
  end
  Add = function (left, right)
    if type(left) == "number" then
      return class(left + right.m_real, right.m_imaginary)
    elseif type(right) == "number" then
      return class(left.m_real + right, left.m_imaginary)
    else
      return class(left.m_real + right.m_real, left.m_imaginary + right.m_imaginary)
    end
  end
  Subtract = function (left, right)
    if type(left) == "number" then
      return class(left - right.m_real, - right.m_imaginary)
    elseif type(right) == "number" then
      return class(left.m_real - right, left.m_imaginary)
    else
      return class(left.m_real - right.m_real, left.m_imaginary - right.m_imaginary)
    end
  end
  Multiply = function (left, right)
    if type(left) == "number" then
      if not System.Double.IsFinite(right.m_real) then
        if not System.Double.IsFinite(right.m_imaginary) then
          return class(System.Double.NaN, System.Double.NaN)
        end

        return class(left * right.m_real, System.Double.NaN)
      end

      if not System.Double.IsFinite(right.m_imaginary) then
        return class(System.Double.NaN, left * right.m_imaginary)
      end

      return class(left * right.m_real, left * right.m_imaginary)
    elseif type(right) == "number" then
      if not System.Double.IsFinite(left.m_real) then
        if not System.Double.IsFinite(left.m_imaginary) then
          return class(System.Double.NaN, System.Double.NaN)
        end

        return class(left.m_real * right, System.Double.NaN)
      end

      if not System.Double.IsFinite(left.m_imaginary) then
        return class(System.Double.NaN, left.m_imaginary * right)
      end

      return class(left.m_real * right, left.m_imaginary * right)
    else
      -- Multiplication:  (a + bi)(c + di) = (ac -bd) + (bc + ad)i
      local result_realpart = (left.m_real * right.m_real) - (left.m_imaginary * right.m_imaginary)
      local result_imaginarypart = (left.m_imaginary * right.m_real) + (left.m_real * right.m_imaginary)
      return class(result_realpart, result_imaginarypart)
    end
  end
  Divide = function (left, right)
    if type(left) == "number" then
      -- Division : Smith's formula.
      local a = left
      local c = right.m_real
      local d = right.m_imaginary

      -- Computing c * c + d * d will overflow even in cases where the actual result of the division does not overflow.
      if math.Abs(d) < math.Abs(c) then
        local doc = d / c
        return class(a / (c + d * doc), (- a * doc) / (c + d * doc))
      else
        local cod = c / d
        return class(a * cod / (d + c * cod), - a / (d + c * cod))
      end
    elseif type(right) == "number" then
      -- IEEE prohibit optimizations which are value changing
      -- so we make sure that behaviour for the simplified version exactly match
      -- full version.
      if right == 0 then
        return class(System.Double.NaN, System.Double.NaN)
      end

      if not System.Double.IsFinite(left.m_real) then
        if not System.Double.IsFinite(left.m_imaginary) then
          return class(System.Double.NaN, System.Double.NaN)
        end

        return class(left.m_real / right, System.Double.NaN)
      end

      if not System.Double.IsFinite(left.m_imaginary) then
        return class(System.Double.NaN, left.m_imaginary / right)
      end

      -- Here the actual optimized version of code.
      return class(left.m_real / right, left.m_imaginary / right)
    else
      -- Division : Smith's formula.
      local a = left.m_real
      local b = left.m_imaginary
      local c = right.m_real
      local d = right.m_imaginary

      -- Computing c * c + d * d will overflow even in cases where the actual result of the division does not overflow.
      if math.Abs(d) < math.Abs(c) then
        local doc = d / c
        return class((a + b * doc) / (c + d * doc), (b - a * doc) / (c + d * doc))
      else
        local cod = c / d
        return class((b + a * cod) / (d + c * cod), (- a + b * cod) / (d + c * cod))
      end
    end
  end
  Abs = function (value)
    return Hypot(value.m_real, value.m_imaginary)
  end
  Hypot = function (a, b)
    -- Using
    --   sqrt(a^2 + b^2) = |a| * sqrt(1 + (b/a)^2)
    -- we can factor out the larger component to dodge overflow even when a * a would overflow.

    a = math.Abs(a)
    b = math.Abs(b)

    local small, large
    if a < b then
      small = a
      large = b
    else
      small = b
      large = a
    end

    if small == 0.0 then
      return large
    elseif System.Double.IsPositiveInfinity(large) and not System.Double.IsNaN(small) then
      -- The NaN test is necessary so we don't return +inf when small=NaN and large=+inf.
      -- NaN in any other place returns NaN without any special handling.
      return (System.Double.PositiveInfinity)
    else
      local ratio = small / large
      return (large * math.Sqrt(1.0 + ratio * ratio))
    end
  end
  Log1P = function (x)
    -- Compute log(1 + x) without loss of accuracy when x is small.

    -- Our only use case so far is for positive values, so this isn't coded to handle negative values.
    assert((x >= 0.0) or System.Double.IsNaN(x))

    local xp1 = 1.0 + x
    if xp1 == 1.0 then
      return x
    elseif x < 0.75 then
      -- This is accurate to within 5 ulp with any floating-point system that uses a guard digit,
      -- as proven in Theorem 4 of "What Every Computer Scientist Should Know About Floating-Point
      -- Arithmetic" (https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html)
      return x * math.Log(xp1) / (xp1 - 1.0)
    else
      return math.Log(xp1)
    end
  end
  Conjugate = function (value)
    -- Conjugate of a Complex number: the conjugate of x+i*y is x-i*y
    return class(value.m_real, - value.m_imaginary)
  end
  Reciprocal = function (value)
    -- Reciprocal of a Complex number : the reciprocal of x+i*y is 1/(x+i*y)
    if value.m_real == 0 and value.m_imaginary == 0 then
      return Zero
    end
    return One / value
  end
  op_Equality = function (left, right)
    return left.m_real == right.m_real and left.m_imaginary == right.m_imaginary
  end
  EqualsObj = function (this, obj)
    if not (System.is(obj, class)) then
      return false
    end
    return Equals(this, System.cast(class, obj))
  end
  Equals = function (this, value)
    return this.m_real:Equals(value.m_real) and this.m_imaginary:Equals(value.m_imaginary)
  end
  GetHashCode = function (this)
    local n1 = 99999997
    local realHash = System.mod(this.m_real:GetHashCode(), n1)
    local imaginaryHash = this.m_imaginary:GetHashCode()
    local finalHash = System.xor(realHash, imaginaryHash)
    return finalHash
  end
  ToString = function (this)
    return ("(%s, %s)"):format(this.m_real, this.m_imaginary)
  end
  Sin = function (value)
    -- We need both sinh and cosh of imaginary part. To avoid multiple calls to Math.Exp with the same value,
    -- we compute them both here from a single call to Math.Exp.
    local p = math.Exp(value.m_imaginary)
    local q = 1.0 / p
    local sinh = (p - q) * 0.5
    local cosh = (p + q) * 0.5
    return class(math.Sin(value.m_real) * cosh, math.Cos(value.m_real) * sinh)
    -- There is a known limitation with this algorithm: inputs that cause sinh and cosh to overflow, but for
    -- which sin or cos are small enough that sin * cosh or cos * sinh are still representable, nonetheless
    -- produce overflow. For example, Sin((0.01, 711.0)) should produce (~3.0E306, PositiveInfinity), but
    -- instead produces (PositiveInfinity, PositiveInfinity). 
  end
  Sinh = function (value)
    -- Use sinh(z) = -i sin(iz) to compute via sin(z).
    local sin = Sin(class(- value.m_imaginary, value.m_real))
    return class(sin.m_imaginary, - sin.m_real)
  end
  Asin = function (value)
    local b, bPrime, v
    b, bPrime, v = Asin_Internal(math.Abs(getReal(value)), math.Abs(getImaginary(value)))

    local u
    if bPrime < 0.0 then
      u = math.Asin(b)
    else
      u = math.Atan(bPrime)
    end

    if getReal(value) < 0.0 then
      u = - u
    end
    if getImaginary(value) < 0.0 then
      v = - v
    end

    return class(u, v)
  end
  Cos = function (value)
    local p = math.Exp(value.m_imaginary)
    local q = 1.0 / p
    local sinh = (p - q) * 0.5
    local cosh = (p + q) * 0.5
    return class(math.Cos(value.m_real) * cosh, - math.Sin(value.m_real) * sinh)
  end
  Cosh = function (value)
    -- Use cosh(z) = cos(iz) to compute via cos(z).
    return Cos(class(- value.m_imaginary, value.m_real))
  end
  Acos = function (value)
    local b, bPrime, v
    b, bPrime, v = Asin_Internal(math.Abs(getReal(value)), math.Abs(getImaginary(value)))

    local u
    if bPrime < 0.0 then
      u = math.Acos(b)
    else
      u = math.Atan(1.0 / bPrime)
    end

    if getReal(value) < 0.0 then
      u = 3.14159265358979 --[[Math.PI]] - u
    end
    if getImaginary(value) > 0.0 then
      v = - v
    end

    return class(u, v)
  end
  Tan = function (value)
    -- tan z = sin z / cos z, but to avoid unnecessary repeated trig computations, use
    --   tan z = (sin(2x) + i sinh(2y)) / (cos(2x) + cosh(2y))
    -- (see Abramowitz & Stegun 4.3.57 or derive by hand), and compute trig functions here.

    -- This approach does not work for |y| > ~355, because sinh(2y) and cosh(2y) overflow,
    -- even though their ratio does not. In that case, divide through by cosh to get:
    --   tan z = (sin(2x) / cosh(2y) + i \tanh(2y)) / (1 + cos(2x) / cosh(2y))
    -- which correctly computes the (tiny) real part and the (normal-sized) imaginary part.

    local x2 = 2.0 * value.m_real
    local y2 = 2.0 * value.m_imaginary
    local p = math.Exp(y2)
    local q = 1.0 / p
    local cosh = (p + q) * 0.5
    if math.Abs(value.m_imaginary) <= 4.0 then
      local sinh = (p - q) * 0.5
      local D = math.Cos(x2) + cosh
      return class(math.Sin(x2) / D, sinh / D)
    else
      local D = 1.0 + math.Cos(x2) / cosh
      return class(math.Sin(x2) / cosh / D, math.Tanh(y2) / D)
    end
  end
  Tanh = function (value)
    -- Use tanh(z) = -i tan(iz) to compute via tan(z).
    local tan = Tan(class(- value.m_imaginary, value.m_real))
    return class(tan.m_imaginary, - tan.m_real)
  end
  Atan = function (value)
    local two = class(2.0, 0.0)
    return (ImaginaryOne / two) * (Log(One - (ImaginaryOne * value)) - Log(One + ImaginaryOne * value))
  end
  Asin_Internal = function (x, y, b, bPrime, v)
    -- This method for the inverse complex sine (and cosine) is described in Hull, Fairgrieve,
    -- and Tang, "Implementing the Complex Arcsine and Arccosine Functions Using Exception Handling",
    -- ACM Transactions on Mathematical Software (1997)
    -- (https://www.researchgate.net/profile/Ping_Tang3/publication/220493330_Implementing_the_Complex_Arcsine_and_Arccosine_Functions_Using_Exception_Handling/links/55b244b208ae9289a085245d.pdf)

    -- First, the basics: start with sin(w) = (e^{iw} - e^{-iw}) / (2i) = z. Here z is the input
    -- and w is the output. To solve for w, define t = e^{i w} and multiply through by t to
    -- get the quadratic equation t^2 - 2 i z t - 1 = 0. The solution is t = i z + sqrt(1 - z^2), so
    --   w = arcsin(z) = - i log( i z + sqrt(1 - z^2) )
    -- Decompose z = x + i y, multiply out i z + sqrt(1 - z^2), use log(s) = |s| + i arg(s), and do a
    -- bunch of algebra to get the components of w = arcsin(z) = u + i v
    --   u = arcsin(beta)  v = sign(y) log(alpha + sqrt(alpha^2 - 1))
    -- where
    --   alpha = (rho + sigma) / 2      beta = (rho - sigma) / 2
    --   rho = sqrt((x + 1)^2 + y^2)    sigma = sqrt((x - 1)^2 + y^2)
    -- These formulas appear in DLMF section 4.23. (http://dlmf.nist.gov/4.23), along with the analogous
    --   arccos(w) = arccos(beta) - i sign(y) log(alpha + sqrt(alpha^2 - 1))
    -- So alpha and beta together give us arcsin(w) and arccos(w).

    -- As written, alpha is not susceptible to cancelation errors, but beta is. To avoid cancelation, note
    --   beta = (rho^2 - sigma^2) / (rho + sigma) / 2 = (2 x) / (rho + sigma) = x / alpha
    -- which is not subject to cancelation. Note alpha >= 1 and |beta| <= 1.

    -- For alpha ~ 1, the argument of the log is near unity, so we compute (alpha - 1) instead,
    -- write the argument as 1 + (alpha - 1) + sqrt((alpha - 1)(alpha + 1)), and use the log1p function
    -- to compute the log without loss of accuracy.
    -- For beta ~ 1, arccos does not accurately resolve small angles, so we compute the tangent of the angle
    -- instead.
    -- Hull, Fairgrieve, and Tang derive formulas for (alpha - 1) and beta' = tan(u) that do not suffer
    -- from cancelation in these cases.

    -- For simplicity, we assume all positive inputs and return all positive outputs. The caller should
    -- assign signs appropriate to the desired cut conventions. We return v directly since its magnitude
    -- is the same for both arcsin and arccos. Instead of u, we usually return beta and sometimes beta'.
    -- If beta' is not computed, it is set to -1; if it is computed, it should be used instead of beta
    -- to determine u. Compute u = arcsin(beta) or u = arctan(beta') for arcsin, u = arccos(beta)
    -- or arctan(1/beta') for arccos.

    assert((x >= 0.0) or System.Double.IsNaN(x))
    assert((y >= 0.0) or System.Double.IsNaN(y))

    -- For x or y large enough to overflow alpha^2, we can simplify our formulas and avoid overflow.
    if (x > s_asinOverflowThreshold) or (y > s_asinOverflowThreshold) then
      b = - 1.0
      bPrime = x / y

      local small, big
      if x < y then
        small = x
        big = y
      else
        small = y
        big = x
      end
      local ratio = small / big
      v = s_log2 + math.Log(big) + 0.5 * Log1P(ratio * ratio)
    else
      local r = Hypot((x + 1.0), y)
      local s = Hypot((x - 1.0), y)

      local a = (r + s) * 0.5
      b = x / a

      if b > 0.75 then
        if x <= 1.0 then
          local amx = (y * y / (r + (x + 1.0)) + (s + (1.0 - x))) * 0.5
          bPrime = x / math.Sqrt((a + x) * amx)
        else
          -- In this case, amx ~ y^2. Since we take the square root of amx, we should
          -- pull y out from under the square root so we don't lose its contribution
          -- when y^2 underflows.
          local t = (1.0 / (r + (x + 1.0)) + 1.0 / (s + (x - 1.0))) * 0.5
          bPrime = x / y / math.Sqrt((a + x) * t)
        end
      else
        bPrime = - 1.0
      end

      if a < 1.5 then
        if x < 1.0 then
          -- This is another case where our expression is proportional to y^2 and
          -- we take its square root, so again we pull out a factor of y from
          -- under the square root.
          local t = (1.0 / (r + (x + 1.0)) + 1.0 / (s + (1.0 - x))) * 0.5
          local am1 = y * y * t
          v = Log1P(am1 + y * math.Sqrt(t * (a + 1.0)))
        else
          local am1 = (y * y / (r + (x + 1.0)) + (s + (x - 1.0))) * 0.5
          v = Log1P(am1 + math.Sqrt(am1 * (a + 1.0)))
        end
      else
        -- Because of the test above, we can be sure that a * a will not overflow.
        v = math.Log(a + math.Sqrt((a - 1.0) * (a + 1.0)))
      end
    end
    return b, bPrime, v
  end
  IsFinite = function (value)
    return System.Double.IsFinite(value.m_real) and System.Double.IsFinite(value.m_imaginary)
  end
  IsInfinity = function (value)
    return System.Double.IsInfinity(value.m_real) or System.Double.IsInfinity(value.m_imaginary)
  end
  IsNaN = function (value)
    return not IsInfinity(value) and not IsFinite(value)
  end
  Log = function (value, baseValue)
    if baseValue ~= nil then
      return (Log(value) / Log(ToComplex(baseValue))) 
    end
    return class(math.Log(Abs(value)), math.Atan2(value.m_imaginary, value.m_real))
  end
  Log10 = function (value)
    local tempLog = Log(value)
    return Scale(tempLog, 0.43429448190325 --[[Complex.InverseOfLog10]])
  end
  Exp = function (value)
    local expReal = math.Exp(value.m_real)
    local cosImaginary = expReal * math.Cos(value.m_imaginary)
    local sinImaginary = expReal * math.Sin(value.m_imaginary)
    return class(cosImaginary, sinImaginary)
  end
  Sqrt = function (value)
    local m_real = value.m_real
    local m_imaginary = value.m_imaginary
    if m_imaginary == 0.0 then
      -- Handle the trivial case quickly.
      if m_real < 0.0 then
        return class(0.0, math.Sqrt(- m_real))
      else
        return class(math.Sqrt(m_real), 0.0)
      end
    else
      -- One way to compute Sqrt(z) is just to call Pow(z, 0.5), which coverts to polar coordinates
      -- (sqrt + atan), halves the phase, and reconverts to cartesian coordinates (cos + sin).
      -- Not only is this more expensive than necessary, it also fails to preserve certain expected
      -- symmetries, such as that the square root of a pure negative is a pure imaginary, and that the
      -- square root of a pure imaginary has exactly equal real and imaginary parts. This all goes
      -- back to the fact that Math.PI is not stored with infinite precision, so taking half of Math.PI
      -- does not land us on an argument with cosine exactly equal to zero.

      -- To find a fast and symmetry-respecting formula for complex square root,
      -- note x + i y = \sqrt{a + i b} implies x^2 + 2 i x y - y^2 = a + i b,
      -- so x^2 - y^2 = a and 2 x y = b. Cross-substitute and use the quadratic formula to obtain
      --   x = \sqrt{\frac{\sqrt{a^2 + b^2} + a}{2}}  y = \pm \sqrt{\frac{\sqrt{a^2 + b^2} - a}{2}}
      -- There is just one complication: depending on the sign on a, either x or y suffers from
      -- cancelation when |b| << |a|. We can get aroud this by noting that our formulas imply
      -- x^2 y^2 = b^2 / 4, so |x| |y| = |b| / 2. So after computing the one that doesn't suffer
      -- from cancelation, we can compute the other with just a division. This is basically just
      -- the right way to evaluate the quadratic formula without cancelation.

      -- All this reduces our total cost to two sqrts and a few flops, and it respects the desired
      -- symmetries. Much better than atan + cos + sin!

      -- The signs are a matter of choice of branch cut, which is traditionally taken so x > 0 and sign(y) = sign(b).

      -- If the components are too large, Hypot will overflow, even though the subsequent sqrt would
      -- make the result representable. To avoid this, we re-scale (by exact powers of 2 for accuracy)
      -- when we encounter very large components to avoid intermediate infinities.
      local rescale = false
      if (math.Abs(m_real) >= s_sqrtRescaleThreshold) or (math.Abs(m_imaginary) >= s_sqrtRescaleThreshold) then
        if System.Double.IsInfinity(m_imaginary) and not System.Double.IsNaN(m_real) then
          -- We need to handle infinite imaginary parts specially because otherwise
          -- our formulas below produce inf/inf = NaN. The NaN test is necessary
          -- so that we return NaN rather than (+inf,inf) for (NaN,inf).
          return (class(System.Double.PositiveInfinity, m_imaginary))
        else
          m_real = m_real * 0.25
          m_imaginary = m_imaginary * 0.25
          rescale = true
        end
      end

      -- This is the core of the algorithm. Everything else is special case handling.
      local x, y
      if m_real >= 0.0 then
        x = math.Sqrt((Hypot(m_real, m_imaginary) + m_real) * 0.5)
        y = m_imaginary / (2.0 * x)
      else
        y = math.Sqrt((Hypot(m_real, m_imaginary) - m_real) * 0.5)
        if m_imaginary < 0.0 then
          y = - y
        end
        x = m_imaginary / (2.0 * y)
      end

      if rescale then
        x = x * 2.0
        y = y * 2.0
      end

      return class(x, y)
    end
  end
  Pow = function (value, power)
    if power == Zero then
      return One
    end

    if value == Zero then
      return Zero
    end

    local valueReal = value.m_real
    local valueImaginary = value.m_imaginary
    local powerReal = power.m_real
    local powerImaginary = power.m_imaginary

    local rho = Abs(value)
    local theta = math.Atan2(valueImaginary, valueReal)
    local newRho = powerReal * theta + powerImaginary * math.Log(rho)

    local t = math.Pow(rho, powerReal) * math.Pow(2.71828182845905 --[[Math.E]], - powerImaginary * theta)

    return class(t * math.Cos(newRho), t * math.Sin(newRho))
  end
  Pow1 = function (value, power)
    return Pow(value, class(power, 0))
  end
  Scale = function (value, factor)
    local realResult = factor * value.m_real
    local imaginaryResuilt = factor * value.m_imaginary
    return class(realResult, imaginaryResuilt)
  end
  ToComplex = function (value)
    return class(value, 0.0)
  end
  class = {
    base = function (out, T)
      return {
        System.IEquatable_1(T),
        System.IFormattable
      }
    end,
    m_real = 0,
    m_imaginary = 0,
    getReal = getReal,
    getImaginary = getImaginary,
    getMagnitude = getMagnitude,
    getPhase = getPhase,
    FromPolarCoordinates = FromPolarCoordinates,
    Negate = Negate,
    Add = Add,
    Subtract = Subtract,
    Multiply = Multiply,
    Divide = Divide,
    Abs = Abs,
    Conjugate = Conjugate,
    Reciprocal = Reciprocal,
    EqualsObj = EqualsObj,
    Equals = Equals,
    GetHashCode = GetHashCode,
    ToString = ToString,
    Sin = Sin,
    Sinh = Sinh,
    Asin = Asin,
    Cos = Cos,
    Cosh = Cosh,
    Acos = Acos,
    Tan = Tan,
    Tanh = Tanh,
    Atan = Atan,
    IsFinite = IsFinite,
    IsInfinity = IsInfinity,
    IsNaN = IsNaN,
    Log = Log,
    Log10 = Log10,
    Exp = Exp,
    Sqrt = Sqrt,
    Pow = Pow,
    Pow1 = Pow1,
    ToComplex = ToComplex,
    static = static,
    __ctor__ = __ctor__,
    __add = Add,
    __sub = Subtract,
    __mul = Multiply,
    __div = Divide,
    __unm = Negate,
    __eq = op_Equality
  }
  return class
end)())

end

-- CoreSystemLib: Numerics\Vector2.lua
do
local System = System
local SystemNumerics = System.Numerics

local abs = math.abs
local min = math.min
local max = math.max
local sqrt = math.sqrt

local IComparable = System.IComparable
local IComparable_1 = System.IComparable_1
local IEquatable_1 = System.IEquatable_1
local IFormattable = System.IFormattable

local new = function (cls, ...)
    local this = setmetatable({}, cls)
    return this, cls.__ctor__(this, ...)
end

local Vector2 = {}

Vector2.__ctor__ = function(this, X, Y)
    if Y == nil then
        this.X = X or 0
        this.Y = X or 0
    else
        this.X = X or 0
        this.Y = Y or 0
    end
    local mt = getmetatable(this)
    mt.__unm = Vector2.op_UnaryNegation
    setmetatable(this, mt)
end

Vector2.base = function (_, T)
    return { IComparable, IComparable_1(T), IEquatable_1(T), IFormattable }
end

Vector2.getZero = function ()
    return new(Vector2, 0, 0, 0)
end
Vector2.getOne = function ()
    return new(Vector2, 1.0, 1.0)
end
Vector2.getUnitX = function ()
    return new(Vector2, 1.0, 0.0)
end
Vector2.getUnitY = function ()
    return new(Vector2, 0.0, 1.0)
end

Vector2.CopyTo = function(this, array, index)
    if index == nil then
        index = 0
    end

    if array == nil then
        System.throw(System.NullReferenceException())
    end

    if index < 0 or index >= #array then
        System.throw(System.ArgumentOutOfRangeException())
    end
    if (#array - index) < 2 then
        System.throw(System.ArgumentException())
    end

    array:set(index, this.X)
    array:set(index + 1, this.Y)
end

Vector2.Equals = function (this, other)
    if not (System.is(other, Vector2)) then
        return false
    end
    other = System.cast(Vector2, other)
    return this.X == other.X and this.Y == other.Y
end

Vector2.Dot = function (value1, value2)
    return value1.X * value2.X + value1.Y * value2.Y
end

Vector2.Min = function (value1, value2)
    return new(Vector2, (value1.X < value2.X) and value1.X or value2.X, (value1.Y < value2.Y) and value1.Y or value2.Y)
end

Vector2.Max = function (value1, value2)
    return new(Vector2, (value1.X > value2.X) and value1.X or value2.X, (value1.Y > value2.Y) and value1.Y or value2.Y)
end

Vector2.Abs = function (value)
    return new(Vector2, abs(value.X), abs(value.Y))
end

Vector2.SquareRoot = function (value)
    return new(Vector2, System.ToSingle(sqrt(value.X)), System.ToSingle(sqrt(value.Y)))
end

Vector2.op_Addition = function (left, right)
    return new(Vector2, left.X + right.X, left.Y + right.Y)
end

Vector2.Add = function (left, right)
    return Vector2.op_Addition(left, right)
end

Vector2.op_Subtraction = function (left, right)
    return new(Vector2, left.X - right.X, left.Y - right.Y)
end

Vector2.Subtract = function (left, right)
    return Vector2.op_Subtraction(left, right)
end

Vector2.op_Multiply = function (left, right)
    if type(left) == "number" then
        left = new(Vector2, left)
    end

    if type(right) == "number" then
        right = new(Vector2, right)
    end

    return new(Vector2, left.X * right.X, left.Y * right.Y)
end

Vector2.Multiply = function (left, right)
    return Vector2.op_Multiply(left, right)
end

Vector2.op_Division = function (left, right)
    if type(right) == "number" then
        return Vector2.op_Multiply(left, 1.0 / right)
    end
    return new(Vector2, left.X / right.X, left.Y / right.Y)
end

Vector2.Divide = function (left, right)
    return Vector2.op_Division(left, right)
end

Vector2.op_UnaryNegation = function (value)
    return Vector2.op_Subtraction(Vector2.getZero(), value)
end

Vector2.Negate = function (value)
    return - value
end

Vector2.op_Equality = function (left, right)
    return (left.X == right.X and left.Y == right.Y )
end

Vector2.op_Inequality = function (left, right)
    return (left.X ~= right.X or left.Y ~= right.Y)
end

Vector2.GetHashCode = function (this)
    local hash = this.X:GetHashCode()
    hash = SystemNumerics.HashCodeHelper.CombineHashCodes(hash, this.Y:GetHashCode())
    return hash
end

Vector2.ToString = function (this)
    local sb = System.StringBuilder()
    local separator = 44 --[[',']]
    sb:AppendChar(60 --[['<']])
    sb:Append(this.X:ToString())
    sb:AppendChar(separator)
    sb:AppendChar(32 --[[' ']])
    sb:Append(this.Y:ToString())
    sb:AppendChar(62 --[['>']])
    return sb:ToString()
end

Vector2.Length = function (this)
    local ls = this.X * this.X + this.Y * this.Y
    return System.ToSingle(sqrt(ls))
end

Vector2.LengthSquared = function (this)
    return this.X * this.X + this.Y * this.Y
end

Vector2.Distance = function (value1, value2)
    local dx = value1.X - value2.X
    local dy = value1.Y - value2.Y

    local ls = dx * dx + dy * dy

    return System.ToSingle(sqrt(ls))
end

Vector2.DistanceSquared = function (value1, value2)
    local dx = value1.X - value2.X
    local dy = value1.Y - value2.Y

    return dx * dx + dy * dy
end

Vector2.Normalize = function (value)
    local ls = value.X * value.X + value.Y * value.Y
    local invNorm = 1.0 / System.ToSingle(sqrt(ls))

    return new(Vector2, value.X * invNorm, value.Y * invNorm)
end

Vector2.Reflect = function (vector, normal)
    local dot = vector.X * normal.X + vector.Y * normal.Y

    return new(Vector2, vector.X - 2.0 * dot * normal.X, vector.Y - 2.0 * dot * normal.Y)
end

Vector2.Clamp = function (value1, min, max)
    -- This compare order is very important!!!
    -- We must follow HLSL behavior in the case user specified min value is bigger than max value.
    local x = value1.X
    x = (x > max.X) and max.X or x
    x = (x < min.X) and min.X or x

    local y = value1.Y
    y = (y > max.Y) and max.Y or y
    y = (y < min.Y) and min.Y or y

    return new(Vector2, x, y)
end

Vector2.Lerp = function (value1, value2, amount)
    return new(Vector2, value1.X + (value2.X - value1.X) * amount, value1.Y + (value2.Y - value1.Y) * amount)
end

Vector2.Transform = function (position, matrix)
    if matrix.M41 == nil then
        -- 3x2 matrix
        return new(Vector2, position.X * matrix.M11 + position.Y * matrix.M21 + matrix.M31, 
                            position.X * matrix.M12 + position.Y * matrix.M22 + matrix.M32
                            )
    elseif matrix.X == nil then
        -- 4x4 matrix
        return new(Vector2, position.X * matrix.M11 + position.Y * matrix.M21 + matrix.M41, 
                            position.X * matrix.M12 + position.Y * matrix.M22 + matrix.M42
                            )
    else 
        -- Quaternion
        local x2 = matrix.X + matrix.X
        local y2 = matrix.Y + matrix.Y
        local z2 = matrix.Z + matrix.Z

        local wz2 = matrix.W * z2
        local xx2 = matrix.X * x2
        local xy2 = matrix.X * y2
        local yy2 = matrix.Y * y2
        local zz2 = matrix.Z * z2

        return new(Vector2, position.X * (1.0 - yy2 - zz2) + position.Y * (xy2 - wz2),
                            position.X * (xy2 + wz2) + position.Y * (1.0 - xx2 - zz2)
                                )    
    end
end

Vector2.TransformNormal = function (normal, matrix)
    if matrix.M41 == nil then
        -- 3.2 matirx
        return new(Vector2, normal.X * matrix.M11 + normal.Y * matrix.M21, 
                            normal.X * matrix.M12 + normal.Y * matrix.M22
                                )
    else
        -- 4x4 matrix
        return new(Vector2, normal.X * matrix.M11 + normal.Y * matrix.M21, 
                            normal.X * matrix.M12 + normal.Y * matrix.M22
                                )
    end
 end

System.defStc("System.Numerics.Vector2", Vector2)
end

-- CoreSystemLib: Numerics\Vector3.lua
do
local System = System
local SystemNumerics = System.Numerics

local abs = math.abs
local min = math.min
local max = math.max
local sqrt = math.sqrt

local IComparable = System.IComparable
local IComparable_1 = System.IComparable_1
local IEquatable_1 = System.IEquatable_1
local IFormattable = System.IFormattable

local new = function (cls, ...)
    local this = setmetatable({}, cls)
    return this, cls.__ctor__(this, ...)
end

local Vector3 = {}

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3?view=netframework-4.7.2#constructors
Vector3.__ctor__ = function(this, X, Y, Z)
    if Z == nil then
        -- 1 var constructor
        if Y == nil then
            this.X = X or 0
            this.Y = X or 0
            this.Z = X or 0
        -- 2 var constructor
        else
            this.X = X.X
            this.Y = X.Y
            this.Z = Y or 0
        end
    -- 3 var constructor
    else
        this.X = X or 0
        this.Y = Y or 0
        this.Z = Z or 0
    end
    local mt = getmetatable(this)
    mt.__unm = Vector3.op_UnaryNegation
    setmetatable(this, mt)
end

Vector3.base = function (_, T)
    return { IComparable, IComparable_1(T), IEquatable_1(T), IFormattable }
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3?view=netframework-4.7.2#properties
Vector3.getOne = function() return new(Vector3, 1.0, 1.0, 1.0) end
Vector3.getZero = function() return new(Vector3, 0, 0, 0) end
Vector3.getUnitX = function() return new(Vector3, 1.0, 0.0, 0.0) end
Vector3.getUnitY = function() return new(Vector3, 0.0, 1.0, 0.0) end
Vector3.getUnitZ = function() return new(Vector3, 0.0, 0.0, 1.0) end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.copyto?view=netframework-4.7.2#System_Numerics_Vector3_CopyTo_System_Single___
Vector3.CopyTo = function(this, array, index)
    if index == nil then
        index = 0
    end

    if array == nil then
        System.throw(System.NullReferenceException())
    end

    if index < 0 or index >= #array then
        System.throw(System.ArgumentOutOfRangeException())
    end
    if (#array - index) < 3 then
        System.throw(System.ArgumentException())
    end

    array:set(index, this.X)
    array:set(index + 1, this.Y)
    array:set(index + 2, this.Z)
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.equals?view=netframework-4.7.2#System_Numerics_Vector3_Equals_System_Object_
Vector3.Equals = function(this, other)
    if not (System.is(other, Vector3)) then
        return false
    end
    other = System.cast(Vector3, other)
    return this.X == other.X and this.Y == other.Y and this.Z == other.Z
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.dot?view=netframework-4.7.2#System_Numerics_Vector3_Dot_System_Numerics_Vector3_System_Numerics_Vector3_
Vector3.Dot = function(vector1, vector2)
    return vector1.X * vector2.X + vector1.Y * vector2.Y + vector1.Z * vector2.Z
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.min?view=netframework-4.7.2#System_Numerics_Vector3_Min_System_Numerics_Vector3_System_Numerics_Vector3_
Vector3.Min = function(value1, value2)
    return new(Vector3, (value1.X < value2.X) and value1.X or value2.X, (value1.Y < value2.Y) and value1.Y or value2.Y, (value1.Z < value2.Z) and value1.Z or value2.Z)
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.max?view=netframework-4.7.2#System_Numerics_Vector3_Max_System_Numerics_Vector3_System_Numerics_Vector3_
Vector3.Max = function(value1, value2)
    return new(Vector3, (value1.X > value2.X) and value1.X or value2.X, (value1.Y > value2.Y) and value1.Y or value2.Y, (value1.Z > value2.Z) and value1.Z or value2.Z)
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.abs?view=netframework-4.7.2#System_Numerics_Vector3_Abs_System_Numerics_Vector3_
Vector3.Abs = function(value)
    return new(Vector3, abs(value.X), abs(value.Y), abs(value.Z))
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.squareroot?view=netframework-4.7.2#System_Numerics_Vector3_SquareRoot_System_Numerics_Vector3_
Vector3.SquareRoot = function(value)
    return new(Vector3, System.ToSingle(sqrt(value.X)), System.ToSingle(sqrt(value.Y)), System.ToSingle(sqrt(value.Z)))
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.add?view=netframework-4.7.2#System_Numerics_Vector3_Add_System_Numerics_Vector3_System_Numerics_Vector3_
Vector3.op_Addition = function(left, right)
    return new(Vector3, left.X + right.X, left.Y + right.Y, left.Z + right.Z)
end

Vector3.Add = function(left, right)
    return Vector3.op_Addition(left, right)
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.subtract?view=netframework-4.7.2#System_Numerics_Vector3_Subtract_System_Numerics_Vector3_System_Numerics_Vector3_
Vector3.op_Subtraction = function(left, right)
    return new(Vector3, left.X - right.X, left.Y - right.Y, left.Z - right.Z)
end

Vector3.Subtract = function(left, right)
    return Vector3.op_Subtraction(left, right)
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.multiply?view=netframework-4.7.2#System_Numerics_Vector3_Multiply_System_Single_System_Numerics_Vector3_
Vector3.op_Multiply = function(left, right)
    if type(left) == "number" then
        left = new(Vector3, left)
    end

    if type(right) == "number" then
        right = new(Vector3, right)
    end
    return new(Vector3, left.X * right.X, left.Y * right.Y, left.Z * right.Z)
end

Vector3.Multiply = function(left, right)
    return Vector3.op_Multiply(left, right)
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.divide?view=netframework-4.7.2#System_Numerics_Vector3_Divide_System_Numerics_Vector3_System_Single_
Vector3.op_Division = function(left, right)
    if type(right) == "number" then
        return Vector3.op_Multiply(left, 1.0 / right)
    end
    return new(Vector3, left.X / right.X, left.Y / right.Y, left.Z / right.Z)
end

Vector3.Divide = function(left, right)
    return Vector3.op_Division(left, right)
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.negate?view=netframework-4.7.2#System_Numerics_Vector3_Negate_System_Numerics_Vector3_
Vector3.op_UnaryNegation = function(value)
    return Vector3.op_Subtraction(Vector3.getZero(), value)
end

Vector3.Negate = function(value)
    return - value
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.equals?view=netframework-4.7.2#System_Numerics_Vector3_Equals_System_Numerics_Vector3_
Vector3.op_Equality = function(left, right)
    return (left.X == right.X and left.Y == right.Y and left.Z == right.Z)
end

Vector3.op_Inequality = function(left, right)
    return (left.X ~= right.X or left.Y ~= right.Y or left.Z ~= right.Z)
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.gethashcode?view=netframework-4.7.2#System_Numerics_Vector3_GetHashCode
Vector3.GetHashCode = function(this)
    local hash = this.X:GetHashCode()
    hash = SystemNumerics.HashCodeHelper.CombineHashCodes(hash, this.Y:GetHashCode())
    hash = SystemNumerics.HashCodeHelper.CombineHashCodes(hash, this.Z:GetHashCode())
    return hash
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.tostring?view=netframework-4.7.2#System_Numerics_Vector3_ToString
Vector3.ToString = function(this)
    local sb = System.StringBuilder()
    local separator = 44 --[[',']]
    sb:AppendChar(60 --[['<']])
    sb:Append((this.X):ToString())
    sb:AppendChar(separator)
    sb:AppendChar(32 --[[' ']])
    sb:Append((this.Y):ToString())
    sb:AppendChar(separator)
    sb:AppendChar(32 --[[' ']])
    sb:Append((this.Z):ToString())
    sb:AppendChar(62 --[['>']])
    return sb:ToString()
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.length?view=netframework-4.7.2#System_Numerics_Vector3_Length
Vector3.Length = function(this)
    local ls = this.X * this.X + this.Y * this.Y + this.Z * this.Z
    return System.ToSingle(sqrt(ls))
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.lengthsquared?view=netframework-4.7.2#System_Numerics_Vector3_LengthSquared
Vector3.LengthSquared = function(this)
    return this.X * this.X + this.Y * this.Y + this.Z * this.Z
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.distance?view=netframework-4.7.2#System_Numerics_Vector3_Distance_System_Numerics_Vector3_System_Numerics_Vector3_
Vector3.Distance = function(value1, value2)
    local dx = value1.X - value2.X
    local dy = value1.Y - value2.Y
    local dz = value1.Z - value2.Z

    local ls = dx * dx + dy * dy + dz * dz

    return System.ToSingle(sqrt(ls))
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.distancesquared?view=netframework-4.7.2#System_Numerics_Vector3_DistanceSquared_System_Numerics_Vector3_System_Numerics_Vector3_
Vector3.DistanceSquared = function(value1, value2)
    local dx = value1.X - value2.X
    local dy = value1.Y - value2.Y
    local dz = value1.Z - value2.Z

    return dx * dx + dy * dy + dz * dz
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.normalize?view=netframework-4.7.2#System_Numerics_Vector3_Normalize_System_Numerics_Vector3_
Vector3.Normalize = function(value)
    local ls = value.X * value.X + value.Y * value.Y + value.Z * value.Z
    local length = System.ToSingle(sqrt(ls))
    return new(Vector3, value.X / length, value.Y / length, value.Z / length)
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.cross?view=netframework-4.7.2#System_Numerics_Vector3_Cross_System_Numerics_Vector3_System_Numerics_Vector3_
Vector3.Cross = function(vector1, vector2)
    return new(Vector3, vector1.Y * vector2.Z - vector1.Z * vector2.Y, vector1.Z * vector2.X - vector1.X * vector2.Z, vector1.X * vector2.Y - vector1.Y * vector2.X)
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.reflect?view=netframework-4.7.2#System_Numerics_Vector3_Reflect_System_Numerics_Vector3_System_Numerics_Vector3_
Vector3.Reflect = function(vector, normal)
    local dot = vector.X * normal.X + vector.Y * normal.Y + vector.Z * normal.Z
    local tempX = normal.X * dot * 2
    local tempY = normal.Y * dot * 2
    local tempZ = normal.Z * dot * 2
    return new(Vector3, vector.X - tempX, vector.Y - tempY, vector.Z - tempZ)
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.clamp?view=netframework-4.7.2#System_Numerics_Vector3_Clamp_System_Numerics_Vector3_System_Numerics_Vector3_System_Numerics_Vector3_
Vector3.Clamp = function(value1, min, max)
    local x = value1.X
    x = (x > max.X) and max.X or x
    x = (x < min.X) and min.X or x

    local y = value1.Y
    y = (y > max.Y) and max.Y or y
    y = (y < min.Y) and min.Y or y

    local z = value1.Z
    z = (z > max.Z) and max.Z or z
    z = (z < min.Z) and min.Z or z

    return new(Vector3, x, y, z)
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.lerp?view=netframework-4.7.2#System_Numerics_Vector3_Lerp_System_Numerics_Vector3_System_Numerics_Vector3_System_Single_
Vector3.Lerp = function(value1, value2, amount)
    return new(Vector3, value1.X + (value2.X - value1.X) * amount, value1.Y + (value2.Y - value1.Y) * amount, value1.Z + (value2.Z - value1.Z) * amount)
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.transform?view=netframework-4.7.2#System_Numerics_Vector3_Transform_System_Numerics_Vector3_System_Numerics_Matrix4x4_
-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.transform?view=netframework-4.7.2#System_Numerics_Vector3_Transform_System_Numerics_Vector3_System_Numerics_Quaternion_
Vector3.Transform = function(position, matrix)
    if matrix.X then
        -- quaternion
        local x2 = matrix.X + matrix.X
        local y2 = matrix.Y + matrix.Y
        local z2 = matrix.Z + matrix.Z
  
        local wx2 = matrix.W * x2
        local wy2 = matrix.W * y2
        local wz2 = matrix.W * z2
        local xx2 = matrix.X * x2
        local xy2 = matrix.X * y2
        local xz2 = matrix.X * z2
        local yy2 = matrix.Y * y2
        local yz2 = matrix.Y * z2
        local zz2 = matrix.Z * z2
  
        return new(Vector3, position.X * (1.0 - yy2 - zz2) + position.Y * (xy2 - wz2) + position.Z * (xz2 + wy2), 
                            position.X * (xy2 + wz2) + position.Y * (1.0 - xx2 - zz2) + position.Z * (yz2 - wx2), 
                            position.X * (xz2 - wy2) + position.Y * (yz2 + wx2) + position.Z * (1.0 - xx2 - yy2)
                        )
    else
        -- 4x4 matrix
        return new(Vector3, position.X * matrix.M11 + position.Y * matrix.M21 + position.Z * matrix.M31 + matrix.M41, 
                            position.X * matrix.M12 + position.Y * matrix.M22 + position.Z * matrix.M32 + matrix.M42, 
                            position.X * matrix.M13 + position.Y * matrix.M23 + position.Z * matrix.M33 + matrix.M43
                        ) 
    end 
end

-- https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector3.transformnormal?view=netframework-4.7.2#System_Numerics_Vector3_TransformNormal_System_Numerics_Vector3_System_Numerics_Matrix4x4_
Vector3.TransformNormal = function(normal, matrix)
    return new(Vector3, normal.X * matrix.M11 + normal.Y * matrix.M21 + normal.Z * matrix.M31,
                        normal.X * matrix.M12 + normal.Y * matrix.M22 + normal.Z * matrix.M32, 
                        normal.X * matrix.M13 + normal.Y * matrix.M23 + normal.Z * matrix.M33
                    )
end

System.defStc("System.Numerics.Vector3", Vector3)

end

-- CoreSystemLib: Numerics\Vector4.lua
do
local System = System
local SystemNumerics = System.Numerics

local abs = math.abs
local min = math.min
local max = math.max
local sqrt = math.sqrt

local IComparable = System.IComparable
local IComparable_1 = System.IComparable_1
local IEquatable_1 = System.IEquatable_1
local IFormattable = System.IFormattable

local new = function (cls, ...)
    local this = setmetatable({}, cls)
    return this, cls.__ctor__(this, ...)
end

local Vector4 = {}

Vector4.__ctor__ = function(this, X, Y, Z, W)
    if W == nil then
        if Z == nil then
            -- 1 var constructor
            if Y == nil then
                this.X = X or 0
                this.Y = X or 0
                this.Z = X or 0
                this.W = X or 0
            else
            -- 2 var constructor
                this.X = X.X
                this.Y = X.Y
                this.Z = X.Z
                this.W = Y or 0
            end
        else
        -- 3 var constructor
        this.X = X.X
        this.Y = X.Y
        this.Z = Y or 0
        this.W = Z or 0
        end
    else
    -- 4 var constructor
        this.X = X or 0
        this.Y = Y or 0
        this.Z = Z or 0
        this.W = W or 0
    end
    local mt = getmetatable(this)
    mt.__unm = Vector4.op_UnaryNegation
    setmetatable(this, mt)
end

Vector4.base = function (_, T)
    return { IComparable, IComparable_1(T), IEquatable_1(T), IFormattable }
end

Vector4.getOne = function() return new(Vector4, 1.0, 1.0, 1.0, 1.0) end
Vector4.getZero = function() return new(Vector4, 0, 0, 0, 0) end
Vector4.getUnitX = function() return new(Vector4, 1.0, 0.0, 0.0, 0.0) end
Vector4.getUnitY = function() return new(Vector4, 0.0, 1.0, 0.0, 0.0) end
Vector4.getUnitZ = function() return new(Vector4, 0.0, 0.0, 1.0, 0.0) end
Vector4.getUnitW = function() return new(Vector4, 0.0, 0.0, 0.0, 1.0) end

Vector4.CopyTo = function(this, array, index)
    if index == nil then
        index = 0
    end

    if array == nil then
        System.throw(System.NullReferenceException())
    end

    if index < 0 or index >= #array then
        System.throw(System.ArgumentOutOfRangeException())
    end
    if (#array - index) < 4 then
        System.throw(System.ArgumentException())
    end

    array:set(index, this.X)
    array:set(index + 1, this.Y)
    array:set(index + 2, this.Z)
    array:set(index + 3, this.W)
end

Vector4.Equals = function(this, other)
    if not (System.is(other, Vector4)) then
        return false
    end
    other = System.cast(Vector4, other)
    return this.X == other.X and this.Y == other.Y and this.Z == other.Z and this.W == other.W
end

Vector4.Dot = function(vector1, vector2)
    return vector1.X * vector2.X + vector1.Y * vector2.Y + vector1.Z * vector2.Z + vector1.W * vector2.W
end

Vector4.Min = function(value1, value2)
    return new(Vector4, (value1.X < value2.X) and value1.X or value2.X, (value1.Y < value2.Y) and value1.Y or value2.Y, (value1.Z < value2.Z) and value1.Z or value2.Z, (value1.W < value2.W) and value1.W or value2.W)
end

Vector4.Max = function(value1, value2)
    return new(Vector4, (value1.X > value2.X) and value1.X or value2.X, (value1.Y > value2.Y) and value1.Y or value2.Y, (value1.Z > value2.Z) and value1.Z or value2.Z, (value1.W > value2.W) and value1.W or value2.W)
end

Vector4.Abs = function(value)
    return new(Vector4, abs(value.X), abs(value.Y), abs(value.Z), abs(value.W))
end

Vector4.SquareRoot = function(value)
    return new(Vector4, System.ToSingle(sqrt(value.X)), System.ToSingle(sqrt(value.Y)), System.ToSingle(sqrt(value.Z)), System.ToSingle(sqrt(value.W)))
end

Vector4.op_Addition = function(left, right)
    return new(Vector4, left.X + right.X, left.Y + right.Y, left.Z + right.Z, left.W + right.W)
end

Vector4.Add = function(left, right)
    return Vector4.op_Addition(left, right)
end

Vector4.op_Subtraction = function(left, right)
    return new(Vector4, left.X - right.X, left.Y - right.Y, left.Z - right.Z, left.W - right.W)
end

Vector4.Subtract = function(left, right)
    return Vector4.op_Subtraction(left, right)
end

Vector4.op_Multiply = function(left, right)
    if type(left) == "number" then
        left = new(Vector4, left)
    end

    if type(right) == "number" then
        right = new(Vector4, right)
    end
    return new(Vector4, left.X * right.X, left.Y * right.Y, left.Z * right.Z, left.W * right.W)
end

Vector4.Multiply = function(left, right)
    return Vector4.op_Multiply(left, right)
end

Vector4.op_Division = function(left, right)
    if type(right) == "number" then
        return Vector4.op_Multiply(left, 1.0 / right)
    end
    return new(Vector4, left.X / right.X, left.Y / right.Y, left.Z / right.Z, left.W / right.W)
end

Vector4.Divide = function(left, right)
    return Vector4.op_Division(left, right)
end

Vector4.op_UnaryNegation = function(value)
    return Vector4.op_Subtraction(Vector4.getZero(), value)
end

Vector4.Negate = function(value)
    return - value
end

Vector4.op_Equality = function(left, right)
    return left.X == right.X and left.Y == right.Y and left.Z == right.Z and left.W == right.W
end

Vector4.op_Inequality = function(left, right)
    return not (Vector4.op_Equality(left, right))
end

Vector4.GetHashCode = function(this)
    local hash = this.X:GetHashCode()
    hash = SystemNumerics.HashCodeHelper.CombineHashCodes(hash, this.Y:GetHashCode())
    hash = SystemNumerics.HashCodeHelper.CombineHashCodes(hash, this.Z:GetHashCode())
    hash = SystemNumerics.HashCodeHelper.CombineHashCodes(hash, this.W:GetHashCode())
      
    return hash
end

Vector4.ToString = function(this)
    local sb = System.StringBuilder()
    local separator = 44 --[[',']]
    sb:AppendChar(60 --[['<']])
    sb:Append((this.X):ToString())
    sb:AppendChar(separator)
    sb:AppendChar(32 --[[' ']])
    sb:Append((this.Y):ToString())
    sb:AppendChar(separator)
    sb:AppendChar(32 --[[' ']])
    sb:Append((this.Z):ToString())
    sb:AppendChar(separator)
    sb:AppendChar(32 --[[' ']])
    sb:Append((this.W):ToString())
    sb:AppendChar(62 --[['>']])
    return sb:ToString()
end

Vector4.Length = function(this)
    local ls = this.X * this.X + this.Y * this.Y + this.Z * this.Z + this.W * this.W
    return System.ToSingle(sqrt(ls))
end

Vector4.LengthSquared = function(this)
    return this.X * this.X + this.Y * this.Y + this.Z * this.Z + this.W * this.W
end

Vector4.Distance = function(value1, value2)
    local dx = value1.X - value2.X
    local dy = value1.Y - value2.Y
    local dz = value1.Z - value2.Z
    local dw = value1.W - value2.W

    local ls = dx * dx + dy * dy + dz * dz + dw * dw

    return System.ToSingle(sqrt(ls))
end

Vector4.DistanceSquared = function(value1, value2)
    local dx = value1.X - value2.X
    local dy = value1.Y - value2.Y
    local dz = value1.Z - value2.Z
    local dw = value1.W - value2.W

    return dx * dx + dy * dy + dz * dz + dw * dw
end

Vector4.Normalize = function(vector)
    local ls = vector.X * vector.X + vector.Y * vector.Y + vector.Z * vector.Z + vector.W * vector.W
    local invNorm = 1.0 / System.ToSingle(sqrt(ls))

    return new(Vector4, vector.X * invNorm, vector.Y * invNorm, vector.Z * invNorm, vector.W * invNorm)
end

Vector4.Clamp = function(value1, min, max)
    local x = value1.X
    x = (x > max.X) and max.X or x
    x = (x < min.X) and min.X or x

    local y = value1.Y
    y = (y > max.Y) and max.Y or y
    y = (y < min.Y) and min.Y or y

    local z = value1.Z
    z = (z > max.Z) and max.Z or z
    z = (z < min.Z) and min.Z or z

    local w = value1.W
    w = (w > max.W) and max.W or w
    w = (w < min.W) and min.W or w

    return new(Vector4, x, y, z, w)
end

Vector4.Lerp = function(value1, value2, amount)
    return new(Vector4, value1.X + (value2.X - value1.X) * amount, value1.Y + (value2.Y - value1.Y) * amount, value1.Z + (value2.Z - value1.Z) * amount, value1.W + (value2.W - value1.W) * amount)
end

Vector4.Transform = function(position, matrix)
    if matrix.X == nil then
        -- 4x4 matrix
        if matrix.W == nil then
            if matrix.Z == nil then
                -- vector2
                return new(Vector4, position.X * matrix.M11 + position.Y * matrix.M21 + matrix.M41, 
                                    position.X * matrix.M12 + position.Y * matrix.M22 + matrix.M42,
                                    position.X * matrix.M13 + position.Y * matrix.M23 + matrix.M43, 
                                    position.X * matrix.M14 + position.Y * matrix.M24 + matrix.M44
                                )
            else
                -- vector3
                return new(Vector4, position.X * matrix.M11 + position.Y * matrix.M21 + position.Z * matrix.M31 + matrix.M41, 
                                    position.X * matrix.M12 + position.Y * matrix.M22 + position.Z * matrix.M32 + matrix.M42, 
                                    position.X * matrix.M13 + position.Y * matrix.M23 + position.Z * matrix.M33 + matrix.M43, 
                                    position.X * matrix.M14 + position.Y * matrix.M24 + position.Z * matrix.M34 + matrix.M44
                                )
            end
        else
            -- vector4
            return new(Vector4, position.X * matrix.M11 + position.Y * matrix.M21 + position.Z * matrix.M31 + position.W * matrix.M41, 
                                position.X * matrix.M12 + position.Y * matrix.M22 + position.Z * matrix.M32 + position.W * matrix.M42,
                                position.X * matrix.M13 + position.Y * matrix.M23 + position.Z * matrix.M33 + position.W * matrix.M43, 
                                position.X * matrix.M14 + position.Y * matrix.M24 + position.Z * matrix.M34 + position.W * matrix.M44
                            )
        end
    else
        -- quaternion
        if matrix.W == nil then
            if matrix.Z == nil then
                -- vector2
                local x2 = matrix.X + matrix.X
                local y2 = matrix.Y + matrix.Y
                local z2 = matrix.Z + matrix.Z

                local wx2 = matrix.W * x2
                local wy2 = matrix.W * y2
                local wz2 = matrix.W * z2
                local xx2 = matrix.X * x2
                local xy2 = matrix.X * y2
                local xz2 = matrix.X * z2
                local yy2 = matrix.Y * y2
                local yz2 = matrix.Y * z2
                local zz2 = matrix.Z * z2

                return new(Vector4, position.X * (1.0 - yy2 - zz2) + position.Y * (xy2 - wz2), 
                                    position.X * (xy2 + wz2) + position.Y * (1.0 - xx2 - zz2), 
                                    position.X * (xz2 - wy2) + position.Y * (yz2 + wx2), 
                                    1.0
                                )
            else
                -- vector3
                local x2 = matrix.X + matrix.X
                local y2 = matrix.Y + matrix.Y
                local z2 = matrix.Z + matrix.Z

                local wx2 = matrix.W * x2
                local wy2 = matrix.W * y2
                local wz2 = matrix.W * z2
                local xx2 = matrix.X * x2
                local xy2 = matrix.X * y2
                local xz2 = matrix.X * z2
                local yy2 = matrix.Y * y2
                local yz2 = matrix.Y * z2
                local zz2 = matrix.Z * z2

                return new(Vector4, position.X * (1.0 - yy2 - zz2) + position.Y * (xy2 - wz2) + position.Z * (xz2 + wy2), 
                                    position.X * (xy2 + wz2) + position.Y * (1.0 - xx2 - zz2) + position.Z * (yz2 - wx2), 
                                    position.X * (xz2 - wy2) + position.Y * (yz2 + wx2) + position.Z * (1.0 - xx2 - yy2), 
                                    1.0
                                )
            end
        else
            -- vector4
            local x2 = matrix.X + matrix.X
            local y2 = matrix.Y + matrix.Y
            local z2 = matrix.Z + matrix.Z

            local wx2 = matrix.W * x2
            local wy2 = matrix.W * y2
            local wz2 = matrix.W * z2
            local xx2 = matrix.X * x2
            local xy2 = matrix.X * y2
            local xz2 = matrix.X * z2
            local yy2 = matrix.Y * y2
            local yz2 = matrix.Y * z2
            local zz2 = matrix.Z * z2

            return new(Vector4, position.X * (1.0 - yy2 - zz2) + position.Y * (xy2 - wz2) + position.Z * (xz2 + wy2), 
                                position.X * (xy2 + wz2) + position.Y * (1.0 - xx2 - zz2) + position.Z * (yz2 - wx2), 
                                position.X * (xz2 - wy2) + position.Y * (yz2 + wx2) + position.Z * (1.0 - xx2 - yy2), 
                                position.W
                            )
        end
    end
end

System.defStc("System.Numerics.Vector4", Vector4)

end

-- CoreSystemLib: Numerics\Matrix3x2.lua
do
local System = System
local SystemNumerics = System.Numerics

local tan = math.tan
local cos = math.cos
local sin = math.sin
local abs = math.abs

local IComparable = System.IComparable
local IComparable_1 = System.IComparable_1
local IEquatable_1 = System.IEquatable_1

local new = function (cls, ...)
    local this = setmetatable({}, cls)
    return this, cls.__ctor__(this, ...)
end

local Matrix3x2 = {}

Matrix3x2.__ctor__ = function(this, m11, m12, m21, m22, m31, m32)
    this.M11 = m11 or 0
    this.M12 = m12 or 0
    this.M21 = m21 or 0
    this.M22 = m22 or 0
    this.M31 = m31 or 0
    this.M32 = m32 or 0
    local mt = getmetatable(this)
    mt.__unm = Matrix3x2.op_UnaryNegation
    setmetatable(this, mt)
end

Matrix3x2.base = function (_, T)
    return { IComparable, IComparable_1(T), IEquatable_1(T) }
end

Matrix3x2.getIdentity = function ()
    return new(Matrix3x2, 1, 0, 0, 1, 0, 0)
end

Matrix3x2.getIsIdentity = function (this)
    return this.M11 == 1 and this.M22 == 1 and this.M12 == 0 and this.M21 == 0 and this.M31 == 0 and this.M32 == 0
end

Matrix3x2.getTranslation = function (this)
    return SystemNumerics.Vector2(this.M31, this.M32)
end

Matrix3x2.setTranslation = function (this, value)
    this.M31 = value.X
    this.M32 = value.Y
end

Matrix3x2.CreateTranslation = function (position, yPosition)
    if yPosition == nil then
        -- Vector2
        local result = new(Matrix3x2)

        result.M11 = 1.0
        result.M12 = 0.0
        result.M21 = 0.0
        result.M22 = 1.0

        result.M31 = position.X
        result.M32 = position.Y

        return result:__clone__()
    else
        -- singles
        local result = new(Matrix3x2)

        result.M11 = 1.0
        result.M12 = 0.0
        result.M21 = 0.0
        result.M22 = 1.0
  
        result.M31 = position
        result.M32 = yPosition
  
        return result:__clone__()
    end
end

Matrix3x2.CreateScale = function(val1, val2, val3)
    if val3 == nil then
        if val2 == nil then
            if val1.X == nil then
                -- CreateScale(Single)
                local result = new(Matrix3x2)

                result.M11 = val1
                result.M12 = 0.0
                result.M21 = 0.0
                result.M22 = val1
                result.M31 = 0.0
                result.M32 = 0.0
          
                return result:__clone__()
            else
                -- CreateScale(Vector2)
                local result = new(Matrix3x2)

                result.M11 = val1.X
                result.M12 = 0.0
                result.M21 = 0.0
                result.M22 = val1.Y
                result.M31 = 0.0
                result.M32 = 0.0

                return result:__clone__()
            end
        else
            if val2.X == nil then
                -- CreateScale(Single, Single)
                local result = new(Matrix3x2)

                result.M11 = val1
                result.M12 = 0.0
                result.M21 = 0.0
                result.M22 = val2
                result.M31 = 0.0
                result.M32 = 0.0

                return result:__clone__()
            else
                if val1.X == nil then
                    -- CreateScale(Single, Vector2)
                    local result = new(Matrix3x2)

                    local tx = val2.X * (1 - val1)
                    local ty = val2.Y * (1 - val1)

                    result.M11 = val1
                    result.M12 = 0.0
                    result.M21 = 0.0
                    result.M22 = val1
                    result.M31 = tx
                    result.M32 = ty

                    return result:__clone__()
                else
                    -- CreateScale(Vector2, Vector2)
                    local result = new(Matrix3x2)

                    local tx = val2.X * (1 - val1.X)
                    local ty = val2.Y * (1 - val1.Y)

                    result.M11 = val1.X
                    result.M12 = 0.0
                    result.M21 = 0.0
                    result.M22 = val1.Y
                    result.M31 = tx
                    result.M32 = ty

                    return result:__clone__()
                end
            end
        end
    else
        -- CreateScale(Single, Single, Vector2)
        local result = new(Matrix3x2)

        local tx = val3.X * (1 - val1)
        local ty = val3.Y * (1 - val2)

        result.M11 = val1
        result.M12 = 0.0
        result.M21 = 0.0
        result.M22 = val2
        result.M31 = tx
        result.M32 = ty

        return result:__clone__()
    end
end

Matrix3x2.CreateSkew = function (radiansX, radiansY, centerPoint)
    if centerPoint == nil then

        local result = new(Matrix3x2)

        local xTan = System.ToSingle(tan(radiansX))
        local yTan = System.ToSingle(tan(radiansY))

        result.M11 = 1.0
        result.M12 = yTan
        result.M21 = xTan
        result.M22 = 1.0
        result.M31 = 0.0
        result.M32 = 0.0

        return result:__clone__()
    else
        local result = new(Matrix3x2)

        local xTan = System.ToSingle(tan(radiansX))
        local yTan = System.ToSingle(tan(radiansY))

        local tx = - centerPoint.Y * xTan
        local ty = - centerPoint.X * yTan

        result.M11 = 1.0
        result.M12 = yTan
        result.M21 = xTan
        result.M22 = 1.0
        result.M31 = tx
        result.M32 = ty

        return result:__clone__()
    end
end

Matrix3x2.CreateRotation = function (radians, centerPoint)
    if centerPoint == nil then

        local result = new(Matrix3x2)

        radians = System.ToSingle(math.IEEERemainder(radians, 6.28318530717959 --[[Math.PI * 2]]))

        local c, s

        -- 0.1% of a degree

        if radians > - 1.745329E-05 --[[epsilon]] and radians < 1.745329E-05 --[[epsilon]] then
            -- Exact case for zero rotation.
            c = 1
            s = 0
        elseif radians > 1.57077887350062 --[[Math.PI / 2 - epsilon]] and radians < 1.57081378008917 --[[Math.PI / 2 + epsilon]] then
            -- Exact case for 90 degree rotation.
            c = 0
            s = 1
        elseif radians < -3.14157520029552 --[[-Math.PI + epsilon]] or radians > 3.14157520029552 --[[Math.PI - epsilon]] then
            -- Exact case for 180 degree rotation.
            c = - 1
            s = 0
        elseif radians > -1.57081378008917 --[[-Math.PI / 2 - epsilon]] and radians < -1.57077887350062 --[[-Math.PI / 2 + epsilon]] then
            -- Exact case for 270 degree rotation.
            c = 0
            s = - 1
        else
            -- Arbitrary rotation.
            c = System.ToSingle(cos(radians))
            s = System.ToSingle(sin(radians))
        end

        -- [  c  s ]
        -- [ -s  c ]
        -- [  0  0 ]
        result.M11 = c
        result.M12 = s
        result.M21 = - s
        result.M22 = c
        result.M31 = 0.0
        result.M32 = 0.0

        return result:__clone__()
    else
        local result = new(Matrix3x2)

        radians = System.ToSingle(math.IEEERemainder(radians, 6.28318530717959 --[[Math.PI * 2]]))
  
        local c, s
  
        -- 0.1% of a degree
  
        if radians > - 1.745329E-05 --[[epsilon]] and radians < 1.745329E-05 --[[epsilon]] then
          -- Exact case for zero rotation.
          c = 1
          s = 0
        elseif radians > 1.57077887350062 --[[Math.PI / 2 - epsilon]] and radians < 1.57081378008917 --[[Math.PI / 2 + epsilon]] then
          -- Exact case for 90 degree rotation.
          c = 0
          s = 1
        elseif radians < -3.14157520029552 --[[-Math.PI + epsilon]] or radians > 3.14157520029552 --[[Math.PI - epsilon]] then
          -- Exact case for 180 degree rotation.
          c = - 1
          s = 0
        elseif radians > -1.57081378008917 --[[-Math.PI / 2 - epsilon]] and radians < -1.57077887350062 --[[-Math.PI / 2 + epsilon]] then
          -- Exact case for 270 degree rotation.
          c = 0
          s = - 1
        else
          -- Arbitrary rotation.
          c = System.ToSingle(cos(radians))
          s = System.ToSingle(sin(radians))
        end
  
        local x = centerPoint.X * (1 - c) + centerPoint.Y * s
        local y = centerPoint.Y * (1 - c) - centerPoint.X * s
  
        -- [  c  s ]
        -- [ -s  c ]
        -- [  x  y ]
        result.M11 = c
        result.M12 = s
        result.M21 = - s
        result.M22 = c
        result.M31 = x
        result.M32 = y
  
        return result:__clone__()
    end
end

Matrix3x2.GetDeterminant = function (this)
    -- There isn't actually any such thing as a determinant for a non-square matrix,
    -- but this 3x2 type is really just an optimization of a 3x3 where we happen to
    -- know the rightmost column is always (0, 0, 1). So we expand to 3x3 format:
    --
    --  [ M11, M12, 0 ]
    --  [ M21, M22, 0 ]
    --  [ M31, M32, 1 ]
    --
    -- Sum the diagonal products:
    --  (M11 * M22 * 1) + (M12 * 0 * M31) + (0 * M21 * M32)
    --
    -- Subtract the opposite diagonal products:
    --  (M31 * M22 * 0) + (M32 * 0 * M11) + (1 * M21 * M12)
    --
    -- Collapse out the constants and oh look, this is just a 2x2 determinant!

    return (this.M11 * this.M22) - (this.M21 * this.M12)
end

Matrix3x2.Invert = function (matrix, result)
    local det = (matrix.M11 * matrix.M22) - (matrix.M21 * matrix.M12)

    if result == nil then
        result = new(Matrix3x2)
    end

    if abs(det) < 1.401298E-45 --[[Single.Epsilon]] then
      result = new(Matrix3x2, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN)
      return false, result
    end

    local invDet = 1.0 / det

    result.M11 = matrix.M22 * invDet
    result.M12 = - matrix.M12 * invDet
    result.M21 = - matrix.M21 * invDet
    result.M22 = matrix.M11 * invDet
    result.M31 = (matrix.M21 * matrix.M32 - matrix.M31 * matrix.M22) * invDet
    result.M32 = (matrix.M31 * matrix.M12 - matrix.M11 * matrix.M32) * invDet

    return true, result
end

Matrix3x2.Lerp = function (matrix1, matrix2, amount)
    local result = new(Matrix3x2)

    -- First row
    result.M11 = matrix1.M11 + (matrix2.M11 - matrix1.M11) * amount
    result.M12 = matrix1.M12 + (matrix2.M12 - matrix1.M12) * amount

    -- Second row
    result.M21 = matrix1.M21 + (matrix2.M21 - matrix1.M21) * amount
    result.M22 = matrix1.M22 + (matrix2.M22 - matrix1.M22) * amount

    -- Third row
    result.M31 = matrix1.M31 + (matrix2.M31 - matrix1.M31) * amount
    result.M32 = matrix1.M32 + (matrix2.M32 - matrix1.M32) * amount

    return result:__clone__()
end

Matrix3x2.Negate = function (value)
    local result = new(Matrix3x2)

    result.M11 = - value.M11
    result.M12 = - value.M12
    result.M21 = - value.M21
    result.M22 = - value.M22
    result.M31 = - value.M31
    result.M32 = - value.M32

    return result:__clone__()
end

Matrix3x2.Add = function (value1, value2)
    local result = new(Matrix3x2)

    result.M11 = value1.M11 + value2.M11
    result.M12 = value1.M12 + value2.M12
    result.M21 = value1.M21 + value2.M21
    result.M22 = value1.M22 + value2.M22
    result.M31 = value1.M31 + value2.M31
    result.M32 = value1.M32 + value2.M32

    return result:__clone__()
end

Matrix3x2.Subtract = function (value1, value2)
    local result = new(Matrix3x2)

    result.M11 = value1.M11 - value2.M11
    result.M12 = value1.M12 - value2.M12
    result.M21 = value1.M21 - value2.M21
    result.M22 = value1.M22 - value2.M22
    result.M31 = value1.M31 - value2.M31
    result.M32 = value1.M32 - value2.M32

    return result:__clone__()
end

Matrix3x2.Multiply = function (value1, value2)
    if value2.M11 == nil then
        -- scalar
        local result = new(Matrix3x2)

        result.M11 = value1.M11 * value2
        result.M12 = value1.M12 * value2
        result.M21 = value1.M21 * value2
        result.M22 = value1.M22 * value2
        result.M31 = value1.M31 * value2
        result.M32 = value1.M32 * value2

        return result:__clone__()
    else
        -- matrix
        local result = new(Matrix3x2)

        -- First row
        result.M11 = value1.M11 * value2.M11 + value1.M12 * value2.M21
        result.M12 = value1.M11 * value2.M12 + value1.M12 * value2.M22

        -- Second row
        result.M21 = value1.M21 * value2.M11 + value1.M22 * value2.M21
        result.M22 = value1.M21 * value2.M12 + value1.M22 * value2.M22

        -- Third row
        result.M31 = value1.M31 * value2.M11 + value1.M32 * value2.M21 + value2.M31
        result.M32 = value1.M31 * value2.M12 + value1.M32 * value2.M22 + value2.M32

        return result:__clone__()
    end
end

Matrix3x2.op_UnaryNegation = function (value)
    local m = new(Matrix3x2)

    m.M11 = - value.M11
    m.M12 = - value.M12
    m.M21 = - value.M21
    m.M22 = - value.M22
    m.M31 = - value.M31
    m.M32 = - value.M32

    return m:__clone__()
end

Matrix3x2.op_Addition = function (value1, value2)
    local m = new(Matrix3x2)

    m.M11 = value1.M11 + value2.M11
    m.M12 = value1.M12 + value2.M12
    m.M21 = value1.M21 + value2.M21
    m.M22 = value1.M22 + value2.M22
    m.M31 = value1.M31 + value2.M31
    m.M32 = value1.M32 + value2.M32

    return m:__clone__()
end

Matrix3x2.op_Subtraction = function (value1, value2)
    local m = new(Matrix3x2)

    m.M11 = value1.M11 - value2.M11
    m.M12 = value1.M12 - value2.M12
    m.M21 = value1.M21 - value2.M21
    m.M22 = value1.M22 - value2.M22
    m.M31 = value1.M31 - value2.M31
    m.M32 = value1.M32 - value2.M32

    return m:__clone__()
end

Matrix3x2.op_Multiply = function (value1, value2)
    if value2.M11 == nil then
        -- scalar
        local result = new(Matrix3x2)

        result.M11 = value1.M11 * value2
        result.M12 = value1.M12 * value2
        result.M21 = value1.M21 * value2
        result.M22 = value1.M22 * value2
        result.M31 = value1.M31 * value2
        result.M32 = value1.M32 * value2

        return result:__clone__()
    else
        -- matrix
        local result = new(Matrix3x2)

        -- First row
        result.M11 = value1.M11 * value2.M11 + value1.M12 * value2.M21
        result.M12 = value1.M11 * value2.M12 + value1.M12 * value2.M22

        -- Second row
        result.M21 = value1.M21 * value2.M11 + value1.M22 * value2.M21
        result.M22 = value1.M21 * value2.M12 + value1.M22 * value2.M22

        -- Third row
        result.M31 = value1.M31 * value2.M11 + value1.M32 * value2.M21 + value2.M31
        result.M32 = value1.M31 * value2.M12 + value1.M32 * value2.M22 + value2.M32

        return result:__clone__()
    end
end

Matrix3x2.op_Equality = function (value1, value2)
    return (value1.M11 == value2.M11 and value1.M22 == value2.M22 and value1.M12 == value2.M12 and value1.M21 == value2.M21 and value1.M31 == value2.M31 and value1.M32 == value2.M32)
end

Matrix3x2.op_Inequality = function (value1, value2)
    return (value1.M11 ~= value2.M11 or value1.M12 ~= value2.M12 or value1.M21 ~= value2.M21 or value1.M22 ~= value2.M22 or value1.M31 ~= value2.M31 or value1.M32 ~= value2.M32)
end

Matrix3x2.Equals = function (this, other)
    if System.is(other, Matrix3x2) then
        return (this.M11 == other.M11 and this.M22 == other.M22 and this.M12 == other.M12 and this.M21 == other.M21 and this.M31 == other.M31 and this.M32 == other.M32)
    end
    return false
end

Matrix3x2.ToString = function (this)
    local sb = System.StringBuilder()
    sb:Append("{ ")
    sb:Append("{")
    sb:Append("M11: ")
    sb:Append(this.M11:ToString())
    sb:Append(" M12: ")
    sb:Append(this.M12:ToString())
    sb:Append("} ")
    sb:Append("{")
    sb:Append("M21: ")
    sb:Append(this.M21:ToString())
    sb:Append(" M22: ")
    sb:Append(this.M22:ToString())
    sb:Append("} ")
    sb:Append("{")
    sb:Append("M31: ")
    sb:Append(this.M31:ToString())
    sb:Append(" M32: ")
    sb:Append(this.M32:ToString())
    sb:Append("} ")
    sb:Append("}")
    return sb:ToString()
end

Matrix3x2.GetHashCode = function (this)
    return this.M11:GetHashCode() + this.M12:GetHashCode() + this.M21:GetHashCode() + this.M22:GetHashCode() + this.M31:GetHashCode() + this.M32:GetHashCode()
end

System.defStc("System.Numerics.Matrix3x2", Matrix3x2)
end

-- CoreSystemLib: Numerics\Matrix4x4.lua
do
local System = System
local SystemNumerics = System.Numerics

local sqrt = math.sqrt
local abs = math.abs
local tan = math.tan
local cos = math.cos
local sin = math.sin

local IComparable = System.IComparable
local IComparable_1 = System.IComparable_1
local IEquatable_1 = System.IEquatable_1

local new = function (cls, ...)
    local this = setmetatable({}, cls)
    return this, cls.__ctor__(this, ...)
end

local Matrix4x4 = {}

Matrix4x4.__ctor__ = function (this, m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44)
    if m11 == nil then
        this.M11 = 0
        this.M12 = 0
        this.M13 = 0
        this.M14 = 0

        this.M21 = 0
        this.M22 = 0
        this.M23 = 0
        this.M24 = 0

        this.M31 = 0
        this.M32 = 0
        this.M33 = 0
        this.M34 = 0

        this.M41 = 0
        this.M42 = 0
        this.M43 = 0
        this.M44 = 0
    elseif m11.M11 == nil then
        -- from singles
        this.M11 = m11 or 0
        this.M12 = m12 or 0
        this.M13 = m13 or 0
        this.M14 = m14 or 0

        this.M21 = m21 or 0
        this.M22 = m22 or 0
        this.M23 = m23 or 0
        this.M24 = m24 or 0

        this.M31 = m31 or 0
        this.M32 = m32 or 0
        this.M33 = m33 or 0
        this.M34 = m34 or 0

        this.M41 = m41 or 0
        this.M42 = m42 or 0
        this.M43 = m43 or 0
        this.M44 = m44 or 0
    else
        -- from matrix
        this.M11 = m11.M11
        this.M12 = m11.M12
        this.M13 = 0
        this.M14 = 0
        this.M21 = m11.M21
        this.M22 = m11.M22
        this.M23 = 0
        this.M24 = 0
        this.M31 = 0
        this.M32 = 0
        this.M33 = 1
        this.M34 = 0
        this.M41 = m11.M31
        this.M42 = m11.M32
        this.M43 = 0
        this.M44 = 1
    end 
    local mt = getmetatable(this)
    mt.__unm = Matrix4x4.op_UnaryNegation
    setmetatable(this, mt)   
  end

Matrix4x4.base = function (_, T)
    return { IComparable, IComparable_1(T), IEquatable_1(T) }
end

Matrix4x4.getIdentity = function ()
    return new(Matrix4x4, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
end

Matrix4x4.getIsIdentity = function (this)
    return this.M11 == 1 and this.M22 == 1 and this.M33 == 1 and this.M44 == 1 and this.M12 == 0 and this.M13 == 0 and this.M14 == 0 and this.M21 == 0 and this.M23 == 0 and this.M24 == 0 and this.M31 == 0 and this.M32 == 0 and this.M34 == 0 and this.M41 == 0 and this.M42 == 0 and this.M43 == 0
end

Matrix4x4.getTranslation = function (this)
    return SystemNumerics.Vector3(this.M41, this.M42, this.M43)
end
  
Matrix4x4.setTranslation = function (this, value)
    this.M41 = value.X
    this.M42 = value.Y
    this.M43 = value.Z
end

Matrix4x4.CreateBillboard = function (objectPosition, cameraPosition, cameraUpVector, cameraForwardVector)

    local zaxis = SystemNumerics.Vector3(objectPosition.X - cameraPosition.X, objectPosition.Y - cameraPosition.Y, objectPosition.Z - cameraPosition.Z)

    local norm = zaxis:LengthSquared()

    if norm < 0.0001 --[[epsilon]] then
      zaxis = - cameraForwardVector
    else
      zaxis = SystemNumerics.Vector3.Multiply(zaxis, 1.0 / System.ToSingle(sqrt(norm)))
    end

    local xaxis = SystemNumerics.Vector3.Normalize(SystemNumerics.Vector3.Cross(cameraUpVector, zaxis))

    local yaxis = SystemNumerics.Vector3.Cross(zaxis, xaxis)

    local result = new(Matrix4x4)

    result.M11 = xaxis.X
    result.M12 = xaxis.Y
    result.M13 = xaxis.Z
    result.M14 = 0.0
    result.M21 = yaxis.X
    result.M22 = yaxis.Y
    result.M23 = yaxis.Z
    result.M24 = 0.0
    result.M31 = zaxis.X
    result.M32 = zaxis.Y
    result.M33 = zaxis.Z
    result.M34 = 0.0

    result.M41 = objectPosition.X
    result.M42 = objectPosition.Y
    result.M43 = objectPosition.Z
    result.M44 = 1.0

    return result:__clone__()
end

Matrix4x4.CreateConstrainedBillboard = function (objectPosition, cameraPosition, rotateAxis, cameraForwardVector, objectForwardVector)
    -- 0.1 degrees

    -- Treat the case when object and camera positions are too close.
    local faceDir = SystemNumerics.Vector3(objectPosition.X - cameraPosition.X, objectPosition.Y - cameraPosition.Y, objectPosition.Z - cameraPosition.Z)

    local norm = faceDir:LengthSquared()

    if norm < 0.0001 --[[epsilon]] then
      faceDir = - cameraForwardVector
    else
      faceDir = SystemNumerics.Vector3.Multiply(faceDir, (1.0 / System.ToSingle(sqrt(norm))))
    end

    local yaxis = rotateAxis:__clone__()
    local xaxis
    local zaxis

    -- Treat the case when angle between faceDir and rotateAxis is too close to 0.
    local dot = SystemNumerics.Vector3.Dot(rotateAxis, faceDir)

    if abs(dot) > 0.9982547 --[[minAngle]] then
      zaxis = objectForwardVector:__clone__()

      -- Make sure passed values are useful for compute.
      dot = SystemNumerics.Vector3.Dot(rotateAxis, zaxis)

      if abs(dot) > 0.9982547 --[[minAngle]] then
        zaxis = (abs(rotateAxis.Z) > 0.9982547 --[[minAngle]]) and SystemNumerics.Vector3(1, 0, 0) or SystemNumerics.Vector3(0, 0, - 1)
      end

      xaxis = SystemNumerics.Vector3.Normalize(SystemNumerics.Vector3.Cross(rotateAxis, zaxis))
      zaxis = SystemNumerics.Vector3.Normalize(SystemNumerics.Vector3.Cross(xaxis, rotateAxis))
    else
      xaxis = SystemNumerics.Vector3.Normalize(SystemNumerics.Vector3.Cross(rotateAxis, faceDir))
      zaxis = SystemNumerics.Vector3.Normalize(SystemNumerics.Vector3.Cross(xaxis, yaxis))
    end

    local result = new(Matrix4x4)

    result.M11 = xaxis.X
    result.M12 = xaxis.Y
    result.M13 = xaxis.Z
    result.M14 = 0.0
    result.M21 = yaxis.X
    result.M22 = yaxis.Y
    result.M23 = yaxis.Z
    result.M24 = 0.0
    result.M31 = zaxis.X
    result.M32 = zaxis.Y
    result.M33 = zaxis.Z
    result.M34 = 0.0

    result.M41 = objectPosition.X
    result.M42 = objectPosition.Y
    result.M43 = objectPosition.Z
    result.M44 = 1.0

    return result:__clone__()
end

Matrix4x4.CreateTranslation = function (position, yPosition, zPosition)
    local result = new(Matrix4x4)

    result.M11 = 1.0
    result.M12 = 0.0
    result.M13 = 0.0
    result.M14 = 0.0
    result.M21 = 0.0
    result.M22 = 1.0
    result.M23 = 0.0
    result.M24 = 0.0
    result.M31 = 0.0
    result.M32 = 0.0
    result.M33 = 1.0
    result.M34 = 0.0

    if yPosition ~= nil then
        position = SystemNumerics.Vector3(position, yPosition, zPosition)
    end

    result.M41 = position.X
    result.M42 = position.Y
    result.M43 = position.Z
    result.M44 = 1.0

    return result:__clone__()
end

Matrix4x4.CreateScale = function(val1, val2, val3, val4)
    if val4 == nil then
        if val3 == nil then
            if val2 == nil then
                if val1.X == nil then
                    -- CreateScale(Single)
                    local result = new(Matrix4x4)

                    result.M11 = val1
                    result.M12 = 0.0
                    result.M13 = 0.0
                    result.M14 = 0.0
                    result.M21 = 0.0
                    result.M22 = val1
                    result.M23 = 0.0
                    result.M24 = 0.0
                    result.M31 = 0.0
                    result.M32 = 0.0
                    result.M33 = val1
                    result.M34 = 0.0
                    result.M41 = 0.0
                    result.M42 = 0.0
                    result.M43 = 0.0
                    result.M44 = 1.0

                    return result:__clone__()
                else
                    -- CreateScale(Vector3)
                    local result = new(Matrix4x4)

                    result.M11 = val1.X
                    result.M12 = 0.0
                    result.M13 = 0.0
                    result.M14 = 0.0
                    result.M21 = 0.0
                    result.M22 = val1.Y
                    result.M23 = 0.0
                    result.M24 = 0.0
                    result.M31 = 0.0
                    result.M32 = 0.0
                    result.M33 = val1.Z
                    result.M34 = 0.0
                    result.M41 = 0.0
                    result.M42 = 0.0
                    result.M43 = 0.0
                    result.M44 = 1.0

                    return result:__clone__()
                end
            else
                if val1.X == nil then
                    -- CreateScale(Single, Vector3)
                    local result = new(Matrix4x4)

                    local tx = val2.X * (1 - val1)
                    local ty = val2.Y * (1 - val1)
                    local tz = val2.Z * (1 - val1)

                    result.M11 = val1
                    result.M12 = 0.0
                    result.M13 = 0.0
                    result.M14 = 0.0
                    result.M21 = 0.0
                    result.M22 = val1
                    result.M23 = 0.0
                    result.M24 = 0.0
                    result.M31 = 0.0
                    result.M32 = 0.0
                    result.M33 = val1
                    result.M34 = 0.0
                    result.M41 = tx
                    result.M42 = ty
                    result.M43 = tz
                    result.M44 = 1.0

                    return result:__clone__()
                else
                    -- CreateScale(Vector3, Vector3)
                    local result = new(Matrix4x4)

                    local tx = val2.X * (1 - val1.X)
                    local ty = val2.Y * (1 - val1.Y)
                    local tz = val2.Z * (1 - val1.Z)

                    result.M11 = val1.X
                    result.M12 = 0.0
                    result.M13 = 0.0
                    result.M14 = 0.0
                    result.M21 = 0.0
                    result.M22 = val1.Y
                    result.M23 = 0.0
                    result.M24 = 0.0
                    result.M31 = 0.0
                    result.M32 = 0.0
                    result.M33 = val1.Z
                    result.M34 = 0.0
                    result.M41 = tx
                    result.M42 = ty
                    result.M43 = tz
                    result.M44 = 1.0

                    return result:__clone__()
                end
            end
        else
            -- CreateScale(Single, Single, Single)
            local result = new(Matrix4x4)

            result.M11 = val1
            result.M12 = 0.0
            result.M13 = 0.0
            result.M14 = 0.0
            result.M21 = 0.0
            result.M22 = val2
            result.M23 = 0.0
            result.M24 = 0.0
            result.M31 = 0.0
            result.M32 = 0.0
            result.M33 = val3
            result.M34 = 0.0
            result.M41 = 0.0
            result.M42 = 0.0
            result.M43 = 0.0
            result.M44 = 1.0

            return result:__clone__()
        end
    else
        -- CreateScale(Single, Single, Single, Vector3)
        local result = new(Matrix4x4)

        local tx = val4.X * (1 - val1)
        local ty = val4.Y * (1 - val2)
        local tz = val4.Z * (1 - val3)

        result.M11 = val1
        result.M12 = 0.0
        result.M13 = 0.0
        result.M14 = 0.0
        result.M21 = 0.0
        result.M22 = val2
        result.M23 = 0.0
        result.M24 = 0.0
        result.M31 = 0.0
        result.M32 = 0.0
        result.M33 = val3
        result.M34 = 0.0
        result.M41 = tx
        result.M42 = ty
        result.M43 = tz
        result.M44 = 1.0

        return result:__clone__()
    end
end

Matrix4x4.CreateRotationX = function (radians, centerPoint)

    if centerPoint == nil then
        local result = new(Matrix4x4)

        local c = System.ToSingle(cos(radians))
        local s = System.ToSingle(sin(radians))
    
        -- [  1  0  0  0 ]
        -- [  0  c  s  0 ]
        -- [  0 -s  c  0 ]
        -- [  0  0  0  1 ]
        result.M11 = 1.0
        result.M12 = 0.0
        result.M13 = 0.0
        result.M14 = 0.0
        result.M21 = 0.0
        result.M22 = c
        result.M23 = s
        result.M24 = 0.0
        result.M31 = 0.0
        result.M32 = - s
        result.M33 = c
        result.M34 = 0.0
        result.M41 = 0.0
        result.M42 = 0.0
        result.M43 = 0.0
        result.M44 = 1.0
    
        return result:__clone__()
    else
        local result = new(Matrix4x4)

        local c = System.ToSingle(cos(radians))
        local s = System.ToSingle(sin(radians))
  
        local y = centerPoint.Y * (1 - c) + centerPoint.Z * s
        local z = centerPoint.Z * (1 - c) - centerPoint.Y * s
  
        -- [  1  0  0  0 ]
        -- [  0  c  s  0 ]
        -- [  0 -s  c  0 ]
        -- [  0  y  z  1 ]
        result.M11 = 1.0
        result.M12 = 0.0
        result.M13 = 0.0
        result.M14 = 0.0
        result.M21 = 0.0
        result.M22 = c
        result.M23 = s
        result.M24 = 0.0
        result.M31 = 0.0
        result.M32 = - s
        result.M33 = c
        result.M34 = 0.0
        result.M41 = 0.0
        result.M42 = y
        result.M43 = z
        result.M44 = 1.0
  
        return result:__clone__()
    end    
end

Matrix4x4.CreateRotationY = function(radians, centerPoint)
    if centerPoint == nil then
        local result = new(Matrix4x4)

        local c = System.ToSingle(cos(radians))
        local s = System.ToSingle(sin(radians))
  
        -- [  c  0 -s  0 ]
        -- [  0  1  0  0 ]
        -- [  s  0  c  0 ]
        -- [  0  0  0  1 ]
        result.M11 = c
        result.M12 = 0.0
        result.M13 = - s
        result.M14 = 0.0
        result.M21 = 0.0
        result.M22 = 1.0
        result.M23 = 0.0
        result.M24 = 0.0
        result.M31 = s
        result.M32 = 0.0
        result.M33 = c
        result.M34 = 0.0
        result.M41 = 0.0
        result.M42 = 0.0
        result.M43 = 0.0
        result.M44 = 1.0
  
        return result:__clone__()
    else
        local result = new(Matrix4x4)

        local c = System.ToSingle(cos(radians))
        local s = System.ToSingle(sin(radians))

        local x = centerPoint.X * (1 - c) - centerPoint.Z * s
        local z = centerPoint.Z * (1 - c) + centerPoint.X * s

         -- [  c  0 -s  0 ]
         -- [  0  1  0  0 ]
         -- [  s  0  c  0 ]
         -- [  x  0  z  1 ]
        result.M11 = c
        result.M12 = 0.0
        result.M13 = - s
        result.M14 = 0.0
        result.M21 = 0.0
        result.M22 = 1.0
        result.M23 = 0.0
        result.M24 = 0.0
        result.M31 = s
        result.M32 = 0.0
        result.M33 = c
        result.M34 = 0.0
        result.M41 = x
        result.M42 = 0.0
        result.M43 = z
        result.M44 = 1.0

        return result:__clone__()
    end
end

Matrix4x4.CreateRotationZ = function(radians, centerPoint)
    if centerPoint == nil then
        local result = new(Matrix4x4)

        local c = System.ToSingle(cos(radians))
        local s = System.ToSingle(sin(radians))
  
        -- [  c  s  0  0 ]
        -- [ -s  c  0  0 ]
        -- [  0  0  1  0 ]
        -- [  0  0  0  1 ]
        result.M11 = c
        result.M12 = s
        result.M13 = 0.0
        result.M14 = 0.0
        result.M21 = - s
        result.M22 = c
        result.M23 = 0.0
        result.M24 = 0.0
        result.M31 = 0.0
        result.M32 = 0.0
        result.M33 = 1.0
        result.M34 = 0.0
        result.M41 = 0.0
        result.M42 = 0.0
        result.M43 = 0.0
        result.M44 = 1.0
  
        return result:__clone__()
    else
        local result = new(Matrix4x4)

        local c = System.ToSingle(cos(radians))
        local s = System.ToSingle(sin(radians))
  
        local x = centerPoint.X * (1 - c) + centerPoint.Y * s
        local y = centerPoint.Y * (1 - c) - centerPoint.X * s
  
        -- [  c  s  0  0 ]
        -- [ -s  c  0  0 ]
        -- [  0  0  1  0 ]
        -- [  x  y  0  1 ]
        result.M11 = c
        result.M12 = s
        result.M13 = 0.0
        result.M14 = 0.0
        result.M21 = - s
        result.M22 = c
        result.M23 = 0.0
        result.M24 = 0.0
        result.M31 = 0.0
        result.M32 = 0.0
        result.M33 = 1.0
        result.M34 = 0.0
        result.M41 = x
        result.M42 = y
        result.M43 = 0.0
        result.M44 = 1.0
  
        return result:__clone__()
    end
end

Matrix4x4.CreateFromAxisAngle = function (axis, angle)
    -- a: angle
    -- x, y, z: unit vector for axis.
    --
    -- Rotation matrix M can compute by using below equation.
    --
    --        T               T
    --  M = uu + (cos a)( I-uu ) + (sin a)S
    --
    -- Where:
    --
    --  u = ( x, y, z )
    --
    --      [  0 -z  y ]
    --  S = [  z  0 -x ]
    --      [ -y  x  0 ]
    --
    --      [ 1 0 0 ]
    --  I = [ 0 1 0 ]
    --      [ 0 0 1 ]
    --
    --
    --     [  xx+cosa*(1-xx)   yx-cosa*yx-sina*z zx-cosa*xz+sina*y ]
    -- M = [ xy-cosa*yx+sina*z    yy+cosa(1-yy)  yz-cosa*yz-sina*x ]
    --     [ zx-cosa*zx-sina*y zy-cosa*zy+sina*x   zz+cosa*(1-zz)  ]
    --
    local x = axis.X local y = axis.Y local z = axis.Z
    local sa = System.ToSingle(sin(angle)) local ca = System.ToSingle(cos(angle))
    local xx = x * x local yy = y * y local zz = z * z
    local xy = x * y local xz = x * z local yz = y * z

    local result = new(Matrix4x4)

    result.M11 = xx + ca * (1.0 - xx)
    result.M12 = xy - ca * xy + sa * z
    result.M13 = xz - ca * xz - sa * y
    result.M14 = 0.0
    result.M21 = xy - ca * xy - sa * z
    result.M22 = yy + ca * (1.0 - yy)
    result.M23 = yz - ca * yz + sa * x
    result.M24 = 0.0
    result.M31 = xz - ca * xz + sa * y
    result.M32 = yz - ca * yz - sa * x
    result.M33 = zz + ca * (1.0 - zz)
    result.M34 = 0.0
    result.M41 = 0.0
    result.M42 = 0.0
    result.M43 = 0.0
    result.M44 = 1.0

    return result:__clone__()
end

Matrix4x4.CreatePerspectiveFieldOfView = function (fieldOfView, aspectRatio, nearPlaneDistance, farPlaneDistance)
    if fieldOfView <= 0.0 or fieldOfView >= 3.14159265358979 --[[Math.PI]] then
      System.throw(System.ArgumentOutOfRangeException("fieldOfView"))
    end

    if nearPlaneDistance <= 0.0 then
      System.throw(System.ArgumentOutOfRangeException("nearPlaneDistance"))
    end

    if farPlaneDistance <= 0.0 then
      System.throw(System.ArgumentOutOfRangeException("farPlaneDistance"))
    end

    if nearPlaneDistance >= farPlaneDistance then
      System.throw(System.ArgumentOutOfRangeException("nearPlaneDistance"))
    end

    local yScale = 1.0 / System.ToSingle(tan(fieldOfView * 0.5))
    local xScale = yScale / aspectRatio

    local result = new(Matrix4x4)

    result.M11 = xScale
    result.M14 = 0.0 result.M13 = result.M14 result.M12 = result.M13

    result.M22 = yScale
    result.M24 = 0.0 result.M23 = result.M24 result.M21 = result.M23

    result.M32 = 0.0 result.M31 = result.M32
    result.M33 = farPlaneDistance / (nearPlaneDistance - farPlaneDistance)
    result.M34 = - 1.0

    result.M44 = 0.0 result.M42 = result.M44 result.M41 = result.M42
    result.M43 = nearPlaneDistance * farPlaneDistance / (nearPlaneDistance - farPlaneDistance)

    return result:__clone__()
end

Matrix4x4.CreatePerspective = function (width, height, nearPlaneDistance, farPlaneDistance)
    if nearPlaneDistance <= 0.0 then
      System.throw(System.ArgumentOutOfRangeException("nearPlaneDistance"))
    end
    if farPlaneDistance <= 0.0 then
      System.throw(System.ArgumentOutOfRangeException("farPlaneDistance"))
    end
    if nearPlaneDistance >= farPlaneDistance then
      System.throw(System.ArgumentOutOfRangeException("nearPlaneDistance"))
    end
    local result = new(Matrix4x4)

    result.M11 = 2.0 * nearPlaneDistance / width
    result.M14 = 0.0 result.M13 = result.M14 result.M12 = result.M13

    result.M22 = 2.0 * nearPlaneDistance / height
    result.M24 = 0.0 result.M23 = result.M24 result.M21 = result.M23

    result.M33 = farPlaneDistance / (nearPlaneDistance - farPlaneDistance)
    result.M32 = 0.0 result.M31 = result.M32
    result.M34 = - 1.0

    result.M44 = 0.0 result.M42 = result.M44 result.M41 = result.M42
    result.M43 = nearPlaneDistance * farPlaneDistance / (nearPlaneDistance - farPlaneDistance)

    return result:__clone__()
end

Matrix4x4.CreatePerspectiveOffCenter = function (left, right, bottom, top, nearPlaneDistance, farPlaneDistance)
    if nearPlaneDistance <= 0.0 then
      System.throw(System.ArgumentOutOfRangeException("nearPlaneDistance"))
    end

    if farPlaneDistance <= 0.0 then
      System.throw(System.ArgumentOutOfRangeException("farPlaneDistance"))
    end

    if nearPlaneDistance >= farPlaneDistance then
      System.throw(System.ArgumentOutOfRangeException("nearPlaneDistance"))
    end

    local result = new(Matrix4x4)

    result.M11 = 2.0 * nearPlaneDistance / (right - left)
    result.M14 = 0.0 result.M13 = result.M14 result.M12 = result.M13

    result.M22 = 2.0 * nearPlaneDistance / (top - bottom)
    result.M24 = 0.0 result.M23 = result.M24 result.M21 = result.M23

    result.M31 = (left + right) / (right - left)
    result.M32 = (top + bottom) / (top - bottom)
    result.M33 = farPlaneDistance / (nearPlaneDistance - farPlaneDistance)
    result.M34 = - 1.0

    result.M43 = nearPlaneDistance * farPlaneDistance / (nearPlaneDistance - farPlaneDistance)
    result.M44 = 0.0 result.M42 = result.M44 result.M41 = result.M42

    return result:__clone__()
end

Matrix4x4.CreateOrthographic = function (width, height, zNearPlane, zFarPlane)
    local result = new(Matrix4x4)

    result.M11 = 2.0 / width
    result.M14 = 0.0 result.M13 = result.M14 result.M12 = result.M13

    result.M22 = 2.0 / height
    result.M24 = 0.0 result.M23 = result.M24 result.M21 = result.M23

    result.M33 = 1.0 / (zNearPlane - zFarPlane)
    result.M34 = 0.0 result.M32 = result.M34 result.M31 = result.M32

    result.M42 = 0.0 result.M41 = result.M42
    result.M43 = zNearPlane / (zNearPlane - zFarPlane)
    result.M44 = 1.0

    return result:__clone__()
end

Matrix4x4.CreateOrthographicOffCenter = function (left, right, bottom, top, zNearPlane, zFarPlane)
    local result = new(Matrix4x4)

    result.M11 = 2.0 / (right - left)
    result.M14 = 0.0 result.M13 = result.M14 result.M12 = result.M13

    result.M22 = 2.0 / (top - bottom)
    result.M24 = 0.0 result.M23 = result.M24 result.M21 = result.M23

    result.M33 = 1.0 / (zNearPlane - zFarPlane)
    result.M34 = 0.0 result.M32 = result.M34 result.M31 = result.M32

    result.M41 = (left + right) / (left - right)
    result.M42 = (top + bottom) / (bottom - top)
    result.M43 = zNearPlane / (zNearPlane - zFarPlane)
    result.M44 = 1.0

    return result:__clone__()
end

Matrix4x4.CreateLookAt = function (cameraPosition, cameraTarget, cameraUpVector)
    local zaxis = SystemNumerics.Vector3.Normalize(SystemNumerics.Vector3.op_Subtraction(cameraPosition, cameraTarget))
    local xaxis = SystemNumerics.Vector3.Normalize(SystemNumerics.Vector3.Cross(cameraUpVector, zaxis))
    local yaxis = SystemNumerics.Vector3.Cross(zaxis, xaxis)

    local result = new(Matrix4x4)

    result.M11 = xaxis.X
    result.M12 = yaxis.X
    result.M13 = zaxis.X
    result.M14 = 0.0
    result.M21 = xaxis.Y
    result.M22 = yaxis.Y
    result.M23 = zaxis.Y
    result.M24 = 0.0
    result.M31 = xaxis.Z
    result.M32 = yaxis.Z
    result.M33 = zaxis.Z
    result.M34 = 0.0
    result.M41 = - SystemNumerics.Vector3.Dot(xaxis, cameraPosition)
    result.M42 = - SystemNumerics.Vector3.Dot(yaxis, cameraPosition)
    result.M43 = - SystemNumerics.Vector3.Dot(zaxis, cameraPosition)
    result.M44 = 1.0

    return result:__clone__()
end

Matrix4x4.CreateWorld = function (position, forward, up)
    local zaxis = SystemNumerics.Vector3.Normalize(- forward)
    local xaxis = SystemNumerics.Vector3.Normalize(SystemNumerics.Vector3.Cross(up, zaxis))
    local yaxis = SystemNumerics.Vector3.Cross(zaxis, xaxis)

    local result = new(Matrix4x4)

    result.M11 = xaxis.X
    result.M12 = xaxis.Y
    result.M13 = xaxis.Z
    result.M14 = 0.0
    result.M21 = yaxis.X
    result.M22 = yaxis.Y
    result.M23 = yaxis.Z
    result.M24 = 0.0
    result.M31 = zaxis.X
    result.M32 = zaxis.Y
    result.M33 = zaxis.Z
    result.M34 = 0.0
    result.M41 = position.X
    result.M42 = position.Y
    result.M43 = position.Z
    result.M44 = 1.0

    return result:__clone__()
end

Matrix4x4.CreateFromQuaternion = function (quaternion)
    local result = new(Matrix4x4)

    local xx = quaternion.X * quaternion.X
    local yy = quaternion.Y * quaternion.Y
    local zz = quaternion.Z * quaternion.Z

    local xy = quaternion.X * quaternion.Y
    local wz = quaternion.Z * quaternion.W
    local xz = quaternion.Z * quaternion.X
    local wy = quaternion.Y * quaternion.W
    local yz = quaternion.Y * quaternion.Z
    local wx = quaternion.X * quaternion.W

    result.M11 = 1.0 - 2.0 * (yy + zz)
    result.M12 = 2.0 * (xy + wz)
    result.M13 = 2.0 * (xz - wy)
    result.M14 = 0.0
    result.M21 = 2.0 * (xy - wz)
    result.M22 = 1.0 - 2.0 * (zz + xx)
    result.M23 = 2.0 * (yz + wx)
    result.M24 = 0.0
    result.M31 = 2.0 * (xz + wy)
    result.M32 = 2.0 * (yz - wx)
    result.M33 = 1.0 - 2.0 * (yy + xx)
    result.M34 = 0.0
    result.M41 = 0.0
    result.M42 = 0.0
    result.M43 = 0.0
    result.M44 = 1.0

    return result:__clone__()
end

Matrix4x4.CreateFromYawPitchRoll = function (yaw, pitch, roll)
    local q = SystemNumerics.Quaternion.CreateFromYawPitchRoll(yaw, pitch, roll)

    return Matrix4x4.CreateFromQuaternion(q:__clone__())
end

Matrix4x4.CreateShadow = function (lightDirection, plane)
    local p = SystemNumerics.Plane.Normalize(plane)

    local dot = p.Normal.X * lightDirection.X + p.Normal.Y * lightDirection.Y + p.Normal.Z * lightDirection.Z
    local a = - p.Normal.X
    local b = - p.Normal.Y
    local c = - p.Normal.Z
    local d = - p.D

    local result = new(Matrix4x4)

    result.M11 = a * lightDirection.X + dot
    result.M21 = b * lightDirection.X
    result.M31 = c * lightDirection.X
    result.M41 = d * lightDirection.X

    result.M12 = a * lightDirection.Y
    result.M22 = b * lightDirection.Y + dot
    result.M32 = c * lightDirection.Y
    result.M42 = d * lightDirection.Y

    result.M13 = a * lightDirection.Z
    result.M23 = b * lightDirection.Z
    result.M33 = c * lightDirection.Z + dot
    result.M43 = d * lightDirection.Z

    result.M14 = 0.0
    result.M24 = 0.0
    result.M34 = 0.0
    result.M44 = dot

    return result:__clone__()
end

Matrix4x4.CreateReflection = function (value)
    value = SystemNumerics.Plane.Normalize(value)

    local a = value.Normal.X
    local b = value.Normal.Y
    local c = value.Normal.Z

    local fa = - 2.0 * a
    local fb = - 2.0 * b
    local fc = - 2.0 * c

    local result = new(Matrix4x4)

    result.M11 = fa * a + 1.0
    result.M12 = fb * a
    result.M13 = fc * a
    result.M14 = 0.0

    result.M21 = fa * b
    result.M22 = fb * b + 1.0
    result.M23 = fc * b
    result.M24 = 0.0

    result.M31 = fa * c
    result.M32 = fb * c
    result.M33 = fc * c + 1.0
    result.M34 = 0.0

    result.M41 = fa * value.D
    result.M42 = fb * value.D
    result.M43 = fc * value.D
    result.M44 = 1.0

    return result:__clone__()
end

Matrix4x4.GetDeterminant = function (this)
    -- | a b c d |     | f g h |     | e g h |     | e f h |     | e f g |
    -- | e f g h | = a | j k l | - b | i k l | + c | i j l | - d | i j k |
    -- | i j k l |     | n o p |     | m o p |     | m n p |     | m n o |
    -- | m n o p |
    --
    --   | f g h |
    -- a | j k l | = a ( f ( kp - lo ) - g ( jp - ln ) + h ( jo - kn ) )
    --   | n o p |
    --
    --   | e g h |     
    -- b | i k l | = b ( e ( kp - lo ) - g ( ip - lm ) + h ( io - km ) )
    --   | m o p |     
    --
    --   | e f h |
    -- c | i j l | = c ( e ( jp - ln ) - f ( ip - lm ) + h ( in - jm ) )
    --   | m n p |
    --
    --   | e f g |
    -- d | i j k | = d ( e ( jo - kn ) - f ( io - km ) + g ( in - jm ) )
    --   | m n o |
    --
    -- Cost of operation
    -- 17 adds and 28 muls.
    --
    -- add: 6 + 8 + 3 = 17
    -- mul: 12 + 16 = 28

    local a = this.M11 local b = this.M12 local c = this.M13 local d = this.M14
    local e = this.M21 local f = this.M22 local g = this.M23 local h = this.M24
    local i = this.M31 local j = this.M32 local k = this.M33 local l = this.M34
    local m = this.M41 local n = this.M42 local o = this.M43 local p = this.M44

    local kp_lo = k * p - l * o
    local jp_ln = j * p - l * n
    local jo_kn = j * o - k * n
    local ip_lm = i * p - l * m
    local io_km = i * o - k * m
    local in_jm = i * n - j * m

    return a * (f * kp_lo - g * jp_ln + h * jo_kn) - b * (e * kp_lo - g * ip_lm + h * io_km) + c * (e * jp_ln - f * ip_lm + h * in_jm) - d * (e * jo_kn - f * io_km + g * in_jm)
end

Matrix4x4.Invert = function (matrix, result)
    --                                       -1
    -- If you have matrix M, inverse Matrix M   can compute
    --
    --     -1       1      
    --    M   = --------- A
    --            det(M)
    --
    -- A is adjugate (adjoint) of M, where,
    --
    --      T
    -- A = C
    --
    -- C is Cofactor matrix of M, where,
    --           i + j
    -- C   = (-1)      * det(M  )
    --  ij                    ij
    --
    --     [ a b c d ]
    -- M = [ e f g h ]
    --     [ i j k l ]
    --     [ m n o p ]
    --
    -- First Row
    --           2 | f g h |
    -- C   = (-1)  | j k l | = + ( f ( kp - lo ) - g ( jp - ln ) + h ( jo - kn ) )
    --  11         | n o p |
    --
    --           3 | e g h |
    -- C   = (-1)  | i k l | = - ( e ( kp - lo ) - g ( ip - lm ) + h ( io - km ) )
    --  12         | m o p |
    --
    --           4 | e f h |
    -- C   = (-1)  | i j l | = + ( e ( jp - ln ) - f ( ip - lm ) + h ( in - jm ) )
    --  13         | m n p |
    --
    --           5 | e f g |
    -- C   = (-1)  | i j k | = - ( e ( jo - kn ) - f ( io - km ) + g ( in - jm ) )
    --  14         | m n o |
    --
    -- Second Row
    --           3 | b c d |
    -- C   = (-1)  | j k l | = - ( b ( kp - lo ) - c ( jp - ln ) + d ( jo - kn ) )
    --  21         | n o p |
    --
    --           4 | a c d |
    -- C   = (-1)  | i k l | = + ( a ( kp - lo ) - c ( ip - lm ) + d ( io - km ) )
    --  22         | m o p |
    --
    --           5 | a b d |
    -- C   = (-1)  | i j l | = - ( a ( jp - ln ) - b ( ip - lm ) + d ( in - jm ) )
    --  23         | m n p |
    --
    --           6 | a b c |
    -- C   = (-1)  | i j k | = + ( a ( jo - kn ) - b ( io - km ) + c ( in - jm ) )
    --  24         | m n o |
    --
    -- Third Row
    --           4 | b c d |
    -- C   = (-1)  | f g h | = + ( b ( gp - ho ) - c ( fp - hn ) + d ( fo - gn ) )
    --  31         | n o p |
    --
    --           5 | a c d |
    -- C   = (-1)  | e g h | = - ( a ( gp - ho ) - c ( ep - hm ) + d ( eo - gm ) )
    --  32         | m o p |
    --
    --           6 | a b d |
    -- C   = (-1)  | e f h | = + ( a ( fp - hn ) - b ( ep - hm ) + d ( en - fm ) )
    --  33         | m n p |
    --
    --           7 | a b c |
    -- C   = (-1)  | e f g | = - ( a ( fo - gn ) - b ( eo - gm ) + c ( en - fm ) )
    --  34         | m n o |
    --
    -- Fourth Row
    --           5 | b c d |
    -- C   = (-1)  | f g h | = - ( b ( gl - hk ) - c ( fl - hj ) + d ( fk - gj ) )
    --  41         | j k l |
    --
    --           6 | a c d |
    -- C   = (-1)  | e g h | = + ( a ( gl - hk ) - c ( el - hi ) + d ( ek - gi ) )
    --  42         | i k l |
    --
    --           7 | a b d |
    -- C   = (-1)  | e f h | = - ( a ( fl - hj ) - b ( el - hi ) + d ( ej - fi ) )
    --  43         | i j l |
    --
    --           8 | a b c |
    -- C   = (-1)  | e f g | = + ( a ( fk - gj ) - b ( ek - gi ) + c ( ej - fi ) )
    --  44         | i j k |
    --
    -- Cost of operation
    -- 53 adds, 104 muls, and 1 div.
    local a = matrix.M11 local b = matrix.M12 local c = matrix.M13 local d = matrix.M14
    local e = matrix.M21 local f = matrix.M22 local g = matrix.M23 local h = matrix.M24
    local i = matrix.M31 local j = matrix.M32 local k = matrix.M33 local l = matrix.M34
    local m = matrix.M41 local n = matrix.M42 local o = matrix.M43 local p = matrix.M44

    local kp_lo = k * p - l * o
    local jp_ln = j * p - l * n
    local jo_kn = j * o - k * n
    local ip_lm = i * p - l * m
    local io_km = i * o - k * m
    local in_jm = i * n - j * m

    local a11 = (f * kp_lo - g * jp_ln + h * jo_kn)
    local a12 = - (e * kp_lo - g * ip_lm + h * io_km)
    local a13 = (e * jp_ln - f * ip_lm + h * in_jm)
    local a14 = - (e * jo_kn - f * io_km + g * in_jm)

    local det = a * a11 + b * a12 + c * a13 + d * a14

    if abs(det) < 1.401298E-45 --[[Single.Epsilon]] then
      result = new(Matrix4x4, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN, System.Single.NaN)
      return false, result
    end

    local invDet = 1.0 / det

    if result == nil then
        result = new(Matrix4x4)
    end

    result.M11 = a11 * invDet
    result.M21 = a12 * invDet
    result.M31 = a13 * invDet
    result.M41 = a14 * invDet

    result.M12 = - (b * kp_lo - c * jp_ln + d * jo_kn) * invDet
    result.M22 = (a * kp_lo - c * ip_lm + d * io_km) * invDet
    result.M32 = - (a * jp_ln - b * ip_lm + d * in_jm) * invDet
    result.M42 = (a * jo_kn - b * io_km + c * in_jm) * invDet

    local gp_ho = g * p - h * o
    local fp_hn = f * p - h * n
    local fo_gn = f * o - g * n
    local ep_hm = e * p - h * m
    local eo_gm = e * o - g * m
    local en_fm = e * n - f * m

    result.M13 = (b * gp_ho - c * fp_hn + d * fo_gn) * invDet
    result.M23 = - (a * gp_ho - c * ep_hm + d * eo_gm) * invDet
    result.M33 = (a * fp_hn - b * ep_hm + d * en_fm) * invDet
    result.M43 = - (a * fo_gn - b * eo_gm + c * en_fm) * invDet

    local gl_hk = g * l - h * k
    local fl_hj = f * l - h * j
    local fk_gj = f * k - g * j
    local el_hi = e * l - h * i
    local ek_gi = e * k - g * i
    local ej_fi = e * j - f * i

    result.M14 = - (b * gl_hk - c * fl_hj + d * fk_gj) * invDet
    result.M24 = (a * gl_hk - c * el_hi + d * ek_gi) * invDet
    result.M34 = - (a * fl_hj - b * el_hi + d * ej_fi) * invDet
    result.M44 = (a * fk_gj - b * ek_gi + c * ej_fi) * invDet

    return true, result
end

Matrix4x4.Transform = function (value, rotation)
    -- Compute rotation matrix.
    local x2 = rotation.X + rotation.X
    local y2 = rotation.Y + rotation.Y
    local z2 = rotation.Z + rotation.Z

    local wx2 = rotation.W * x2
    local wy2 = rotation.W * y2
    local wz2 = rotation.W * z2
    local xx2 = rotation.X * x2
    local xy2 = rotation.X * y2
    local xz2 = rotation.X * z2
    local yy2 = rotation.Y * y2
    local yz2 = rotation.Y * z2
    local zz2 = rotation.Z * z2

    local q11 = 1.0 - yy2 - zz2
    local q21 = xy2 - wz2
    local q31 = xz2 + wy2

    local q12 = xy2 + wz2
    local q22 = 1.0 - xx2 - zz2
    local q32 = yz2 - wx2

    local q13 = xz2 - wy2
    local q23 = yz2 + wx2
    local q33 = 1.0 - xx2 - yy2

    local result = new(Matrix4x4)

    -- First row
    result.M11 = value.M11 * q11 + value.M12 * q21 + value.M13 * q31
    result.M12 = value.M11 * q12 + value.M12 * q22 + value.M13 * q32
    result.M13 = value.M11 * q13 + value.M12 * q23 + value.M13 * q33
    result.M14 = value.M14

    -- Second row
    result.M21 = value.M21 * q11 + value.M22 * q21 + value.M23 * q31
    result.M22 = value.M21 * q12 + value.M22 * q22 + value.M23 * q32
    result.M23 = value.M21 * q13 + value.M22 * q23 + value.M23 * q33
    result.M24 = value.M24

    -- Third row
    result.M31 = value.M31 * q11 + value.M32 * q21 + value.M33 * q31
    result.M32 = value.M31 * q12 + value.M32 * q22 + value.M33 * q32
    result.M33 = value.M31 * q13 + value.M32 * q23 + value.M33 * q33
    result.M34 = value.M34

    -- Fourth row
    result.M41 = value.M41 * q11 + value.M42 * q21 + value.M43 * q31
    result.M42 = value.M41 * q12 + value.M42 * q22 + value.M43 * q32
    result.M43 = value.M41 * q13 + value.M42 * q23 + value.M43 * q33
    result.M44 = value.M44

    return result:__clone__()
end

Matrix4x4.Transpose = function (matrix)
    local result = new(Matrix4x4)

    result.M11 = matrix.M11
    result.M12 = matrix.M21
    result.M13 = matrix.M31
    result.M14 = matrix.M41
    result.M21 = matrix.M12
    result.M22 = matrix.M22
    result.M23 = matrix.M32
    result.M24 = matrix.M42
    result.M31 = matrix.M13
    result.M32 = matrix.M23
    result.M33 = matrix.M33
    result.M34 = matrix.M43
    result.M41 = matrix.M14
    result.M42 = matrix.M24
    result.M43 = matrix.M34
    result.M44 = matrix.M44

    return result:__clone__()
end

Matrix4x4.Lerp = function (matrix1, matrix2, amount)
    local result = new(Matrix4x4)

    -- First row
    result.M11 = matrix1.M11 + (matrix2.M11 - matrix1.M11) * amount
    result.M12 = matrix1.M12 + (matrix2.M12 - matrix1.M12) * amount
    result.M13 = matrix1.M13 + (matrix2.M13 - matrix1.M13) * amount
    result.M14 = matrix1.M14 + (matrix2.M14 - matrix1.M14) * amount

    -- Second row
    result.M21 = matrix1.M21 + (matrix2.M21 - matrix1.M21) * amount
    result.M22 = matrix1.M22 + (matrix2.M22 - matrix1.M22) * amount
    result.M23 = matrix1.M23 + (matrix2.M23 - matrix1.M23) * amount
    result.M24 = matrix1.M24 + (matrix2.M24 - matrix1.M24) * amount

    -- Third row
    result.M31 = matrix1.M31 + (matrix2.M31 - matrix1.M31) * amount
    result.M32 = matrix1.M32 + (matrix2.M32 - matrix1.M32) * amount
    result.M33 = matrix1.M33 + (matrix2.M33 - matrix1.M33) * amount
    result.M34 = matrix1.M34 + (matrix2.M34 - matrix1.M34) * amount

    -- Fourth row
    result.M41 = matrix1.M41 + (matrix2.M41 - matrix1.M41) * amount
    result.M42 = matrix1.M42 + (matrix2.M42 - matrix1.M42) * amount
    result.M43 = matrix1.M43 + (matrix2.M43 - matrix1.M43) * amount
    result.M44 = matrix1.M44 + (matrix2.M44 - matrix1.M44) * amount

    return result:__clone__()
end

Matrix4x4.Negate = function (value)
    local result = new(Matrix4x4)

    result.M11 = - value.M11
    result.M12 = - value.M12
    result.M13 = - value.M13
    result.M14 = - value.M14
    result.M21 = - value.M21
    result.M22 = - value.M22
    result.M23 = - value.M23
    result.M24 = - value.M24
    result.M31 = - value.M31
    result.M32 = - value.M32
    result.M33 = - value.M33
    result.M34 = - value.M34
    result.M41 = - value.M41
    result.M42 = - value.M42
    result.M43 = - value.M43
    result.M44 = - value.M44

    return result:__clone__()
end

Matrix4x4.Add = function (value1, value2)
    local result = new(Matrix4x4)

    result.M11 = value1.M11 + value2.M11
    result.M12 = value1.M12 + value2.M12
    result.M13 = value1.M13 + value2.M13
    result.M14 = value1.M14 + value2.M14
    result.M21 = value1.M21 + value2.M21
    result.M22 = value1.M22 + value2.M22
    result.M23 = value1.M23 + value2.M23
    result.M24 = value1.M24 + value2.M24
    result.M31 = value1.M31 + value2.M31
    result.M32 = value1.M32 + value2.M32
    result.M33 = value1.M33 + value2.M33
    result.M34 = value1.M34 + value2.M34
    result.M41 = value1.M41 + value2.M41
    result.M42 = value1.M42 + value2.M42
    result.M43 = value1.M43 + value2.M43
    result.M44 = value1.M44 + value2.M44

    return result:__clone__()
end

Matrix4x4.Subtract = function (value1, value2)
    local result = new(Matrix4x4)

    result.M11 = value1.M11 - value2.M11
    result.M12 = value1.M12 - value2.M12
    result.M13 = value1.M13 - value2.M13
    result.M14 = value1.M14 - value2.M14
    result.M21 = value1.M21 - value2.M21
    result.M22 = value1.M22 - value2.M22
    result.M23 = value1.M23 - value2.M23
    result.M24 = value1.M24 - value2.M24
    result.M31 = value1.M31 - value2.M31
    result.M32 = value1.M32 - value2.M32
    result.M33 = value1.M33 - value2.M33
    result.M34 = value1.M34 - value2.M34
    result.M41 = value1.M41 - value2.M41
    result.M42 = value1.M42 - value2.M42
    result.M43 = value1.M43 - value2.M43
    result.M44 = value1.M44 - value2.M44

    return result:__clone__()
end

Matrix4x4.Multiply = function(value1, value2)
    if value2.M11 == nil then
        -- scalar
        local result = new(Matrix4x4)

        result.M11 = value1.M11 * value2
        result.M12 = value1.M12 * value2
        result.M13 = value1.M13 * value2
        result.M14 = value1.M14 * value2
        result.M21 = value1.M21 * value2
        result.M22 = value1.M22 * value2
        result.M23 = value1.M23 * value2
        result.M24 = value1.M24 * value2
        result.M31 = value1.M31 * value2
        result.M32 = value1.M32 * value2
        result.M33 = value1.M33 * value2
        result.M34 = value1.M34 * value2
        result.M41 = value1.M41 * value2
        result.M42 = value1.M42 * value2
        result.M43 = value1.M43 * value2
        result.M44 = value1.M44 * value2

        return result:__clone__()
    else
        -- matrix
        local result = new(Matrix4x4)

        -- First row
        result.M11 = value1.M11 * value2.M11 + value1.M12 * value2.M21 + value1.M13 * value2.M31 + value1.M14 * value2.M41
        result.M12 = value1.M11 * value2.M12 + value1.M12 * value2.M22 + value1.M13 * value2.M32 + value1.M14 * value2.M42
        result.M13 = value1.M11 * value2.M13 + value1.M12 * value2.M23 + value1.M13 * value2.M33 + value1.M14 * value2.M43
        result.M14 = value1.M11 * value2.M14 + value1.M12 * value2.M24 + value1.M13 * value2.M34 + value1.M14 * value2.M44

        -- Second row
        result.M21 = value1.M21 * value2.M11 + value1.M22 * value2.M21 + value1.M23 * value2.M31 + value1.M24 * value2.M41
        result.M22 = value1.M21 * value2.M12 + value1.M22 * value2.M22 + value1.M23 * value2.M32 + value1.M24 * value2.M42
        result.M23 = value1.M21 * value2.M13 + value1.M22 * value2.M23 + value1.M23 * value2.M33 + value1.M24 * value2.M43
        result.M24 = value1.M21 * value2.M14 + value1.M22 * value2.M24 + value1.M23 * value2.M34 + value1.M24 * value2.M44

        -- Third row
        result.M31 = value1.M31 * value2.M11 + value1.M32 * value2.M21 + value1.M33 * value2.M31 + value1.M34 * value2.M41
        result.M32 = value1.M31 * value2.M12 + value1.M32 * value2.M22 + value1.M33 * value2.M32 + value1.M34 * value2.M42
        result.M33 = value1.M31 * value2.M13 + value1.M32 * value2.M23 + value1.M33 * value2.M33 + value1.M34 * value2.M43
        result.M34 = value1.M31 * value2.M14 + value1.M32 * value2.M24 + value1.M33 * value2.M34 + value1.M34 * value2.M44

        -- Fourth row
        result.M41 = value1.M41 * value2.M11 + value1.M42 * value2.M21 + value1.M43 * value2.M31 + value1.M44 * value2.M41
        result.M42 = value1.M41 * value2.M12 + value1.M42 * value2.M22 + value1.M43 * value2.M32 + value1.M44 * value2.M42
        result.M43 = value1.M41 * value2.M13 + value1.M42 * value2.M23 + value1.M43 * value2.M33 + value1.M44 * value2.M43
        result.M44 = value1.M41 * value2.M14 + value1.M42 * value2.M24 + value1.M43 * value2.M34 + value1.M44 * value2.M44

        return result:__clone__()
    end
end

Matrix4x4.op_UnaryNegation = function (value)
    local m = new(Matrix4x4)

    m.M11 = - value.M11
    m.M12 = - value.M12
    m.M13 = - value.M13
    m.M14 = - value.M14
    m.M21 = - value.M21
    m.M22 = - value.M22
    m.M23 = - value.M23
    m.M24 = - value.M24
    m.M31 = - value.M31
    m.M32 = - value.M32
    m.M33 = - value.M33
    m.M34 = - value.M34
    m.M41 = - value.M41
    m.M42 = - value.M42
    m.M43 = - value.M43
    m.M44 = - value.M44

    return m:__clone__()
end

Matrix4x4.op_Addition = function (value1, value2)
    local m = new(Matrix4x4)

    m.M11 = value1.M11 + value2.M11
    m.M12 = value1.M12 + value2.M12
    m.M13 = value1.M13 + value2.M13
    m.M14 = value1.M14 + value2.M14
    m.M21 = value1.M21 + value2.M21
    m.M22 = value1.M22 + value2.M22
    m.M23 = value1.M23 + value2.M23
    m.M24 = value1.M24 + value2.M24
    m.M31 = value1.M31 + value2.M31
    m.M32 = value1.M32 + value2.M32
    m.M33 = value1.M33 + value2.M33
    m.M34 = value1.M34 + value2.M34
    m.M41 = value1.M41 + value2.M41
    m.M42 = value1.M42 + value2.M42
    m.M43 = value1.M43 + value2.M43
    m.M44 = value1.M44 + value2.M44

    return m:__clone__()
end

Matrix4x4.op_Subtraction = function (value1, value2)
    local m = new(Matrix4x4)

    m.M11 = value1.M11 - value2.M11
    m.M12 = value1.M12 - value2.M12
    m.M13 = value1.M13 - value2.M13
    m.M14 = value1.M14 - value2.M14
    m.M21 = value1.M21 - value2.M21
    m.M22 = value1.M22 - value2.M22
    m.M23 = value1.M23 - value2.M23
    m.M24 = value1.M24 - value2.M24
    m.M31 = value1.M31 - value2.M31
    m.M32 = value1.M32 - value2.M32
    m.M33 = value1.M33 - value2.M33
    m.M34 = value1.M34 - value2.M34
    m.M41 = value1.M41 - value2.M41
    m.M42 = value1.M42 - value2.M42
    m.M43 = value1.M43 - value2.M43
    m.M44 = value1.M44 - value2.M44

    return m:__clone__()
end

Matrix4x4.op_Multiply = function(value1, value2)
    if value2.M11 == nil then
        -- scalar
        local result = new(Matrix4x4)

        result.M11 = value1.M11 * value2
        result.M12 = value1.M12 * value2
        result.M13 = value1.M13 * value2
        result.M14 = value1.M14 * value2
        result.M21 = value1.M21 * value2
        result.M22 = value1.M22 * value2
        result.M23 = value1.M23 * value2
        result.M24 = value1.M24 * value2
        result.M31 = value1.M31 * value2
        result.M32 = value1.M32 * value2
        result.M33 = value1.M33 * value2
        result.M34 = value1.M34 * value2
        result.M41 = value1.M41 * value2
        result.M42 = value1.M42 * value2
        result.M43 = value1.M43 * value2
        result.M44 = value1.M44 * value2

        return result:__clone__()
    else
        -- matrix
        local result = new(Matrix4x4)

        -- First row
        result.M11 = value1.M11 * value2.M11 + value1.M12 * value2.M21 + value1.M13 * value2.M31 + value1.M14 * value2.M41
        result.M12 = value1.M11 * value2.M12 + value1.M12 * value2.M22 + value1.M13 * value2.M32 + value1.M14 * value2.M42
        result.M13 = value1.M11 * value2.M13 + value1.M12 * value2.M23 + value1.M13 * value2.M33 + value1.M14 * value2.M43
        result.M14 = value1.M11 * value2.M14 + value1.M12 * value2.M24 + value1.M13 * value2.M34 + value1.M14 * value2.M44

        -- Second row
        result.M21 = value1.M21 * value2.M11 + value1.M22 * value2.M21 + value1.M23 * value2.M31 + value1.M24 * value2.M41
        result.M22 = value1.M21 * value2.M12 + value1.M22 * value2.M22 + value1.M23 * value2.M32 + value1.M24 * value2.M42
        result.M23 = value1.M21 * value2.M13 + value1.M22 * value2.M23 + value1.M23 * value2.M33 + value1.M24 * value2.M43
        result.M24 = value1.M21 * value2.M14 + value1.M22 * value2.M24 + value1.M23 * value2.M34 + value1.M24 * value2.M44

        -- Third row
        result.M31 = value1.M31 * value2.M11 + value1.M32 * value2.M21 + value1.M33 * value2.M31 + value1.M34 * value2.M41
        result.M32 = value1.M31 * value2.M12 + value1.M32 * value2.M22 + value1.M33 * value2.M32 + value1.M34 * value2.M42
        result.M33 = value1.M31 * value2.M13 + value1.M32 * value2.M23 + value1.M33 * value2.M33 + value1.M34 * value2.M43
        result.M34 = value1.M31 * value2.M14 + value1.M32 * value2.M24 + value1.M33 * value2.M34 + value1.M34 * value2.M44

        -- Fourth row
        result.M41 = value1.M41 * value2.M11 + value1.M42 * value2.M21 + value1.M43 * value2.M31 + value1.M44 * value2.M41
        result.M42 = value1.M41 * value2.M12 + value1.M42 * value2.M22 + value1.M43 * value2.M32 + value1.M44 * value2.M42
        result.M43 = value1.M41 * value2.M13 + value1.M42 * value2.M23 + value1.M43 * value2.M33 + value1.M44 * value2.M43
        result.M44 = value1.M41 * value2.M14 + value1.M42 * value2.M24 + value1.M43 * value2.M34 + value1.M44 * value2.M44

        return result:__clone__()
    end
end

Matrix4x4.op_Equality = function (value1, value2)
    return (value1.M11 == value2.M11 and value1.M22 == value2.M22 and value1.M33 == value2.M33 and value1.M44 == value2.M44 and value1.M12 == value2.M12 and value1.M13 == value2.M13 and value1.M14 == value2.M14 and value1.M21 == value2.M21 and value1.M23 == value2.M23 and value1.M24 == value2.M24 and value1.M31 == value2.M31 and value1.M32 == value2.M32 and value1.M34 == value2.M34 and value1.M41 == value2.M41 and value1.M42 == value2.M42 and value1.M43 == value2.M43)
end

Matrix4x4.op_Inequality = function (value1, value2)
    return (value1.M11 ~= value2.M11 or value1.M12 ~= value2.M12 or value1.M13 ~= value2.M13 or value1.M14 ~= value2.M14 or value1.M21 ~= value2.M21 or value1.M22 ~= value2.M22 or value1.M23 ~= value2.M23 or value1.M24 ~= value2.M24 or value1.M31 ~= value2.M31 or value1.M32 ~= value2.M32 or value1.M33 ~= value2.M33 or value1.M34 ~= value2.M34 or value1.M41 ~= value2.M41 or value1.M42 ~= value2.M42 or value1.M43 ~= value2.M43 or value1.M44 ~= value2.M44)
end

Matrix4x4.Equals = function (this, other)
    if System.is(other, Matrix4x4) then
        return (this.M11 == other.M11 and this.M22 == other.M22 and this.M33 == other.M33 and this.M44 == other.M44 and this.M12 == other.M12 and this.M13 == other.M13 and this.M14 == other.M14 and this.M21 == other.M21 and this.M23 == other.M23 and this.M24 == other.M24 and this.M31 == other.M31 and this.M32 == other.M32 and this.M34 == other.M34 and this.M41 == other.M41 and this.M42 == other.M42 and this.M43 == other.M43)
    end
    return false
end

Matrix4x4.ToString = function (this)
    local sb = System.StringBuilder()
    sb:Append("{ ")
    sb:Append("{")
    sb:Append("M11: ")
    sb:Append(this.M11:ToString())
    sb:Append(" M12: ")
    sb:Append(this.M12:ToString())
    sb:Append(" M13: ")
    sb:Append(this.M13:ToString())
    sb:Append(" M14: ")
    sb:Append(this.M14:ToString())
    sb:Append("} ")
    sb:Append("{")
    sb:Append("M21: ")
    sb:Append(this.M21:ToString())
    sb:Append(" M22: ")
    sb:Append(this.M22:ToString())
    sb:Append(" M23: ")
    sb:Append(this.M23:ToString())
    sb:Append(" M24: ")
    sb:Append(this.M24:ToString())
    sb:Append("} ")
    sb:Append("{")
    sb:Append("M31: ")
    sb:Append(this.M31:ToString())
    sb:Append(" M32: ")
    sb:Append(this.M32:ToString())
    sb:Append(" M33: ")
    sb:Append(this.M33:ToString())
    sb:Append(" M34: ")
    sb:Append(this.M34:ToString())
    sb:Append("} ")
    sb:Append("{")
    sb:Append("M41: ")
    sb:Append(this.M41:ToString())
    sb:Append(" M42: ")
    sb:Append(this.M42:ToString())
    sb:Append(" M43: ")
    sb:Append(this.M43:ToString())
    sb:Append(" M44: ")
    sb:Append(this.M44:ToString())
    sb:Append("} ")
    sb:Append("}")
    return sb:ToString()
end

Matrix4x4.GetHashCode = function (this)
    return this.M11:GetHashCode() + this.M12:GetHashCode() + this.M13:GetHashCode() + this.M14:GetHashCode() + this.M21:GetHashCode() + this.M22:GetHashCode() + this.M23:GetHashCode() + this.M24:GetHashCode() + this.M31:GetHashCode() + this.M32:GetHashCode() + this.M33:GetHashCode() + this.M34:GetHashCode() + this.M41:GetHashCode() + this.M42:GetHashCode() + this.M43:GetHashCode() + this.M44:GetHashCode()
end

-- https://math.stackexchange.com/questions/237369/given-this-transformation-matrix-how-do-i-decompose-it-into-translation-rotati
-- It appears that this function is not complete, as it appears by the comments
-- Improvement is welcome
Matrix4x4.Decompose = function(matrix, scale, rotation, translation)
    -- throw(NotImplementedException("Matrix4x4.Decompose is not yet implemented"))

    -- Extract Translation
    translation = SystemNumerics.Vector3(matrix.M41, matrix.M42, matrix.M43)

    -- Zero Translation
    matrix.M41 = 0
    matrix.M42 = 0
    matrix.M43 = 0

    -- Extract scales

    local sx = SystemNumerics.Vector3(matrix.M11, matrix.M12, matrix.M13):Length()
    local sy = SystemNumerics.Vector3(matrix.M21, matrix.M22, matrix.M23):Length()
    local sz = SystemNumerics.Vector3(matrix.M31, matrix.M32, matrix.M33):Length()

    scale = SystemNumerics.Vector3(sx, sy, sz)

    -- divide by scale

    local matTemp = matrix:__clone__()

    matTemp.M11 = matTemp.M11 / sx
    matTemp.M12 = matTemp.M12 / sx
    matTemp.M13 = matTemp.M13 / sx

    matTemp.M21 = matTemp.M21 / sy
    matTemp.M22 = matTemp.M22 / sy
    matTemp.M23 = matTemp.M23 / sy

    matTemp.M31 = matTemp.M31 / sz
    matTemp.M32 = matTemp.M32 / sz
    matTemp.M33 = matTemp.M33/ sz

    rotation = SystemNumerics.Quaternion.CreateFromRotationMatrix(matTemp)

    return true, scale, rotation, translation
end

System.defStc("System.Numerics.Matrix4x4", Matrix4x4)
end

-- CoreSystemLib: Numerics\Plane.lua
do
local System = System
local SystemNumerics = System.Numerics

local sqrt = math.sqrt
local abs = math.abs

local IComparable = System.IComparable
local IComparable_1 = System.IComparable_1
local IEquatable_1 = System.IEquatable_1

local new = function (cls, ...)
    local this = setmetatable({}, cls)
    return this, cls.__ctor__(this, ...)
end

local Plane = {}

Plane.__ctor__ = function(this, val1, val2, val3, val4)
    if val4 == nil then
        if val2 == nil then
            -- Plane(Vector4)
            this.Normal = SystemNumerics.Vector3(val1.X, val1.Y, val1.Z)
            this.D = val1.W
        else
            -- Plane(Vector3, Single)
            this.Normal = val1:__clone__()
            this.D = val2
        end
    else
        -- Plane(Single, Single, Single, Single)
        this.Normal = SystemNumerics.Vector3(val1, val2, val3)
        this.D = val4
    end
end

Plane.base = function (_, T)
    return { IComparable, IComparable_1(T), IEquatable_1(T) }
end

Plane.CreateFromVertices = function (point1, point2, point3)
    local ax = point2.X - point1.X
    local ay = point2.Y - point1.Y
    local az = point2.Z - point1.Z

    local bx = point3.X - point1.X
    local by = point3.Y - point1.Y
    local bz = point3.Z - point1.Z

    -- N=Cross(a,b)
    local nx = ay * bz - az * by
    local ny = az * bx - ax * bz
    local nz = ax * by - ay * bx

    -- Normalize(N)
    local ls = nx * nx + ny * ny + nz * nz
    local invNorm = 1.0 / System.ToSingle(sqrt(ls))

    local normal = SystemNumerics.Vector3(nx * invNorm, ny * invNorm, nz * invNorm)

    return new(Plane, normal:__clone__(), - (normal.X * point1.X + normal.Y * point1.Y + normal.Z * point1.Z))
end

Plane.Normalize = function (value)
    -- smallest such that 1.0+FLT_EPSILON != 1.0
    local f = value.Normal.X * value.Normal.X + value.Normal.Y * value.Normal.Y + value.Normal.Z * value.Normal.Z

    if abs(f - 1.0) < 1.192093E-07 --[[FLT_EPSILON]] then
        return value:__clone__()
        -- It already normalized, so we don't need to further process.
    end

    local fInv = 1.0 / System.ToSingle(sqrt(f))

    return new(Plane, value.Normal.X * fInv, value.Normal.Y * fInv, value.Normal.Z * fInv, value.D * fInv)
  end

Plane.Transform = function (plane, matrix)
    if matrix.X == nil then
        -- matrix
        local m
        local default
        default, m = SystemNumerics.Matrix4x4.Invert(matrix)

        local x = plane.Normal.X local y = plane.Normal.Y local z = plane.Normal.Z local w = plane.D

        return new(Plane, x * m.M11 + y * m.M12 + z * m.M13 + w * m.M14, x * m.M21 + y * m.M22 + z * m.M23 + w * m.M24, x * m.M31 + y * m.M32 + z * m.M33 + w * m.M34, x * m.M41 + y * m.M42 + z * m.M43 + w * m.M44)
    else
        -- quaternion
        local x2 = matrix.X + matrix.X
        local y2 = matrix.Y + matrix.Y
        local z2 = matrix.Z + matrix.Z
  
        local wx2 = matrix.W * x2
        local wy2 = matrix.W * y2
        local wz2 = matrix.W * z2
        local xx2 = matrix.X * x2
        local xy2 = matrix.X * y2
        local xz2 = matrix.X * z2
        local yy2 = matrix.Y * y2
        local yz2 = matrix.Y * z2
        local zz2 = matrix.Z * z2
  
        local m11 = 1.0 - yy2 - zz2
        local m21 = xy2 - wz2
        local m31 = xz2 + wy2
  
        local m12 = xy2 + wz2
        local m22 = 1.0 - xx2 - zz2
        local m32 = yz2 - wx2
  
        local m13 = xz2 - wy2
        local m23 = yz2 + wx2
        local m33 = 1.0 - xx2 - yy2
  
        local x = plane.Normal.X local y = plane.Normal.Y local z = plane.Normal.Z
  
        return new(Plane, x * m11 + y * m21 + z * m31, x * m12 + y * m22 + z * m32, x * m13 + y * m23 + z * m33, plane.D)  
    end
end

Plane.Dot = function (plane, value)
    return plane.Normal.X * value.X + plane.Normal.Y * value.Y + plane.Normal.Z * value.Z + plane.D * value.W
end

Plane.DotCoordinate = function (plane, value)
    return plane.Normal.X * value.X + plane.Normal.Y * value.Y + plane.Normal.Z * value.Z + plane.D
end

Plane.DotNormal = function (plane, value)
    return plane.Normal.X * value.X + plane.Normal.Y * value.Y + plane.Normal.Z * value.Z
end

Plane.op_Equality = function (value1, value2)
    return (value1.Normal.X == value2.Normal.X and value1.Normal.Y == value2.Normal.Y and value1.Normal.Z == value2.Normal.Z and value1.D == value2.D)
end

Plane.op_Inequality = function (value1, value2)
    return (value1.Normal.X ~= value2.Normal.X or value1.Normal.Y ~= value2.Normal.Y or value1.Normal.Z ~= value2.Normal.Z or value1.D ~= value2.D)
end

Plane.Equals = function (this, obj)
    if System.is(obj, Plane) then
        return (this.Normal.X == obj.Normal.X and this.Normal.Y == obj.Normal.Y and this.Normal.Z == obj.Normal.Z and this.D == obj.D)
    end
    return false
end

Plane.ToString = function (this)
    local sb = System.StringBuilder()
    sb:Append("{")
    sb:Append("Normal: ")
    sb:Append(this.Normal:ToString())
    sb:Append(" D: ")
    sb:Append(this.D:ToString())
    sb:Append("}")
    return sb:ToString()
end

Plane.GetHashCode = function (this)
    return this.Normal:GetHashCode() + this.D:GetHashCode()
end

System.defStc("System.Numerics.Plane", Plane)
end

-- CoreSystemLib: Numerics\Quaternion.lua
do
local System = System
local SystemNumerics = System.Numerics

local sqrt = math.sqrt
local sin = math.sin
local cos = math.cos
local acos = math.acos

local IComparable = System.IComparable
local IComparable_1 = System.IComparable_1
local IEquatable_1 = System.IEquatable_1

local new = function (cls, ...)
    local this = setmetatable({}, cls)
    return this, cls.__ctor__(this, ...)
end

local Quaternion = {}

Quaternion.__ctor__ = function(this, x, y, z, w)
    if x == nil then
        this.X = 0
        this.Y = 0
        this.Z = 0
        this.W = 0
    elseif z == nil then
        -- Quaternion(Vector3, Single)
        this.X = x.X or 0
        this.Y = x.Y or 0
        this.Z = x.Z or 0
        this.W = z or 0
    else
        -- Quaternion(Single, Single, Single, Single)
        this.X = x or 0
        this.Y = y or 0
        this.Z = z or 0
        this.W = w or 0
    end
    local mt = getmetatable(this)
    mt.__unm = Quaternion.op_UnaryNegation
    setmetatable(this, mt)
end

Quaternion.base = function (_, T)
    return { IComparable, IComparable_1(T), IEquatable_1(T) }
end

Quaternion.getIdentity = function ()
    return new(Quaternion, 0, 0, 0, 1)
end

Quaternion.getIsIdentity = function (this)
    return this.X == 0 and this.Y == 0 and this.Z == 0 and this.W == 1
end

Quaternion.Length = function (this)
    local ls = this.X * this.X + this.Y * this.Y + this.Z * this.Z + this.W * this.W

    return System.ToSingle(sqrt(ls))
end

Quaternion.LengthSquared = function (this)
    return this.X * this.X + this.Y * this.Y + this.Z * this.Z + this.W * this.W
end

Quaternion.Normalize = function (value)
    local ls = value.X * value.X + value.Y * value.Y + value.Z * value.Z + value.W * value.W
    local invNorm = 1.0 / System.ToSingle(sqrt(ls))

    return new(Quaternion, value.X * invNorm, value.Y * invNorm, value.Z * invNorm, value.W * invNorm)
end

Quaternion.Conjugate = function (value)
    return new(Quaternion, - value.X, - value.Y, - value.Z, value.W)
end

Quaternion.Inverse = function (value)
    --  -1   (       a              -v       )
    -- q   = ( -------------   ------------- )
    --       (  a^2 + |v|^2  ,  a^2 + |v|^2  )

    local ls = value.X * value.X + value.Y * value.Y + value.Z * value.Z + value.W * value.W
    local invNorm = 1.0 / ls

    return new(Quaternion, - value.X * invNorm, - value.Y * invNorm, - value.Z * invNorm, value.W * invNorm)
end

Quaternion.CreateFromAxisAngle = function (axis, angle)
    local halfAngle = angle * 0.5
    local s = System.ToSingle(sin(halfAngle))
    local c = System.ToSingle(cos(halfAngle))

    return new(Quaternion, axis.X * s, axis.Y * s, axis.Z * s, c)
end

Quaternion.CreateFromYawPitchRoll = function (yaw, pitch, roll)
    --  Roll first, about axis the object is facing, then
    --  pitch upward, then yaw to face into the new heading
    local sr, cr, sp, cp, sy, cy

    local halfRoll = roll * 0.5
    sr = System.ToSingle(sin(halfRoll))
    cr = System.ToSingle(cos(halfRoll))

    local halfPitch = pitch * 0.5
    sp = System.ToSingle(sin(halfPitch))
    cp = System.ToSingle(cos(halfPitch))

    local halfYaw = yaw * 0.5
    sy = System.ToSingle(sin(halfYaw))
    cy = System.ToSingle(cos(halfYaw))

    return new(Quaternion, cy * sp * cr + sy * cp * sr, sy * cp * cr - cy * sp * sr, cy * cp * sr - sy * sp * cr, cy * cp * cr + sy * sp * sr)
end

Quaternion.CreateFromRotationMatrix = function (matrix)
    local trace = matrix.M11 + matrix.M22 + matrix.M33

    local q = new(Quaternion)

    if trace > 0.0 then
      local s = System.ToSingle(sqrt(trace + 1.0))
      q.W = s * 0.5
      s = 0.5 / s
      q.X = (matrix.M23 - matrix.M32) * s
      q.Y = (matrix.M31 - matrix.M13) * s
      q.Z = (matrix.M12 - matrix.M21) * s
    else
      if matrix.M11 >= matrix.M22 and matrix.M11 >= matrix.M33 then
        local s = System.ToSingle(sqrt(1.0 + matrix.M11 - matrix.M22 - matrix.M33))
        local invS = 0.5 / s
        q.X = 0.5 * s
        q.Y = (matrix.M12 + matrix.M21) * invS
        q.Z = (matrix.M13 + matrix.M31) * invS
        q.W = (matrix.M23 - matrix.M32) * invS
      elseif matrix.M22 > matrix.M33 then
        local s = System.ToSingle(sqrt(1.0 + matrix.M22 - matrix.M11 - matrix.M33))
        local invS = 0.5 / s
        q.X = (matrix.M21 + matrix.M12) * invS
        q.Y = 0.5 * s
        q.Z = (matrix.M32 + matrix.M23) * invS
        q.W = (matrix.M31 - matrix.M13) * invS
      else
        local s = System.ToSingle(sqrt(1.0 + matrix.M33 - matrix.M11 - matrix.M22))
        local invS = 0.5 / s
        q.X = (matrix.M31 + matrix.M13) * invS
        q.Y = (matrix.M32 + matrix.M23) * invS
        q.Z = 0.5 * s
        q.W = (matrix.M12 - matrix.M21) * invS
      end
    end

    return q:__clone__()
end

Quaternion.Dot = function (quaternion1, quaternion2)
    return quaternion1.X * quaternion2.X + quaternion1.Y * quaternion2.Y + quaternion1.Z * quaternion2.Z + quaternion1.W * quaternion2.W
end

Quaternion.Slerp = function (quaternion1, quaternion2, amount)
    local t = amount

    local cosOmega = quaternion1.X * quaternion2.X + quaternion1.Y * quaternion2.Y + quaternion1.Z * quaternion2.Z + quaternion1.W * quaternion2.W

    local flip = false

    if cosOmega < 0.0 then
      flip = true
      cosOmega = - cosOmega
    end

    local s1, s2

    if cosOmega > (0.999999 --[[1.0f - epsilon]]) then
      -- Too close, do straight linear interpolation.
      s1 = 1.0 - t
      s2 = (flip) and - t or t
    else
      local omega = System.ToSingle(acos(cosOmega))
      local invSinOmega = System.ToSingle((1 / sin(omega)))

      s1 = System.ToSingle(sin((1.0 - t) * omega)) * invSinOmega
      s2 = (flip) and System.ToSingle(- sin(t * omega)) * invSinOmega or System.ToSingle(sin(t * omega)) * invSinOmega
    end

    return new(Quaternion, s1 * quaternion1.X + s2 * quaternion2.X, s1 * quaternion1.Y + s2 * quaternion2.Y, s1 * quaternion1.Z + s2 * quaternion2.Z, s1 * quaternion1.W + s2 * quaternion2.W)
end

Quaternion.Lerp = function (quaternion1, quaternion2, amount)
    local t = amount
    local t1 = 1.0 - t

    local r = new(Quaternion)

    local dot = quaternion1.X * quaternion2.X + quaternion1.Y * quaternion2.Y + quaternion1.Z * quaternion2.Z + quaternion1.W * quaternion2.W

    if dot >= 0.0 then
      r.X = t1 * quaternion1.X + t * quaternion2.X
      r.Y = t1 * quaternion1.Y + t * quaternion2.Y
      r.Z = t1 * quaternion1.Z + t * quaternion2.Z
      r.W = t1 * quaternion1.W + t * quaternion2.W
    else
      r.X = t1 * quaternion1.X - t * quaternion2.X
      r.Y = t1 * quaternion1.Y - t * quaternion2.Y
      r.Z = t1 * quaternion1.Z - t * quaternion2.Z
      r.W = t1 * quaternion1.W - t * quaternion2.W
    end

    -- Normalize it.
    local ls = r.X * r.X + r.Y * r.Y + r.Z * r.Z + r.W * r.W
    local invNorm = 1.0 / System.ToSingle(sqrt(ls))

    r.X = r.X * invNorm
    r.Y = r.Y * invNorm
    r.Z = r.Z * invNorm
    r.W = r.W * invNorm

    return r:__clone__()
end

Quaternion.Concatenate = function (value1, value2)

    -- Concatenate rotation is actually q2 * q1 instead of q1 * q2.
    -- So that's why value2 goes q1 and value1 goes q2.
    local q1x = value2.X
    local q1y = value2.Y
    local q1z = value2.Z
    local q1w = value2.W

    local q2x = value1.X
    local q2y = value1.Y
    local q2z = value1.Z
    local q2w = value1.W

    -- cross(av, bv)
    local cx = q1y * q2z - q1z * q2y
    local cy = q1z * q2x - q1x * q2z
    local cz = q1x * q2y - q1y * q2x

    local dot = q1x * q2x + q1y * q2y + q1z * q2z

    return new(Quaternion, q1x * q2w + q2x * q1w + cx, q1y * q2w + q2y * q1w + cy, q1z * q2w + q2z * q1w + cz, q1w * q2w - dot)
end

Quaternion.Negate = function (value)
    return new(Quaternion, - value.X, - value.Y, - value.Z, - value.W)
end

Quaternion.Add = function (value1, value2)
    return new(Quaternion, value1.X + value2.X, value1.Y + value2.Y, value1.Z + value2.Z, value1.W + value2.W)
end

Quaternion.Subtract = function (value1, value2)
    return new(Quaternion, value1.X - value2.X, value1.Y - value2.Y, value1.Z - value2.Z, value1.W - value2.W)
end

Quaternion.Multiply = function (value1, value2)
    if value2.X == nil then
        -- scalar
        return new(Quaternion, value1.X * value2, value1.Y * value2, value1.Z * value2, value1.W * value2)
    else
        -- quaternion
        local q1x = value1.X
        local q1y = value1.Y
        local q1z = value1.Z
        local q1w = value1.W

        local q2x = value2.X
        local q2y = value2.Y
        local q2z = value2.Z
        local q2w = value2.W

        -- cross(av, bv)
        local cx = q1y * q2z - q1z * q2y
        local cy = q1z * q2x - q1x * q2z
        local cz = q1x * q2y - q1y * q2x

        local dot = q1x * q2x + q1y * q2y + q1z * q2z

        return new(Quaternion, q1x * q2w + q2x * q1w + cx, q1y * q2w + q2y * q1w + cy, q1z * q2w + q2z * q1w + cz, q1w * q2w - dot)
    end    
end

Quaternion.Divide = function (value1, value2)

    local q1x = value1.X
    local q1y = value1.Y
    local q1z = value1.Z
    local q1w = value1.W

    ---------------------------------------
    -- Inverse part.
    local ls = value2.X * value2.X + value2.Y * value2.Y + value2.Z * value2.Z + value2.W * value2.W
    local invNorm = 1.0 / ls

    local q2x = - value2.X * invNorm
    local q2y = - value2.Y * invNorm
    local q2z = - value2.Z * invNorm
    local q2w = value2.W * invNorm

    ---------------------------------------
    -- Multiply part.

    -- cross(av, bv)
    local cx = q1y * q2z - q1z * q2y
    local cy = q1z * q2x - q1x * q2z
    local cz = q1x * q2y - q1y * q2x

    local dot = q1x * q2x + q1y * q2y + q1z * q2z

    return new(Quaternion, q1x * q2w + q2x * q1w + cx, q1y * q2w + q2y * q1w + cy, q1z * q2w + q2z * q1w + cz, q1w * q2w - dot)
end

Quaternion.op_UnaryNegation = function (value)
    return new(Quaternion, - value.X, - value.Y, - value.Z, - value.W)
end

Quaternion.op_Addition = function (value1, value2)
    return new(Quaternion, value1.X + value2.X, value1.Y + value2.Y, value1.Z + value2.Z, value1.W + value2.W)
end

Quaternion.op_Subtraction = function (value1, value2)
    return new(Quaternion, value1.X - value2.X, value1.Y - value2.Y, value1.Z - value2.Z, value1.W - value2.W)
end

Quaternion.op_Multiply = function (value1, value2)
    if value2.X == nil then
        -- scalar
        return new(Quaternion, value1.X * value2, value1.Y * value2, value1.Z * value2, value1.W * value2)
    else
        -- quaternion
        local q1x = value1.X
        local q1y = value1.Y
        local q1z = value1.Z
        local q1w = value1.W

        local q2x = value2.X
        local q2y = value2.Y
        local q2z = value2.Z
        local q2w = value2.W

        -- cross(av, bv)
        local cx = q1y * q2z - q1z * q2y
        local cy = q1z * q2x - q1x * q2z
        local cz = q1x * q2y - q1y * q2x

        local dot = q1x * q2x + q1y * q2y + q1z * q2z

        return new(Quaternion, q1x * q2w + q2x * q1w + cx, q1y * q2w + q2y * q1w + cy, q1z * q2w + q2z * q1w + cz, q1w * q2w - dot)
    end    
end

Quaternion.op_Division = function (value1, value2)

    local q1x = value1.X
    local q1y = value1.Y
    local q1z = value1.Z
    local q1w = value1.W

    ---------------------------------------
    -- Inverse part.
    local ls = value2.X * value2.X + value2.Y * value2.Y + value2.Z * value2.Z + value2.W * value2.W
    local invNorm = 1.0 / ls

    local q2x = - value2.X * invNorm
    local q2y = - value2.Y * invNorm
    local q2z = - value2.Z * invNorm
    local q2w = value2.W * invNorm

    ---------------------------------------
    -- Multiply part.

    -- cross(av, bv)
    local cx = q1y * q2z - q1z * q2y
    local cy = q1z * q2x - q1x * q2z
    local cz = q1x * q2y - q1y * q2x

    local dot = q1x * q2x + q1y * q2y + q1z * q2z

    return new(Quaternion, q1x * q2w + q2x * q1w + cx, q1y * q2w + q2y * q1w + cy, q1z * q2w + q2z * q1w + cz, q1w * q2w - dot)
end

Quaternion.op_Equality = function (value1, value2)
    return (value1.X == value2.X and value1.Y == value2.Y and value1.Z == value2.Z and value1.W == value2.W)
end

Quaternion.op_Inequality = function (value1, value2)
    return (value1.X ~= value2.X or value1.Y ~= value2.Y or value1.Z ~= value2.Z or value1.W ~= value2.W)
end

Quaternion.Equals = function (this, obj)
    if System.is(obj, Quaternion) then
        return (this.X == obj.X and this.Y == obj.Y and this.Z == obj.Z and this.W == obj.W)
    end
    return false
end

Quaternion.ToString = function (this)
    local sb = System.StringBuilder()
    sb:Append("{")
    sb:Append("X: ")
    sb:Append(this.X:ToString())
    sb:Append(" Y: ")
    sb:Append(this.Y:ToString())
    sb:Append(" Z: ")
    sb:Append(this.Z:ToString())
    sb:Append(" W: ")
    sb:Append(this.W:ToString())
    sb:Append("}")
    return sb:ToString()
end

Quaternion.GetHashCode = function (this)
    return this.X:GetHashCode() + this.Y:GetHashCode() + this.Z:GetHashCode() + this.W:GetHashCode()
end

System.defStc("System.Numerics.Quaternion", Quaternion)
end

-- CoreSystemLib: WCSharp.lua
do
local define = System.defStc
local setmetatable = setmetatable

local handle = define("WCSharp.Api.handle", {
})
local agent = define("WCSharp.Api.agent", {
  base = { handle }
})
local event = define("WCSharp.Api.event", {
  base = { agent }
})
local player = define("WCSharp.Api.player", {
  base = { agent }
})
local widget = define("WCSharp.Api.widget", {
  base = { agent }
})
local unit = define("WCSharp.Api.unit", {
  base = { widget }
})
local destructable = define("WCSharp.Api.destructable", {
  base = { widget }
})
local item = define("WCSharp.Api.item", {
  base = { widget }
})
local ability = define("WCSharp.Api.ability", {
  base = { agent }
})
local buff = define("WCSharp.Api.buff", {
  base = { ability }
})
local force = define("WCSharp.Api.force", {
  base = { agent }
})
local group = define("WCSharp.Api.group", {
  base = { agent }
})
local trigger = define("WCSharp.Api.trigger", {
  base = { agent }
})
local triggercondition = define("WCSharp.Api.triggercondition", {
  base = { agent }
})
local triggeraction = define("WCSharp.Api.triggeraction", {
  base = { handle }
})
local timer = define("WCSharp.Api.timer", {
  base = { agent }
})
local location = define("WCSharp.Api.location", {
  base = { agent }
})
local region = define("WCSharp.Api.region", {
  base = { agent }
})
local rect = define("WCSharp.Api.rect", {
  base = { agent }
})
local boolexpr = define("WCSharp.Api.boolexpr", {
  base = { agent }
})
local sound = define("WCSharp.Api.sound", {
  base = { agent }
})
local conditionfunc = define("WCSharp.Api.conditionfunc", {
  base = { boolexpr }
})
local filterfunc = define("WCSharp.Api.filterfunc", {
  base = { boolexpr }
})
local unitpool = define("WCSharp.Api.unitpool", {
  base = { handle }
})
local itempool = define("WCSharp.Api.itempool", {
  base = { handle }
})
local race = define("WCSharp.Api.race", {
  base = { handle }
})
local alliancetype = define("WCSharp.Api.alliancetype", {
  base = { handle }
})
local racepreference = define("WCSharp.Api.racepreference", {
  base = { handle }
})
local gamestate = define("WCSharp.Api.gamestate", {
  base = { handle }
})
local igamestate = define("WCSharp.Api.igamestate", {
  base = { gamestate }
})
local fgamestate = define("WCSharp.Api.fgamestate", {
  base = { gamestate }
})
local playerstate = define("WCSharp.Api.playerstate", {
  base = { handle }
})
local playerscore = define("WCSharp.Api.playerscore", {
  base = { handle }
})
local playergameresult = define("WCSharp.Api.playergameresult", {
  base = { handle }
})
local unitstate = define("WCSharp.Api.unitstate", {
  base = { handle }
})
local aidifficulty = define("WCSharp.Api.aidifficulty", {
  base = { handle }
})
local eventid = define("WCSharp.Api.eventid", {
  base = { handle }
})
local gameevent = define("WCSharp.Api.gameevent", {
  base = { eventid }
})
local playerevent = define("WCSharp.Api.playerevent", {
  base = { eventid }
})
local playerunitevent = define("WCSharp.Api.playerunitevent", {
  base = { eventid }
})
local unitevent = define("WCSharp.Api.unitevent", {
  base = { eventid }
})
local limitop = define("WCSharp.Api.limitop", {
  base = { eventid }
})
local widgetevent = define("WCSharp.Api.widgetevent", {
  base = { eventid }
})
local dialogevent = define("WCSharp.Api.dialogevent", {
  base = { eventid }
})
local unittype = define("WCSharp.Api.unittype", {
  base = { handle }
})
local gamespeed = define("WCSharp.Api.gamespeed", {
  base = { handle }
})
local gamedifficulty = define("WCSharp.Api.gamedifficulty", {
  base = { handle }
})
local gametype = define("WCSharp.Api.gametype", {
  base = { handle }
})
local mapflag = define("WCSharp.Api.mapflag", {
  base = { handle }
})
local mapvisibility = define("WCSharp.Api.mapvisibility", {
  base = { handle }
})
local mapsetting = define("WCSharp.Api.mapsetting", {
  base = { handle }
})
local mapdensity = define("WCSharp.Api.mapdensity", {
  base = { handle }
})
local mapcontrol = define("WCSharp.Api.mapcontrol", {
  base = { handle }
})
local minimapicon = define("WCSharp.Api.minimapicon", {
  base = { handle }
})
local playerslotstate = define("WCSharp.Api.playerslotstate", {
  base = { handle }
})
local volumegroup = define("WCSharp.Api.volumegroup", {
  base = { handle }
})
local camerafield = define("WCSharp.Api.camerafield", {
  base = { handle }
})
local camerasetup = define("WCSharp.Api.camerasetup", {
  base = { handle }
})
local playercolor = define("WCSharp.Api.playercolor", {
  base = { handle }
})
local placement = define("WCSharp.Api.placement", {
  base = { handle }
})
local startlocprio = define("WCSharp.Api.startlocprio", {
  base = { handle }
})
local raritycontrol = define("WCSharp.Api.raritycontrol", {
  base = { handle }
})
local blendmode = define("WCSharp.Api.blendmode", {
  base = { handle }
})
local texmapflags = define("WCSharp.Api.texmapflags", {
  base = { handle }
})
local effect = define("WCSharp.Api.effect", {
  base = { agent }
})
local effecttype = define("WCSharp.Api.effecttype", {
  base = { handle }
})
local weathereffect = define("WCSharp.Api.weathereffect", {
  base = { handle }
})
local terraindeformation = define("WCSharp.Api.terraindeformation", {
  base = { handle }
})
local fogstate = define("WCSharp.Api.fogstate", {
  base = { handle }
})
local fogmodifier = define("WCSharp.Api.fogmodifier", {
  base = { agent }
})
local dialog = define("WCSharp.Api.dialog", {
  base = { agent }
})
local button = define("WCSharp.Api.button", {
  base = { agent }
})
local quest = define("WCSharp.Api.quest", {
  base = { agent }
})
local questitem = define("WCSharp.Api.questitem", {
  base = { agent }
})
local defeatcondition = define("WCSharp.Api.defeatcondition", {
  base = { agent }
})
local timerdialog = define("WCSharp.Api.timerdialog", {
  base = { agent }
})
local leaderboard = define("WCSharp.Api.leaderboard", {
  base = { agent }
})
local multiboard = define("WCSharp.Api.multiboard", {
  base = { agent }
})
local multiboarditem = define("WCSharp.Api.multiboarditem", {
  base = { agent }
})
local trackable = define("WCSharp.Api.trackable", {
  base = { agent }
})
local gamecache = define("WCSharp.Api.gamecache", {
  base = { agent }
})
local version = define("WCSharp.Api.version", {
  base = { handle }
})
local itemtype = define("WCSharp.Api.itemtype", {
  base = { handle }
})
local texttag = define("WCSharp.Api.texttag", {
  base = { handle }
})
local attacktype = define("WCSharp.Api.attacktype", {
  base = { handle }
})
local damagetype = define("WCSharp.Api.damagetype", {
  base = { handle }
})
local weapontype = define("WCSharp.Api.weapontype", {
  base = { handle }
})
local soundtype = define("WCSharp.Api.soundtype", {
  base = { handle }
})
local lightning = define("WCSharp.Api.lightning", {
  base = { handle }
})
local pathingtype = define("WCSharp.Api.pathingtype", {
  base = { handle }
})
local mousebuttontype = define("WCSharp.Api.mousebuttontype", {
  base = { handle }
})
local animtype = define("WCSharp.Api.animtype", {
  base = { handle }
})
local subanimtype = define("WCSharp.Api.subanimtype", {
  base = { handle }
})
local image = define("WCSharp.Api.image", {
  base = { handle }
})
local ubersplat = define("WCSharp.Api.ubersplat", {
  base = { handle }
})
local hashtable = define("WCSharp.Api.hashtable", {
  base = { agent }
})
local framehandle = define("WCSharp.Api.framehandle", {
  base = { handle }
})
local originframetype = define("WCSharp.Api.originframetype", {
  base = { handle }
})
local framepointtype = define("WCSharp.Api.framepointtype", {
  base = { handle }
})
local textaligntype = define("WCSharp.Api.textaligntype", {
  base = { handle }
})
local frameeventtype = define("WCSharp.Api.frameeventtype", {
  base = { handle }
})
local oskeytype = define("WCSharp.Api.oskeytype", {
  base = { handle }
})
local abilityintegerfield = define("WCSharp.Api.abilityintegerfield", {
  base = { handle }
})
local abilityrealfield = define("WCSharp.Api.abilityrealfield", {
  base = { handle }
})
local abilitybooleanfield = define("WCSharp.Api.abilitybooleanfield", {
  base = { handle }
})
local abilitystringfield = define("WCSharp.Api.abilitystringfield", {
  base = { handle }
})
local abilityintegerlevelfield = define("WCSharp.Api.abilityintegerlevelfield", {
  base = { handle }
})
local abilityreallevelfield = define("WCSharp.Api.abilityreallevelfield", {
  base = { handle }
})
local abilitybooleanlevelfield = define("WCSharp.Api.abilitybooleanlevelfield", {
  base = { handle }
})
local abilitystringlevelfield = define("WCSharp.Api.abilitystringlevelfield", {
  base = { handle }
})
local abilityintegerlevelarrayfield = define("WCSharp.Api.abilityintegerlevelarrayfield", {
  base = { handle }
})
local abilityreallevelarrayfield = define("WCSharp.Api.abilityreallevelarrayfield", {
  base = { handle }
})
local abilitybooleanlevelarrayfield = define("WCSharp.Api.abilitybooleanlevelarrayfield", {
  base = { handle }
})
local abilitystringlevelarrayfield = define("WCSharp.Api.abilitystringlevelarrayfield", {
  base = { handle }
})
local unitintegerfield = define("WCSharp.Api.unitintegerfield", {
  base = { handle }
})
local unitrealfield = define("WCSharp.Api.unitrealfield", {
  base = { handle }
})
local unitbooleanfield = define("WCSharp.Api.unitbooleanfield", {
  base = { handle }
})
local unitstringfield = define("WCSharp.Api.unitstringfield", {
  base = { handle }
})
local unitweaponintegerfield = define("WCSharp.Api.unitweaponintegerfield", {
  base = { handle }
})
local unitweaponrealfield = define("WCSharp.Api.unitweaponrealfield", {
  base = { handle }
})
local unitweaponbooleanfield = define("WCSharp.Api.unitweaponbooleanfield", {
  base = { handle }
})
local unitweaponstringfield = define("WCSharp.Api.unitweaponstringfield", {
  base = { handle }
})
local itemintegerfield = define("WCSharp.Api.itemintegerfield", {
  base = { handle }
})
local itemrealfield = define("WCSharp.Api.itemrealfield", {
  base = { handle }
})
local itembooleanfield = define("WCSharp.Api.itembooleanfield", {
  base = { handle }
})
local itemstringfield = define("WCSharp.Api.itemstringfield", {
  base = { handle }
})
local movetype = define("WCSharp.Api.movetype", {
  base = { handle }
})
local targetflag = define("WCSharp.Api.targetflag", {
  base = { handle }
})
local armortype = define("WCSharp.Api.armortype", {
  base = { handle }
})
local heroattribute = define("WCSharp.Api.heroattribute", {
  base = { handle }
})
local defensetype = define("WCSharp.Api.defensetype", {
  base = { handle }
})
local regentype = define("WCSharp.Api.regentype", {
  base = { handle }
})
local unitcategory = define("WCSharp.Api.unitcategory", {
  base = { handle }
})
local pathingflag = define("WCSharp.Api.pathingflag", {
  base = { handle }
})
local commandbuttoneffect = define("WCSharp.Api.commandbuttoneffect", {
  base = { handle }
})

end

-- CoreSystemLib: eue.lua
do
local System = System
local throw = System.throw
local each = System.each
local er = System.er 
local Array = System.Array
local heapDown = Array.heapDown
local heapUp = Array.heapUp
local heapify = Array.heapify
local heapAdd = Array.heapAdd
local heapPop = Array.heapPop
local Comparer_1 = System.Comparer_1

local ArgumentNullException = System.ArgumentNullException
local ArgumentOutOfRangeException = System.ArgumentOutOfRangeException
local InvalidOperationException = System.InvalidOperationException

local select = select
local type = type

local function __ctor__(t, ...)
  local items, comparer
  local n = select("#", ...)
  if n == 0 then
  else
    items, comparer = ...
    if items == nil then throw(ArgumentNullException("items")) end
  end
  if comparer == nil then comparer = Comparer_1(t.__genericTPriority__).getDefault() end
  local compare = comparer.Compare
  local c = function (a, b) return compare(comparer, a[2], b[2]) end
  t.comparer, t.c = comparer, c
  if type(items) == "table" then
    local i = 1
    for _, tuple in each(items) do
      local element, priority = tuple[1], tuple[2]
      t[i] = { element, priority }
      i = i + 1
    end
    if i > 1 then
      heapify(t, c)
    end
  end
end

local function dequeue(t, n)
  local v = heapPop(t, t.c)
  if v == nil then throw(InvalidOperationException(er.InvalidOperation_EmptyQueue())) end
  return v[1]
end

local function enqueue(t, element, priority) 
  heapAdd(t, { element, priority }, t.c)
end

local function enqueueDequeue(t, element, priority)
  local n = #t
  if n ~= 0 then
    local c = t.c
    local v = { element, priority }
    local root = t[1]
    if c(v, root) > 0 then
      t[1] = v
      heapDown(t, 1, n, c)
      return root[1]
    end
  end
  return element
end

local function enqueueRange(t, ...)
  local len = select("#", ...)
  local n = #t
  if n == 0 then
    local i = 1
    if len == 1 then
      local items = ...
      for _, tuple in each(items) do
        local element, priority = tuple[1], tuple[2]
        t[i] = { element, priority }
        i = i + 1
      end
    else
      local elements, priority = ...
      for _, element in each(elements) do
        t[i] = { element, priority }
        i = i + 1
      end
    end
    if i > 1 then
      heapify(t, t.c)
    end
  else
    local c = t.c
    if len == 1 then
      local items = ...
      for _, tuple in each(items) do
        local element, priority = tuple[1], tuple[2]
        n = n + 1
        t[n] = { element, priority }
        heapUp(t, n, n, c)
      end
    else
      local elements, priority = ...
      for _, element in each(elements) do
        n = n + 1
        t[n] = { element, priority }
        heapUp(t, n, n, c)
      end
    end
  end
end

local function ensureCapacity(t, capacity)
  if capacity < 0 then
    throw(ArgumentOutOfRangeException("capacity", er.ArgumentOutOfRange_NeedNonNegNum()))
  end
  local n = #t
  local newcapacity = 2 * n
  newcapacity = math.max(newcapacity, n + 4)
  if newcapacity < 4 then newcapacity = 4 end
  return newcapacity
end

local function peek(t)
  local v = t[1]
  if v == nil then throw(InvalidOperationException(er.InvalidOperation_EmptyQueue())) end
  return v[1]
end

local function tryDequeue(t)
  local v = heapPop(t, t.c)
  if v then
    return true, v[1], v[2]
  end
  return false, t.__genericTElement__:default(), t.__genericTPriority__:default()
end

local function tryPeek(t)
  local v = t[1] 
  if v then
    return true, v[1], v[2]
  end
  return false, t.__genericTElement__:default(), t.__genericTPriority__:default()
end

local PriorityQueue = {
  __ctor__ = __ctor__,
  getCount = System.lengthFn,
  getComparer = Array.getOrderComparer,
  Clear = Array.clear,
  Dequeue = dequeue,
  Enqueue = enqueue,
  EnqueueDequeue = enqueueDequeue,
  EnqueueRange = enqueueRange,
  EnsureCapacity = ensureCapacity,
  Peek = peek,
  TrimExcess = System.emptyFn,
  TryDequeue = tryDequeue,
  TryPeek = tryPeek,
}

local PriorityQueueFn = System.define("System.Collections.Generic.PriorityQueue", function (TElement, TPriority)
  return { 
    __genericTElement__ = TElement,
    __genericTPriority__ = TPriority,
  }
end, PriorityQueue, 2)

System.PriorityQueue = PriorityQueueFn
end

-- CoreSystemLib: ionary.lua
do
local System = System
local Array = System.Array
local ArrayDictionary = System.ArrayDictionary

local SortedDictionary = {
  __ctor__ = Array.ctorOrderDict,
  getComparer = Array.getOrderComparer,
  getCount = System.lengthFn,
  AddKeyValue = Array.addOrderDict,
  AddKeyValueObj = Array.addOrderDictObj,
  Add = Array.addPairOrderDict,
  Clear = Array.clear,
  ContainsKey = Array.containsOrderDict,
  ContainsValue = ArrayDictionary.ContainsValue,
  ContainsKeyObj = Array.containsOrderDictObj,
  CopyTo = Array.CopyTo,
  GetEnumerator = Array.GetEnumerator,
  RemoveKey = Array.removeOrderDict,
  Remove =  Array.removePairOrderDict,
  TryGetValue = Array.tryGetValueOrderDict,
  getKeys = ArrayDictionary.getKeys,
  getValues = ArrayDictionary.getValues,
  get = Array.getOrderDict,
  getObj = Array.getOrderDictObj,
  set = Array.setOrderDict,
  setObj = Array.setOrderDictObj,
}

local SortedDictionaryFn = System.define("System.Collections.Generic.SortedDictionary", function(TKey, TValue) 
  return { 
    base = { System.IDictionary_2(TKey, TValue), System.IDictionary, System.IReadOnlyDictionary_2(TKey, TValue) },
    __genericT__ = System.KeyValuePair(TKey, TValue),
    __genericTKey__ = TKey,
    __genericTValue__ = TValue,
  }
end, SortedDictionary, 2)

System.SortedDictionary = SortedDictionaryFn
end

-- CoreSystemLib: .lua
do
local System = System
local lengthFn = System.lengthFn
local Array = System.Array
local ArrayDictionary = System.ArrayDictionary

local SortedList = {
  __ctor__ = Array.ctorOrderDict,
  getComparer = Array.getOrderComparer,
  getCount = lengthFn,
  getCapacity = lengthFn,
  setCapacity = Array.setCapacity,
  AddKeyValue = Array.addOrderDict,
  AddKeyValueObj = Array.addOrderDictObj,
  Add = Array.addPairOrderDict,
  Clear = Array.clear,
  ContainsKey = Array.containsOrderDict,
  ContainsValue = ArrayDictionary.ContainsValue,
  ContainsKeyObj = Array.containsOrderDictObj,
  GetEnumerator = Array.GetEnumerator,
  IndexOfKey = Array.indexKeyOrderDict,
  IndexOfValue =  Array.indexOfValue,
  RemoveKey = Array.removeOrderDict,
  Remove =  Array.removePairOrderDict,
  RemoveAt = Array.removeAt,
  TrimExcess = System.emptyFn,
  getKeys = ArrayDictionary.getKeys,
  getValues = ArrayDictionary.getValues,
  get = Array.getOrderDict,
  getObj = Array.getOrderDictObj,
  set = Array.setOrderDict,
  setObj = Array.setOrderDictObj,
}

local SortedListFn = System.define("System.Collections.Generic.SortedList", function(TKey, TValue) 
return { 
  base = { System.IDictionary_2(TKey, TValue), System.IDictionary, System.IReadOnlyDictionary_2(TKey, TValue) },
  __genericT__ = System.KeyValuePair(TKey, TValue),
  __genericTKey__ = TKey,
  __genericTValue__ = TValue,
}
end, SortedList, 2)

System.SortedList = SortedListFn
end

-- Generated by CSharp.lua Compiler
do
local System = System
System.namespace("", function (namespace)
  namespace.class("Constants", function (namespace)
    return {
      __metadata__ = function (out)
        return {
          class = { "Constants", 0x3E }
        }
      end
    }
  end)
end)

end
do
local System = System
local WCSharpEvents
local WCSharpShared
local WCSharpSync
System.import(function (out)
  WCSharpEvents = WCSharp.Events
  WCSharpShared = WCSharp.Shared
  WCSharpSync = WCSharp.Sync
end)
System.namespace("Source", function (namespace)
  namespace.class("Program", function (namespace)
    local Main, Start, class
    Main = function ()
      -- Delay a little since some stuff can break otherwise
      local timer = CreateTimer()
      TimerStart(timer, 0.01, false, function ()
        DestroyTimer(timer)
        Start()
      end)
    end
    Start = function ()
      System.try(function ()
        -- This part of the code will only run if the map is compiled in Debug mode
        class.Debug = true
        System.Console.WriteLine("This map is in debug mode. The map may not function as expected.")
        -- By calling these methods, whenever these systems call external code (i.e. your code),
        -- they will wrap the call in a try-catch and output any errors to the chat for easier debugging
        WCSharpEvents.PeriodicEvents.EnableDebug()
        WCSharpEvents.PlayerUnitEvents.EnableDebug()
        WCSharpSync.SyncSystem.EnableDebug()
        WCSharpShared.Delay.EnableDebug()


        -- Both styles compile to the same output
        -- WCSharp style, left footman
        local u = CreateUnit(Player(0), FourCC("hfoo"), -200, 0, 270)
        BlzSetUnitMaxMana(u, 250)
        BlzSetUnitMaxHP(u, BlzGetUnitMaxHP(u) + 700)

        -- War3Api style, right footman
        u = CreateUnit(Player(0), FourCC("hfoo"), 200, 0, 270)
        BlzSetUnitMaxMana(u, 250)
        BlzSetUnitMaxHP(u, BlzGetUnitMaxHP(u) + 700)

        System.Console.WriteLine("Hello, Azeroth.")
      end, function (default)
        local ex = default
        DisplayTextToPlayer(GetLocalPlayer(), 0, 0, ex:getMessage())
      end)
    end
    class = {
      Debug = false,
      Main = Main,
      __metadata__ = function (out)
        return {
          properties = {
            { "Debug", 0xE, System.Boolean }
          },
          methods = {
            { "Main", 0xE, Main },
            { "Start", 0x9, Start }
          },
          class = { "Program", 0x3E }
        }
      end
    }
    return class
  end)
end)

end
do
local System = System
local WCSharpApi = WCSharp.Api
local Arrayunit = System.Array(WCSharpApi.unit)
local ArrayInt32 = System.Array(System.Int32)
local Arrayforce = System.Array(WCSharpApi.force)
local Arraytimer = System.Array(WCSharpApi.timer)
local ArrayBoolean = System.Array(System.Boolean)
local Arraytrigger = System.Array(WCSharpApi.trigger)
local Arraymapcontrol = System.Array(WCSharpApi.mapcontrol)
local Arraytimerdialog = System.Array(WCSharpApi.timerdialog)
System.namespace("WCSharp.Api", function (namespace)
end)
System.namespace("WCSharp.Api.Enums", function (namespace)
  namespace.enum("TargetsAllowed", function ()
    return {
      Ground = 2,
      Air = 4,
      Structure = 8,
      Ward = 16,
      Item = 32,
      Tree = 64,
      Wall = 128,
      Debris = 256,
      Decoration = 512,
      Bridge = 1024,
      Self = 4096,
      PlayerUnits = 8192,
      Allied = 16384,
      Neutral = 32768,
      Enemy = 65536,
      Vulnerable = 1048576,
      Invulnerable = 2097152,
      Hero = 4194304,
      NonHero = 8388608,
      Alive = 16777216,
      Dead = 33554432,
      Organic = 67108864,
      Mechanical = 134217728,
      NonSuicidal = 268435456,
      Suicidal = 536870912,
      NonAncient = 1073741824,
      Ancient = -2147483648,
      NotSelf = 122880,
      Friend = 24576,
      __metadata__ = function (out)
        return {
          fields = {
            { "Air", 0xE, System.Int32 },
            { "Alive", 0xE, System.Int32 },
            { "Allied", 0xE, System.Int32 },
            { "Ancient", 0xE, System.Int32 },
            { "Bridge", 0xE, System.Int32 },
            { "Dead", 0xE, System.Int32 },
            { "Debris", 0xE, System.Int32 },
            { "Decoration", 0xE, System.Int32 },
            { "Enemy", 0xE, System.Int32 },
            { "Friend", 0xE, System.Int32 },
            { "Ground", 0xE, System.Int32 },
            { "Hero", 0xE, System.Int32 },
            { "Invulnerable", 0xE, System.Int32 },
            { "Item", 0xE, System.Int32 },
            { "Mechanical", 0xE, System.Int32 },
            { "Neutral", 0xE, System.Int32 },
            { "NonAncient", 0xE, System.Int32 },
            { "NonHero", 0xE, System.Int32 },
            { "NonSuicidal", 0xE, System.Int32 },
            { "NotSelf", 0xE, System.Int32 },
            { "Organic", 0xE, System.Int32 },
            { "PlayerUnits", 0xE, System.Int32 },
            { "Self", 0xE, System.Int32 },
            { "Structure", 0xE, System.Int32 },
            { "Suicidal", 0xE, System.Int32 },
            { "Tree", 0xE, System.Int32 },
            { "Vulnerable", 0xE, System.Int32 },
            { "Wall", 0xE, System.Int32 },
            { "Ward", 0xE, System.Int32 }
          },
          class = { "TargetsAllowed", 0x26 }
        }
      end
    }
  end)
end)

end
do
local System = System
local Linq = System.Linq.Enumerable
local WCSharpApi = WCSharp.Api
local ListString = System.List(System.String)
local WCSharpBuffs
local WCSharpDummies
local WCSharpEvents
local WCSharpSharedExtensions
local ListBuff
local ListDispel
local DictunitListBuff
local PeriodicDisposableTrigger_1IAura
System.import(function (out)
  WCSharpBuffs = WCSharp.Buffs
  WCSharpDummies = WCSharp.Dummies
  WCSharpEvents = WCSharp.Events
  WCSharpSharedExtensions = WCSharp.Shared.Extensions
  ListBuff = System.List(WCSharpBuffs.Buff)
  ListDispel = System.List(WCSharpBuffs.Dispel)
  DictunitListBuff = System.Dictionary(WCSharpApi.unit, ListBuff)
  PeriodicDisposableTrigger_1IAura = WCSharpEvents.PeriodicDisposableTrigger_1(WCSharpBuffs.IAura)
end)
System.namespace("WCSharp.Buffs", function (namespace)
  -- <summary>
  -- Auras constantly apply/refresh a linked <see cref="T:WCSharp.Buffs.Buff" /> on valid targets in range.
  -- </summary>
  -- <typeparam name="T">The buff that will be applied by this aura.</typeparam>
  namespace.class("Aura_1", function (namespace)
    return function (T)
      local group, getActive, setActive, getCaster, setCaster, getCastingPlayer, setCastingPlayer, getRadius, 
      setRadius, getDuration, setDuration, getSearchIntervalLeft, setSearchIntervalLeft, getSearchInterval, setSearchInterval, getStackBehaviour, 
      setStackBehaviour, getEffectString, setEffectString, getEffectAttachmentPoint, setEffectAttachmentPoint, getEffectScale, setEffectScale, getEffect, 
      setEffect, Apply, Action, GetActiveBuffs, Dispose, static, __ctor__
      local AuraBuffDuration_1T = WCSharp.Buffs.AuraBuffDuration_1(T)
      local ListAuraBuffDuration_1T = System.List(AuraBuffDuration_1T)
      static = function (this)
        group = CreateGroup()
      end
      -- <summary>
      -- Creates a new aura centered around the given caster.
      -- </summary>
      __ctor__ = function (this, caster)
        this.Caster = caster
        this.CastingPlayer = GetOwningPlayer(caster)
        this.activeBuffs = ListAuraBuffDuration_1T()
      end
      getActive, setActive = System.property("Active")
      getCaster, setCaster = System.property("Caster")
      getCastingPlayer, setCastingPlayer = System.property("CastingPlayer")
      getRadius, setRadius = System.property("Radius")
      getDuration, setDuration = System.property("Duration")
      getSearchIntervalLeft, setSearchIntervalLeft = System.property("SearchIntervalLeft")
      getSearchInterval, setSearchInterval = System.property("SearchInterval")
      getStackBehaviour, setStackBehaviour = System.property("StackBehaviour")
      getEffectString = function (this)
        return this.effectString
      end
      setEffectString = function (this, value)
        if not (this.effectString ~= value) then
          return
        end
        this.effectString = value
        if this.Active then
          if this.Effect ~= nil then
            DestroyEffect(this.Effect)
          end
          local default
          if System.String.IsNullOrEmpty(value) then
            default = nil
          else
            default = AddSpecialEffectTarget(value, this.Caster, this.effectAttachmentPoint)
          end
          this.Effect = default
        end
      end
      getEffectAttachmentPoint = function (this)
        return this.effectAttachmentPoint
      end
      setEffectAttachmentPoint = function (this, value)
        if value == nil then
          value = "origin"
        end
        if this.effectAttachmentPoint ~= value then
          this.effectAttachmentPoint = value
          if this.Effect ~= nil then
            DestroyEffect(this.Effect)
            this.Effect = AddSpecialEffectTarget(this.effectString, this.Caster, this.effectAttachmentPoint)
          end
        end
      end
      getEffectScale = function (this)
        if this.Effect ~= nil then
          return BlzGetSpecialEffectScale(this.Effect)
        end
        return this.effectScale
      end
      setEffectScale = function (this, value)
        if this.Effect ~= nil then
          BlzSetSpecialEffectScale(this.Effect, value)
        end
        this.effectScale = value
      end
      getEffect, setEffect = System.property("Effect")
      -- <inheritdoc />
      Apply = function (this)
        if not System.String.IsNullOrEmpty(this.effectString) then
          this.Effect = AddSpecialEffectTarget(this.effectString, this.Caster, this.effectAttachmentPoint)
          BlzSetSpecialEffectScale(this.Effect, this.effectScale)
        end
      end
      -- <inheritdoc />
      Action = function (this)
        if not UnitAlive(this.Caster) then
          this.Active = false
          return
        end
        if this.SearchIntervalLeft <= 0.03125 --[[1f / 32f]] then
          this.SearchIntervalLeft = this.SearchInterval
          GroupEnumUnitsInRange(group, GetUnitX(this.Caster), GetUnitY(this.Caster), this.Radius, nil)
          for _, unit in System.each(WCSharpSharedExtensions.GroupExtensions.ToList(group)) do
            local auraBuffDuration = Linq.FirstOrDefault(this.activeBuffs, function (x)
              return x.Unit == unit
            end)
            if auraBuffDuration ~= nil then
              auraBuffDuration.Duration = this.Duration
              auraBuffDuration.Buff.Duration = this.Duration
            elseif UnitFilter(this, unit) then
              local val = System.cast(T, WCSharpBuffs.BuffSystem.Add(CreateAuraBuff(this, unit), this.StackBehaviour))
              val.Duration = this.Duration
              this.activeBuffs:Add(AuraBuffDuration_1T(unit, val, this.Duration))
            end
          end
        else
          this.SearchIntervalLeft = this.SearchIntervalLeft - (0.03125 --[[1f / 32f]])
        end
        for num = #this.activeBuffs - 1, 0, -1 do
          local auraBuffDuration2 = this.activeBuffs:get(num)
          if auraBuffDuration2.Duration <= 0 then
            local buff = auraBuffDuration2.Buff
            local default = buff
            default.Stacks = default.Stacks - 1
            this.activeBuffs:RemoveAt(num)
          else
            auraBuffDuration2.Duration = auraBuffDuration2.Duration - (0.03125 --[[1f / 32f]])
          end
        end
      end
      -- <inheritdoc />
      GetActiveBuffs = function (this)
        return Linq.Select(this.activeBuffs, function (x)
          return x.Buff
        end, T)
      end
      -- <inheritdoc />
      Dispose = function (this)
        if this.Effect ~= nil then
          DestroyEffect(this.Effect)
        end
      end
      return {
        base = function (out)
          return {
            out.WCSharp.Buffs.IAura,
            out.WCSharp.Events.IPeriodicDisposableAction
          }
        end,
        effectAttachmentPoint = "origin",
        effectScale = 1,
        Active = false,
        getActive = getActive,
        setActive = setActive,
        getCaster = getCaster,
        setCaster = setCaster,
        getCastingPlayer = getCastingPlayer,
        setCastingPlayer = setCastingPlayer,
        Radius = 0,
        getRadius = getRadius,
        setRadius = setRadius,
        Duration = 3.1,
        getDuration = getDuration,
        setDuration = setDuration,
        SearchIntervalLeft = 0,
        getSearchIntervalLeft = getSearchIntervalLeft,
        setSearchIntervalLeft = setSearchIntervalLeft,
        SearchInterval = 1,
        getSearchInterval = getSearchInterval,
        setSearchInterval = setSearchInterval,
        StackBehaviour = 0,
        getStackBehaviour = getStackBehaviour,
        setStackBehaviour = setStackBehaviour,
        getEffectString = getEffectString,
        setEffectString = setEffectString,
        getEffectAttachmentPoint = getEffectAttachmentPoint,
        setEffectAttachmentPoint = setEffectAttachmentPoint,
        getEffectScale = getEffectScale,
        setEffectScale = setEffectScale,
        getEffect = getEffect,
        setEffect = setEffect,
        Apply = Apply,
        Action = Action,
        GetActiveBuffs = GetActiveBuffs,
        Dispose = Dispose,
        static = static,
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            fields = {
              { "activeBuffs", 0x1, System.List(out.WCSharp.Buffs.AuraBuffDuration_1(T)) },
              { "effectAttachmentPoint", 0x1, System.String },
              { "effectScale", 0x2, System.Single },
              { "effectString", 0x1, System.String },
              { "group", 0x9, out.WCSharp.Api.group }
            },
            properties = {
              { "Active", 0x106, System.Boolean, getActive, setActive },
              { "Caster", 0x106, out.WCSharp.Api.unit, getCaster, setCaster },
              { "CastingPlayer", 0x106, out.WCSharp.Api.player, getCastingPlayer, setCastingPlayer },
              { "Duration", 0x106, System.Single, getDuration, setDuration },
              { "Effect", 0x106, out.WCSharp.Api.effect, getEffect, setEffect },
              { "EffectAttachmentPoint", 0x106, System.String, getEffectAttachmentPoint, setEffectAttachmentPoint },
              { "EffectScale", 0x106, System.Single, getEffectScale, setEffectScale },
              { "EffectString", 0x106, System.String, getEffectString, setEffectString },
              { "Radius", 0x106, System.Single, getRadius, setRadius },
              { "SearchInterval", 0x106, System.Single, getSearchInterval, setSearchInterval },
              { "SearchIntervalLeft", 0x106, System.Single, getSearchIntervalLeft, setSearchIntervalLeft },
              { "StackBehaviour", 0x106, System.Int32, getStackBehaviour, setStackBehaviour }
            },
            methods = {
              { ".ctor", 0x106, nil, out.WCSharp.Api.unit },
              { "Action", 0x6, Action },
              { "Apply", 0x6, Apply },
              { "Dispose", 0x6, Dispose },
              { "GetActiveBuffs", 0x86, GetActiveBuffs, System.IEnumerable_1(out.WCSharp.Buffs.Buff) }
            },
            class = { "Aura", 0x116, T }
          }
        end
      }
    end
  end)
  -- <summary>
  -- This class is identical to <see cref="T:WCSharp.Buffs.BoundBuff" />, except that it implements a default <see cref="M:WCSharp.Buffs.AuraBoundBuff.OnStack(WCSharp.Buffs.Buff)" /> behaviour that better
  -- matches standard aura behaviour.
  -- <para>The <see cref="P:WCSharp.Buffs.Buff.Stacks" /> property will be set to the number of aura bearers applying the aura.</para>
  -- </summary>
  namespace.class("AuraBoundBuff", function (namespace)
    local OnStack, __ctor__
    -- <inheritdoc />
    __ctor__ = function (this, caster, target)
      System.base(this).__ctor__(this, caster, target)
    end
    -- <summary>
    -- Executes whenever this buff receives a new stack via <see cref="M:WCSharp.Buffs.BuffSystem.Add(WCSharp.Buffs.Buff,WCSharp.Buffs.StackBehaviour)" />.
    -- <para>AuraBoundBuffs will always have their <see cref="P:WCSharp.Buffs.Buff.Stacks" /> property set to the number of aura bearers applying the aura.</para>
    -- </summary>
    OnStack = function (this, newStack)
      this.Stacks = this.Stacks + 1
      return 1 --[[StackResult.Stack]]
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Buffs.BoundBuff
        }
      end,
      OnStack = OnStack,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          methods = {
            { ".ctor", 0x206, nil, out.WCSharp.Api.unit, out.WCSharp.Api.unit },
            { "OnStack", 0x186, OnStack, out.WCSharp.Buffs.Buff, System.Int32 }
          },
          class = { "AuraBoundBuff", 0x16 }
        }
      end
    }
  end)
  -- <summary>
  -- Helper class to track the duration of a buff specific to an aura applying it. Used to handle the case of multiple auras applying the same buff to a single unit.
  -- </summary>
  -- <typeparam name="T">The specific type of the buff being tracked.</typeparam>
  namespace.class("AuraBuffDuration_1", function (namespace)
    return function (T)
      local __ctor__
      __ctor__ = function (this, unit, buff, duration)
        this.Unit = unit
        this.Buff = buff
        this.Duration = duration
      end
      return {
        Duration = 0,
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            properties = {
              { "Buff", 0x6, T },
              { "Duration", 0x6, System.Single },
              { "Unit", 0x6, out.WCSharp.Api.unit }
            },
            methods = {
              { ".ctor", 0x306, nil, out.WCSharp.Api.unit, T, System.Single }
            },
            class = { "AuraBuffDuration", 0x104, T }
          }
        end
      }
    end
  end)
  -- <summary>
  -- Tracks and runs all active <see cref="T:WCSharp.Buffs.IAura" /> instances.
  -- </summary>
  namespace.class("AuraSystem", function (namespace)
    local periodicTrigger, getAuras, Add, RegisterForOwnershipChanges, OnUnitTypeChangesOwner, static
    static = function (this)
      periodicTrigger = PeriodicDisposableTrigger_1IAura(0.03125 --[[1f / 32f]])
    end
    getAuras = function ()
      return periodicTrigger:getActions()
    end
    -- <summary>
    -- Adds the given <paramref name="aura" /> to the system.
    -- </summary>
    Add = function (aura)
      aura:Apply()
      periodicTrigger:Add(aura)
    end
    -- <summary>
    -- By default, <see cref="P:WCSharp.Buffs.IAura.CastingPlayer" /> is not updated when a unit changes owner.
    -- <para>This adds an event to pass over all auras and update <see cref="P:WCSharp.Buffs.IAura.CastingPlayer" /> on ownership changes.</para>
    -- <para>This will ignore ownership changes of unit type 'xxxx' (<see cref="F:WCSharp.Dummies.DummySystem.UNIT_TYPE_DUMMY" />).</para>
    -- </summary>
    RegisterForOwnershipChanges = function ()
      WCSharpEvents.PlayerUnitEvents.Register14(809 --[[UnitTypeEvent.ChangesOwner]], OnUnitTypeChangesOwner)
    end
    OnUnitTypeChangesOwner = function ()
      local triggerUnit = GetTriggerUnit()
      if GetUnitTypeId(triggerUnit) == 2021161080 then
        return
      end
      for _, action in System.each(periodicTrigger:getActions()) do
        if action:getCaster() == triggerUnit then
          action:setCastingPlayer(GetOwningPlayer(triggerUnit))
        end
      end
    end
    return {
      getAuras = getAuras,
      Add = Add,
      RegisterForOwnershipChanges = RegisterForOwnershipChanges,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "periodicTrigger", 0x9, out.WCSharp.Events.PeriodicDisposableTrigger_1(out.WCSharp.Buffs.IAura) }
          },
          properties = {
            { "Auras", 0x20E, System.IEnumerable_1(out.WCSharp.Buffs.IAura), getAuras }
          },
          methods = {
            { "Add", 0x10E, Add, out.WCSharp.Buffs.IAura },
            { "OnUnitTypeChangesOwner", 0x9, OnUnitTypeChangesOwner },
            { "RegisterForOwnershipChanges", 0xE, RegisterForOwnershipChanges }
          },
          class = { "AuraSystem", 0x3E }
        }
      end
    }
  end)
  -- <summary>
  -- AutoBuffs are buffs which automatically tick for a specified damage/healing amount.
  -- <para>If automatic damage/healing is not required, it is recommended to use <see cref="T:WCSharp.Buffs.TickingBuff" /> instead.</para>
  -- </summary>
  namespace.class("AutoBuff", function (namespace)
    local Apply, Action, OnTick, Dispose, __ctor__
    -- <inheritdoc />
    __ctor__ = function (this, caster, target)
      System.base(this).__ctor__(this, caster, target)
    end
    -- <inheritdoc />
    Apply = function (this)
      if not System.String.IsNullOrEmpty(this.effectString) then
        this.Effect = AddSpecialEffectTarget(this.effectString, this.Target, this.effectAttachmentPoint)
        if this.effectScale ~= 1 then
          BlzSetSpecialEffectScale(this.Effect, this.effectScale)
        end
      end
      this.IntervalLeft = this.Interval
      this:OnApply()
    end
    -- <inheritdoc />
    Action = function (this)
      if this.Interval > 0 then
        while this.IntervalLeft <= 0.03125 --[[1f / 32f]] do
          this.IntervalLeft = this.IntervalLeft + this.Interval
          OnTick(this)
          if this.Active then
            if this.DamagePerInterval < 0 then
              SetWidgetLife(this.Target, GetWidgetLife(this.Target) + 0 - this.DamagePerInterval)
            elseif this.DamagePerInterval > 0 then
              local default
              if UnitAlive(this.Caster) then
                default = this.Caster
              else
                default = this.Target
              end
              local damageDealer = default
              UnitDamageTarget(damageDealer, this.Target, this.DamagePerInterval, false, false, this.AttackType, this.DamageType, WEAPON_TYPE_WHOKNOWS)
            end
          end
        end
        this.IntervalLeft = this.IntervalLeft - (0.03125 --[[1f / 32f]])
      end
      if this.Duration <= 0.03125 --[[1f / 32f]] then
        this:OnExpire()
        this.Active = false
      else
        this.Duration = this.Duration - (0.03125 --[[1f / 32f]])
      end
    end
    -- <summary>
    -- Executes every <see cref="P:WCSharp.Buffs.AutoBuff.Interval" />.
    -- <para>This is called BEFORE the automatic damage/healing occurs.</para>
    -- </summary>
    OnTick = function (this)
    end
    -- <inheritdoc />
    Dispose = function (this)
      this:OnDispose()
      if this.Effect ~= nil then
        DestroyEffect(this.Effect)
      end
      WCSharpBuffs.BuffSystem.Remove(this)
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Buffs.Buff
        }
      end,
      IntervalLeft = 0,
      Interval = 0,
      DamagePerInterval = 0,
      Apply = Apply,
      Action = Action,
      OnTick = OnTick,
      Dispose = Dispose,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "AttackType", 0x6, out.WCSharp.Api.attacktype },
            { "DamagePerInterval", 0x6, System.Single },
            { "DamageType", 0x6, out.WCSharp.Api.damagetype },
            { "Interval", 0x6, System.Single },
            { "IntervalLeft", 0x6, System.Single }
          },
          methods = {
            { ".ctor", 0x206, nil, out.WCSharp.Api.unit, out.WCSharp.Api.unit },
            { "Action", 0x6, Action },
            { "Apply", 0x6, Apply },
            { "Dispose", 0x6, Dispose },
            { "OnTick", 0x6, OnTick }
          },
          class = { "AutoBuff", 0x16 }
        }
      end
    }
  end)
  -- <summary>
  -- BoundBuffs have additional logic for binding the buff to an in-game buff with support of the <see cref="T:WCSharp.Dummies.DummySystem" />.
  -- <para>As a result, this buff works a little differently, and you should read the wiki in order to see how you should handle these buffs.</para>
  -- </summary>
  namespace.class("BoundBuff", function (namespace)
    local Bind, Bind1, Apply, Action, OnTick, OnStack, Dispose, class, 
    __ctor__
    -- <inheritdoc />
    __ctor__ = function (this, caster, target)
      WCSharpBuffs.Buff.__ctor__(this, caster, target)
    end
    -- <summary>
    -- Will use the <see cref="T:WCSharp.Dummies.DummySystem" /> to cast the given buffing ability on the target and then track it to synchronise removal.
    -- </summary>
    -- <param name="abilityId">The ability ID which applies the buff that should be tracked</param>
    -- <param name="buffId">The buff ID to track</param>
    -- <param name="orderId">The order ID of the ability to cast</param>
    -- <param name="level">The level of the ability to cast</param>
    -- <param name="dummyPlayer">Who the owner of the dummy should be set to, defaults to Neutral Passive</param>
    Bind = function (this, abilityId, buffId, orderId, level, dummyPlayer)
      if dummyPlayer == nil then
        dummyPlayer = Player(PLAYER_NEUTRAL_PASSIVE)
      end
      local dummy = WCSharpDummies.DummySystem.GetDummy()
      SetUnitOwner(dummy, dummyPlayer, false)
      UnitAddAbility(dummy, abilityId)
      if level > 1 then
        SetUnitAbilityLevel(dummy, abilityId, level)
      end
      IssueTargetOrderById(dummy, orderId, this.Target)
      WCSharpDummies.DummySystem.RecycleDummy(dummy, 2)
      this.buffId = buffId
    end
    -- <summary>
    -- Will add the given aura to the unit if necessary and set its level accordingly. The aura will automatically be hidden from the command UI
    -- and removed when the buff is removed.
    -- </summary>
    -- <param name="auraId"></param>
    -- <param name="buffId"></param>
    -- <param name="level"></param>
    Bind1 = function (this, auraId, buffId, level)
      if GetUnitAbilityLevel(this.Target, auraId) == 0 then
        UnitAddAbility(this.Target, auraId)
      end
      SetUnitAbilityLevel(this.Target, auraId, level)
      BlzUnitHideAbility(this.Target, auraId, true)
      this.auraId = auraId
      this.buffId = buffId
    end
    -- <inheritdoc />
    Apply = function (this)
      if not System.String.IsNullOrEmpty(this.effectString) then
        this.Effect = AddSpecialEffectTarget(this.effectString, this.Target, this.effectAttachmentPoint)
        if this.effectScale ~= 1 then
          BlzSetSpecialEffectScale(this.Effect, this.effectScale)
        end
      end
      this.IntervalLeft = this.Interval
      this:OnApply()
    end
    -- <inheritdoc />
    Action = function (this)
      if this.BindLeeway <= 0 then
        if GetUnitAbilityLevel(this.Target, this.buffId) == 0 then
          this.Active = false
          return
        end
      else
        this.BindLeeway = this.BindLeeway - 1
      end
      if this.Interval > 0 then
        while this.IntervalLeft <= 0.03125 --[[1f / 32f]] do
          this.IntervalLeft = this.IntervalLeft + this.Interval
          this:OnTick()
        end
        this.IntervalLeft = this.IntervalLeft - (0.03125 --[[1f / 32f]])
      end
      if this.Duration <= 0.03125 --[[1f / 32f]] then
        this:OnExpire()
        this.Active = false
      else
        this.Duration = this.Duration - (0.03125 --[[1f / 32f]])
      end
    end
    -- <summary>
    -- Executes every <see cref="P:WCSharp.Buffs.BoundBuff.Interval" />.
    -- </summary>
    OnTick = function (this)
    end
    -- <summary>
    -- Executes whenever this buff receives a new stack via <see cref="M:WCSharp.Buffs.BuffSystem.Add(WCSharp.Buffs.Buff,WCSharp.Buffs.StackBehaviour)" />.
    -- <para>By default, BoundBuff will return <see cref="F:WCSharp.Buffs.StackResult.Consume" />.</para>
    -- </summary>
    OnStack = function (this, newStack)
      return 2 --[[StackResult.Consume]]
    end
    -- <inheritdoc />
    Dispose = function (this)
      this:OnDispose()
      if this.Effect ~= nil then
        DestroyEffect(this.Effect)
      end
      WCSharpBuffs.BuffSystem.Remove(this)
      if this.auraId > 0 then
        if Linq.All(Linq.OfType(WCSharpBuffs.BuffSystem.GetBuffsOnUnit(this.Target), class), function (x)
          return x.auraId ~= this.auraId
        end) then
          UnitRemoveAbility(this.Target, this.auraId)
          UnitRemoveAbility(this.Target, this.buffId)
        end
      elseif Linq.All(Linq.OfType(WCSharpBuffs.BuffSystem.GetBuffsOnUnit(this.Target), class), function (x)
        return x.buffId ~= this.buffId
      end) then
        UnitRemoveAbility(this.Target, this.buffId)
      end
    end
    class = {
      base = function (out)
        return {
          out.WCSharp.Buffs.Buff
        }
      end,
      buffId = 0,
      auraId = 0,
      IntervalLeft = 0,
      Interval = 0,
      BindLeeway = 8,
      Bind = Bind,
      Bind1 = Bind1,
      Apply = Apply,
      Action = Action,
      OnTick = OnTick,
      OnStack = OnStack,
      Dispose = Dispose,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "auraId", 0x4, System.Int32 },
            { "buffId", 0x4, System.Int32 }
          },
          properties = {
            { "BindLeeway", 0x6, System.Int32 },
            { "Interval", 0x6, System.Single },
            { "IntervalLeft", 0x6, System.Single }
          },
          methods = {
            { ".ctor", 0x206, nil, out.WCSharp.Api.unit, out.WCSharp.Api.unit },
            { "Action", 0x6, Action },
            { "Apply", 0x6, Apply },
            { "Bind", 0x506, Bind, System.Int32, System.Int32, System.Int32, System.Int32, out.WCSharp.Api.player },
            { "Bind", 0x306, Bind1, System.Int32, System.Int32, System.Int32 },
            { "Dispose", 0x6, Dispose },
            { "OnStack", 0x186, OnStack, out.WCSharp.Buffs.Buff, System.Int32 },
            { "OnTick", 0x6, OnTick }
          },
          class = { "BoundBuff", 0x6 }
        }
      end
    }
    return class
  end)
  -- <summary>
  -- The most basic buff implementation, with almost all logic undefined.
  -- <para>It is recommended to use one of the more concrete types instead, such as <see cref="T:WCSharp.Buffs.PassiveBuff" />.</para>
  -- </summary>
  namespace.class("Buff", function (namespace)
    local getEffectString, setEffectString, getEffectAttachmentPoint, setEffectAttachmentPoint, getEffectScale, setEffectScale, OnApply, OnStack, 
    OnDeath, OnDispel, OnDispose, OnExpire, RemoveInstantly, class, __ctor__
    -- <summary>
    -- Will set Caster, CastingPlayer, Target and TargetPlayer accordingly.
    -- </summary>
    __ctor__ = function (this, caster, target)
      this.BuffTypes = ListString()
      this.Caster = caster
      this.CastingPlayer = GetOwningPlayer(caster)
      this.Target = target
      this.TargetPlayer = GetOwningPlayer(target)
    end
    getEffectString = function (this)
      return this.effectString
    end
    setEffectString = function (this, value)
      if not (this.effectString ~= value) then
        return
      end
      this.effectString = value
      if not this.Active then
        return
      end
      if this.Effect ~= nil then
        DestroyEffect(this.Effect)
      end
      if not System.String.IsNullOrEmpty(value) then
        this.Effect = AddSpecialEffectTarget(value, this.Target, this.effectAttachmentPoint)
        if this.effectScale ~= 1 then
          BlzSetSpecialEffectScale(this.Effect, this.effectScale)
        end
      else
        this.Effect = nil
      end
    end
    getEffectAttachmentPoint = function (this)
      return this.effectAttachmentPoint
    end
    setEffectAttachmentPoint = function (this, value)
      if value == nil then
        value = "origin"
      end
      if not (this.effectAttachmentPoint ~= value) then
        return
      end
      this.effectAttachmentPoint = value
      if this.Effect ~= nil then
        DestroyEffect(this.Effect)
        this.Effect = AddSpecialEffectTarget(this.effectString, this.Target, this.effectAttachmentPoint)
        if this.effectScale ~= 1 then
          BlzSetSpecialEffectScale(this.Effect, this.effectScale)
        end
      end
    end
    getEffectScale = function (this)
      if this.Effect ~= nil then
        return BlzGetSpecialEffectScale(this.Effect)
      end
      return this.effectScale
    end
    setEffectScale = function (this, value)
      if this.Effect ~= nil then
        BlzSetSpecialEffectScale(this.Effect, value)
      end
      this.effectScale = value
    end
    -- <summary>
    -- Executes immediately upon application of the buff.
    -- </summary>
    OnApply = function (this)
    end
    -- <summary>
    -- Executes whenever this buff receives a new stack via <see cref="M:WCSharp.Buffs.BuffSystem.Add(WCSharp.Buffs.Buff,WCSharp.Buffs.StackBehaviour)" />.
    -- <para>By default, the stacks of <paramref name="newStack" /> are added to this buff and <see cref="F:WCSharp.Buffs.StackResult.Stack" /> is returned.</para>
    -- </summary>
    OnStack = function (this, newStack)
      this.Stacks = this.Stacks + newStack.Stacks
      this.Duration = math.Max(this.Duration, newStack.Duration)
      return 1 --[[StackResult.Stack]]
    end
    -- <summary>
    -- Executes immediately after <see cref="P:WCSharp.Buffs.Buff.Target" /> dies.
    -- <para>Note: <paramref name="killingBlow" /> will be true if the unit dies while the buffs actions are being evaluated.
    -- It may not be directly responsible for the death due to asynchronous events.</para>
    -- </summary>
    -- <param name="killingBlow"></param>
    -- <returns></returns>
    OnDeath = function (this, killingBlow)
    end
    -- <summary>
    -- Executes when an attempt is made to dispel the target. Return the number of dispel charges consmed.
    -- <para>If after this method is called the Stacks is at 0, the buff is automatically disposed.</para>
    -- </summary>
    OnDispel = function (this, dispeller, dispelCharges)
      local num = math.Min(this.Stacks, dispelCharges)
      this.Stacks = this.Stacks - num
      return num
    end
    -- <summary>
    -- Executes when the buff is removed for any reason whatsoever.
    -- </summary>
    OnDispose = function (this)
    end
    -- <summary>
    -- Executes when the buff expires by reaching the end of its duration. Does not trigger when the buff is removed via a dispel or target dies.
    -- </summary>
    OnExpire = function (this)
    end
    -- <summary>
    -- Will instantly remove this buff from the unit, including calling <see cref="M:WCSharp.Buffs.Buff.OnDispose" /> and any other relevant steps.
    -- <para>It's recommended to just set <see cref="P:WCSharp.Buffs.Buff.Active" /> to false unless the removal should not be delayed for some reason.</para>
    -- </summary>
    RemoveInstantly = function (this)
      if this.Active then
        this.Active = false
        this.Disposed = true
        this:Dispose()
      end
    end
    class = {
      effectAttachmentPoint = "origin",
      effectScale = 1,
      Active = false,
      Duration = 0,
      IsBeneficial = false,
      Stacks = 1,
      getEffectString = getEffectString,
      setEffectString = setEffectString,
      getEffectAttachmentPoint = getEffectAttachmentPoint,
      setEffectAttachmentPoint = setEffectAttachmentPoint,
      getEffectScale = getEffectScale,
      setEffectScale = setEffectScale,
      Disposed = false,
      OnApply = OnApply,
      OnStack = OnStack,
      OnDeath = OnDeath,
      OnDispel = OnDispel,
      OnDispose = OnDispose,
      OnExpire = OnExpire,
      RemoveInstantly = RemoveInstantly,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "effectAttachmentPoint", 0x2, System.String },
            { "effectScale", 0x2, System.Single },
            { "effectString", 0x2, System.String }
          },
          properties = {
            { "Active", 0x6, System.Boolean },
            { "BuffTypes", 0x6, System.List(System.String) },
            { "Caster", 0x6, out.WCSharp.Api.unit },
            { "CastingPlayer", 0x6, out.WCSharp.Api.player },
            { "Disposed", 0x4, System.Boolean },
            { "Duration", 0x6, System.Single },
            { "Effect", 0x6, out.WCSharp.Api.effect },
            { "EffectAttachmentPoint", 0x106, System.String, getEffectAttachmentPoint, setEffectAttachmentPoint },
            { "EffectScale", 0x106, System.Single, getEffectScale, setEffectScale },
            { "EffectString", 0x106, System.String, getEffectString, setEffectString },
            { "IsBeneficial", 0x6, System.Boolean },
            { "Stacks", 0x6, System.Int32 },
            { "Target", 0x6, out.WCSharp.Api.unit },
            { "TargetPlayer", 0x6, out.WCSharp.Api.player }
          },
          methods = {
            { ".ctor", 0x206, nil, out.WCSharp.Api.unit, out.WCSharp.Api.unit },
            { "OnApply", 0x6, OnApply },
            { "OnDeath", 0x106, OnDeath, System.Boolean },
            { "OnDispel", 0x286, OnDispel, out.WCSharp.Api.unit, System.Int32, System.Int32 },
            { "OnDispose", 0x6, OnDispose },
            { "OnExpire", 0x6, OnExpire },
            { "OnStack", 0x186, OnStack, class, System.Int32 },
            { "RemoveInstantly", 0x6, RemoveInstantly }
          },
          class = { "Buff", 0x16 }
        }
      end
    }
    return class
  end)
  -- <summary>
  -- Tracks and runs all active <see cref="T:WCSharp.Buffs.Buff" /> instances.
  -- </summary>
  namespace.class("BuffSystem", function (namespace)
    local buffs, buffsByUnit, index, size, getBuffs, Action, OnDeath, Add, 
    Remove, RegisterForOwnershipChanges, OnUnitTypeChangesOwner, GetBuffsOnUnit, Dispel, Dispel1, Dispel2, Dispel3, 
    static
    static = function (this)
      buffs = ListBuff()
      buffsByUnit = DictunitListBuff()
      WCSharpEvents.PlayerUnitEvents.Register14(812 --[[UnitTypeEvent.Dies]], OnDeath)
      WCSharpEvents.PeriodicEvents.AddPeriodicEvent(Action, 0.03125)
    end
    index = 0
    size = 0
    getBuffs = function ()
      return Linq.Where(buffs, function (x)
        return x.Active
      end)
    end
    Action = function ()
      size = #buffs
      index = 0
      while index < size do
        local continue
        repeat
          local buff = buffs:get(index)
          if buff.Active then
            buff:Action()
          end
          if buff.Active then
            index = index + 1
            continue = true
            break
          end
          size = size - 1
          buffs:set(index, buffs:get(size))
          buffs:RemoveAt(size)
          if not buff.Disposed then
            buff:Dispose()
          end
          continue = true
        until 1
        if not continue then
          break
        end
      end
      return true
    end
    OnDeath = function ()
      local triggerUnit = GetTriggerUnit()
      if index < size then
        local buff = buffs:get(index)
        if buff.Active and buff.Target == triggerUnit then
          buff:OnDeath(true)
          buff.Active = false
        end
      end
      local default, value = buffsByUnit:TryGetValue(triggerUnit, nil)
      if not default then
        return
      end
      for i = 0, #value - 1 do
        local buff2 = value:get(i)
        if buff2.Active then
          buff2:OnDeath(false)
          buff2.Active = false
        end
      end
    end
    -- <summary>
    -- Adds the given <paramref name="buff" /> to the system. If addition is successful, will invoke <see cref="M:WCSharp.Buffs.Buff.OnApply" />.
    -- </summary>
    -- <returns>The buff that was applied, or the buff whose stacks were added to.</returns>
    Add = function (buff, stackBehaviour)
      local default, value = buffsByUnit:TryGetValue(buff.Target, nil)
      if default then
        if stackBehaviour ~= 0 then
          local type = System.ObjectGetType(buff)
          for i = 0, #value - 1 do
            local buff2 = value:get(i)
            if buff2.Active and System.ObjectGetType(buff2) == type and (stackBehaviour == 1 --[[StackBehaviour.Stack]] or (stackBehaviour == 2 --[[StackBehaviour.StackCaster]] and buff.Caster == buff2.Caster) or buff.CastingPlayer == buff2.CastingPlayer) then
              repeat
                local extern = buff2:OnStack(buff)
                if extern == 1 --[[StackResult.Stack]] then
                  return buff2
                elseif extern == 2 --[[StackResult.Consume]] then
                  buff2.Active = false
                  break
                end
              until 1
            end
          end
        end
        value:Add(buff)
      else
        local extern = ListBuff()
        extern:Add(buff)
        buffsByUnit:AddKeyValue(buff.Target, extern)
      end
      buffs:Add(buff)
      buff.Active = true
      buff:Apply()
      return buff
    end
    Remove = function (buff)
      local default, value = buffsByUnit:TryGetValue(buff.Target, nil)
      if default then
        if #value == 1 then
          buffsByUnit:RemoveKey(buff.Target)
        else
          value:Remove(buff)
        end
      end
    end
    -- <summary>
    -- By default, <see cref="P:WCSharp.Buffs.Buff.CastingPlayer" /> and <see cref="P:WCSharp.Buffs.Buff.TargetPlayer" /> are not updated when a unit changes owner.
    -- <para>This adds an event to pass over all auras and update <see cref="P:WCSharp.Buffs.Buff.CastingPlayer" /> and <see cref="P:WCSharp.Buffs.Buff.TargetPlayer" /> on ownership changes.</para>
    -- <para>This will ignore ownership changes of unit type 'xxxx' (<see cref="F:WCSharp.Dummies.DummySystem.UNIT_TYPE_DUMMY" />).</para>
    -- </summary>
    RegisterForOwnershipChanges = function ()
      WCSharpEvents.PlayerUnitEvents.Register14(809 --[[UnitTypeEvent.ChangesOwner]], OnUnitTypeChangesOwner)
    end
    OnUnitTypeChangesOwner = function ()
      local triggerUnit = GetTriggerUnit()
      if GetUnitTypeId(triggerUnit) == 2021161080 then
        return
      end
      for i = 0, #buffs - 1 do
        if buffs:get(i).Caster == triggerUnit then
          buffs:get(i).CastingPlayer = GetOwningPlayer(triggerUnit)
        end
      end
      local owningPlayer = GetOwningPlayer(triggerUnit)
      for _, item in System.each(GetBuffsOnUnit(triggerUnit)) do
        item.TargetPlayer = owningPlayer
      end
    end
    -- <summary>
    -- Uses a dictionary to quickly find all buffs attached to the given unit.
    -- </summary>
    GetBuffsOnUnit = function (unit)
      local default, value = buffsByUnit:TryGetValue(unit, nil)
      if not default then
        return System.Array.Empty(WCSharpBuffs.Buff)
      end
      return Linq.ToList(Linq.Where(value, function (x)
        return x.Active
      end))
    end
    -- <summary>
    -- Attempts to dispel buffs from the target. Buff types are ignored.
    -- </summary>
    -- <param name="target">The target to dispel from.</param>
    -- <param name="dispeller">The caster of the dispel effect.</param>
    -- <param name="isBeneficial">Whether to dispel beneficial or detrimental buffs.</param>
    -- <param name="dispelAmount">The maximum number of buffs to dispel.</param>
    -- <returns>All dispels.</returns>
    Dispel = function (target, dispeller, isBeneficial, dispelAmount)
      local list = ListDispel()
      for _, item in System.each(GetBuffsOnUnit(target)) do
        if item.IsBeneficial == isBeneficial then
          local stacks = item.Stacks
          local num = item:OnDispel(dispeller, dispelAmount)
          dispelAmount = dispelAmount - num
          if item.Stacks == 0 then
            item:RemoveInstantly()
          end
          list:Add(WCSharpBuffs.Dispel(item, num, stacks - item.Stacks))
          if dispelAmount <= 0 then
            break
          end
        end
      end
      return list
    end
    -- <summary>
    -- Attempts to dispel buffs from the target with the given dispel type.
    -- </summary>
    -- <param name="target">The target to dispel from.</param>
    -- <param name="dispeller">The caster of the dispel effect.</param>
    -- <param name="isBeneficial">Whether to dispel beneficial or detrimental buffs.</param>
    -- <param name="dispelAmount">The maximum number of buffs to dispel.</param>
    -- <param name="dispelType">The type of buffs that can be dispelled.</param>
    -- <returns>All dispels.</returns>
    Dispel1 = function (target, dispeller, isBeneficial, dispelAmount, dispelType)
      local list = ListDispel()
      for _, item in System.each(GetBuffsOnUnit(target)) do
        if item.IsBeneficial == isBeneficial and item.BuffTypes:Contains(dispelType) then
          local stacks = item.Stacks
          local num = item:OnDispel(dispeller, dispelAmount)
          dispelAmount = dispelAmount - num
          if item.Stacks == 0 then
            item:RemoveInstantly()
          end
          list:Add(WCSharpBuffs.Dispel(item, num, stacks - item.Stacks))
          if dispelAmount <= 0 then
            break
          end
        end
      end
      return list
    end
    -- <summary>
    -- Attempts to dispel buffs with any of the given dispel types.
    -- </summary>
    -- <param name="target">The target to dispel from.</param>
    -- <param name="dispeller">The caster of the dispel effect.</param>
    -- <param name="isBeneficial">Whether to dispel beneficial or detrimental buffs.</param>
    -- <param name="dispelAmount">The maximum number of buffs to dispel.</param>
    -- <param name="dispelTypes">The buff types that can be dispelled.</param>
    -- <returns>All dispels.</returns>
    Dispel2 = function (target, dispeller, isBeneficial, dispelAmount, dispelTypes)
      local list = ListDispel()
      for _, item in System.each(GetBuffsOnUnit(target)) do
        if item.IsBeneficial == isBeneficial and Linq.Any(item.BuffTypes, function (x)
          return Linq.Contains(dispelTypes, x)
        end) then
          local stacks = item.Stacks
          local num = item:OnDispel(dispeller, dispelAmount)
          dispelAmount = dispelAmount - num
          if item.Stacks == 0 then
            item:RemoveInstantly()
          end
          list:Add(WCSharpBuffs.Dispel(item, num, stacks - item.Stacks))
          if dispelAmount <= 0 then
            break
          end
        end
      end
      return list
    end
    -- <summary>
    -- For more complex buff hierarchies. Attempts to dispel buffs with any of the given dispel types, unless it has an excluded type.
    -- </summary>
    -- <param name="target">The target to dispel from.</param>
    -- <param name="dispeller">The caster of the dispel effect.</param>
    -- <param name="isBeneficial">Whether to dispel beneficial or detrimental buffs.</param>
    -- <param name="dispelAmount">The maximum number of buffs to dispel.</param>
    -- <param name="dispelTypes">The buff types that can be dispelled.</param>
    -- <param name="exclusions">Will not dispel buffs with any of the given exclusion types.</param>
    -- <returns>All dispels.</returns>
    Dispel3 = function (target, dispeller, isBeneficial, dispelAmount, dispelTypes, exclusions)
      local list = ListDispel()
      for _, item in System.each(GetBuffsOnUnit(target)) do
        if item.IsBeneficial == isBeneficial and Linq.Any(item.BuffTypes, function (x)
          return dispelTypes:Contains(x)
        end) and not Linq.Any(item.BuffTypes, function (x)
          return exclusions:Contains(x)
        end) then
          local stacks = item.Stacks
          local num = item:OnDispel(dispeller, dispelAmount)
          dispelAmount = dispelAmount - num
          if item.Stacks == 0 then
            item:RemoveInstantly()
          end
          list:Add(WCSharpBuffs.Dispel(item, num, stacks - item.Stacks))
          if dispelAmount <= 0 then
            break
          end
        end
      end
      return list
    end
    return {
      getBuffs = getBuffs,
      Add = Add,
      Remove = Remove,
      RegisterForOwnershipChanges = RegisterForOwnershipChanges,
      GetBuffsOnUnit = GetBuffsOnUnit,
      Dispel = Dispel,
      Dispel1 = Dispel1,
      Dispel2 = Dispel2,
      Dispel3 = Dispel3,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "buffs", 0x9, System.List(out.WCSharp.Buffs.Buff) },
            { "buffsByUnit", 0x9, System.Dictionary(out.WCSharp.Api.unit, System.List(out.WCSharp.Buffs.Buff)) },
            { "index", 0x9, System.Int32 },
            { "size", 0x9, System.Int32 }
          },
          properties = {
            { "Buffs", 0x20E, System.IEnumerable_1(out.WCSharp.Buffs.Buff), getBuffs }
          },
          methods = {
            { "Action", 0x89, Action, System.Boolean },
            { "Add", 0x28E, Add, out.WCSharp.Buffs.Buff, System.Int32, out.WCSharp.Buffs.Buff },
            { "Dispel", 0x48E, Dispel, out.WCSharp.Api.unit, out.WCSharp.Api.unit, System.Boolean, System.Int32, System.List(out.WCSharp.Buffs.Dispel) },
            { "Dispel", 0x58E, Dispel1, out.WCSharp.Api.unit, out.WCSharp.Api.unit, System.Boolean, System.Int32, System.String, System.List(out.WCSharp.Buffs.Dispel) },
            { "Dispel", 0x58E, Dispel2, out.WCSharp.Api.unit, out.WCSharp.Api.unit, System.Boolean, System.Int32, System.Array(System.String), System.List(out.WCSharp.Buffs.Dispel) },
            { "Dispel", 0x68E, Dispel3, out.WCSharp.Api.unit, out.WCSharp.Api.unit, System.Boolean, System.Int32, System.List(System.String), System.List(System.String), System.List(out.WCSharp.Buffs.Dispel) },
            { "GetBuffsOnUnit", 0x18E, GetBuffsOnUnit, out.WCSharp.Api.unit, System.IList_1(out.WCSharp.Buffs.Buff) },
            { "OnDeath", 0x9, OnDeath },
            { "OnUnitTypeChangesOwner", 0x9, OnUnitTypeChangesOwner },
            { "RegisterForOwnershipChanges", 0xE, RegisterForOwnershipChanges },
            { "Remove", 0x10C, Remove, out.WCSharp.Buffs.Buff }
          },
          class = { "BuffSystem", 0x3E }
        }
      end
    }
  end)
  -- <summary>
  -- Represents a dispel attempt on a buff. Will be returned even if the dispel was resisted (i.e. no stacks were dispelled).
  -- </summary>
  namespace.class("Dispel", function (namespace)
    local __ctor__
    __ctor__ = function (this, buff, dispelChargesConsumed, buffStacksDispelled)
      this.Buff = buff
      this.FullyDispelled = not buff.Active
      this.DispelChargesConsumed = dispelChargesConsumed
      this.BuffStacksDispelled = buffStacksDispelled
    end
    return {
      FullyDispelled = false,
      DispelChargesConsumed = 0,
      BuffStacksDispelled = 0,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "Buff", 0x6, out.WCSharp.Buffs.Buff },
            { "BuffStacksDispelled", 0x6, System.Int32 },
            { "DispelChargesConsumed", 0x6, System.Int32 },
            { "FullyDispelled", 0x6, System.Boolean }
          },
          methods = {
            { ".ctor", 0x304, nil, out.WCSharp.Buffs.Buff, System.Int32, System.Int32 }
          },
          class = { "Dispel", 0x6 }
        }
      end
    }
  end)
  -- <summary>
  -- Backing interface for auras, since different auras can otherwise not be stored in a generic way.
  -- </summary>
  namespace.interface("IAura", function ()
    return {
      base = function (out)
        return {
          out.WCSharp.Events.IPeriodicDisposableAction
        }
      end,
      __metadata__ = function (out)
        return {
          class = { "IAura", 0x16 }
        }
      end
    }
  end)
  -- <summary>
  -- A very basic buff implementation that simply applies and removes itself according to its duration.
  -- </summary>
  namespace.class("PassiveBuff", function (namespace)
    local Apply, Action, Dispose, __ctor__
    -- <inheritdoc />
    __ctor__ = function (this, caster, target)
      System.base(this).__ctor__(this, caster, target)
    end
    -- <inheritdoc />
    Apply = function (this)
      if not System.String.IsNullOrEmpty(this.effectString) then
        this.Effect = AddSpecialEffectTarget(this.effectString, this.Target, this.effectAttachmentPoint)
        if this.effectScale ~= 1 then
          BlzSetSpecialEffectScale(this.Effect, this.effectScale)
        end
      end
      this:OnApply()
    end
    -- <inheritdoc />
    Action = function (this)
      if this.Duration <= 0.03125 --[[1f / 32f]] then
        this:OnExpire()
        this.Active = false
      else
        this.Duration = this.Duration - (0.03125 --[[1f / 32f]])
      end
    end
    -- <inheritdoc />
    Dispose = function (this)
      this:OnDispose()
      if this.Effect ~= nil then
        DestroyEffect(this.Effect)
      end
      WCSharpBuffs.BuffSystem.Remove(this)
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Buffs.Buff
        }
      end,
      Apply = Apply,
      Action = Action,
      Dispose = Dispose,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          methods = {
            { ".ctor", 0x206, nil, out.WCSharp.Api.unit, out.WCSharp.Api.unit },
            { "Action", 0x6, Action },
            { "Apply", 0x6, Apply },
            { "Dispose", 0x6, Dispose }
          },
          class = { "PassiveBuff", 0x16 }
        }
      end
    }
  end)
  -- <summary>
  -- A specialized buff for handling multiple underlying buffs, each with their own duration. The buff will tick only once, but the durations of all underlying buffs are managed individually.
  -- </summary>
  -- <typeparam name="T">This should be the type implementing this abstract.</typeparam>
  namespace.class("RollingBuff_1", function (namespace)
    return function (T)
      local getBuffs, OnStack, Apply, Action, OnExpireStack, OnTick, Dispose, __ctor__
      local ListT = System.List(T)
      -- <inheritdoc />
      __ctor__ = function (this, caster, target)
        System.base(this).__ctor__(this, caster, target)
        this.buffs = ListT()
      end
      getBuffs = function (this)
        return this.buffs
      end
      -- <summary>
      -- Executes whenever this buff receives a new stack via <see cref="M:WCSharp.Buffs.BuffSystem.Add(WCSharp.Buffs.Buff,WCSharp.Buffs.StackBehaviour)" />.
      -- When overriding this method, you should always invoke base.OnStack(newStack).
      -- </summary>
      OnStack = function (this, newStack)
        local val = System.cast(T, newStack)
        this.buffs:Add(val)
        this.Stacks = this.Stacks + val.Stacks
        return 1 --[[StackResult.Stack]]
      end
      -- <inheritdoc />
      Apply = function (this)
        if not System.String.IsNullOrEmpty(this.effectString) then
          this.Effect = AddSpecialEffectTarget(this.effectString, this.Target, this.effectAttachmentPoint)
          if this.effectScale ~= 1 then
            BlzSetSpecialEffectScale(this.Effect, this.effectScale)
          end
        end
        this.IsMainStack = true
        this.buffs:Add(System.cast(T, this))
        this:OnApply()
      end
      -- <inheritdoc />
      Action = function (this)
        if this.Interval > 0 then
          while this.IntervalLeft <= 0.03125 --[[1f / 32f]] do
            this.IntervalLeft = this.Interval
            OnTick(this)
          end
        end
        this.IntervalLeft = this.IntervalLeft - (0.03125 --[[1f / 32f]])
        WCSharpSharedExtensions.IListExtensions.IterateWithRemoval(this.buffs, function (x)
          if x.Duration <= 0.03125 --[[1f / 32f]] then
            this.Stacks = this.Stacks - x.Stacks
            OnExpireStack(this, x)
            x:OnExpire()
            x:OnDispose()
            return false
          end
          local val = x
          val.Duration = x.Duration - 0.03125 --[[1f / 32f]]
          return true
        end, T)
        if #this.buffs == 0 then
          this:OnExpire()
          this.Active = false
        else
          this.Duration = Linq.Max(this.buffs, function (x)
            return x.Duration
          end, System.Single)
        end
      end
      -- <summary>
      -- Executes whenever a stack expires (executed from the main stack).
      -- </summary>
      -- <param name="expiredStack">The stack that expired.</param>
      OnExpireStack = function (this, expiredStack)
      end
      -- <summary>
      -- Executes every <see cref="P:WCSharp.Buffs.RollingBuff`1.Interval" />.
      -- </summary>
      OnTick = function (this)
      end
      -- <inheritdoc />
      Dispose = function (this)
        this:OnDispose()
        if this.Effect ~= nil then
          DestroyEffect(this.Effect)
        end
        WCSharpBuffs.BuffSystem.Remove(this)
      end
      return {
        base = function (out)
          return {
            out.WCSharp.Buffs.Buff
          }
        end,
        IntervalLeft = 0,
        Interval = 0,
        IsMainStack = false,
        getBuffs = getBuffs,
        OnStack = OnStack,
        Apply = Apply,
        Action = Action,
        OnExpireStack = OnExpireStack,
        OnTick = OnTick,
        Dispose = Dispose,
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            fields = {
              { "buffs", 0x1, System.List(T) }
            },
            properties = {
              { "Buffs", 0x206, System.IEnumerable_1(T), getBuffs },
              { "Interval", 0x6, System.Single },
              { "IntervalLeft", 0x6, System.Single },
              { "IsMainStack", 0x6, System.Boolean }
            },
            methods = {
              { ".ctor", 0x206, nil, out.WCSharp.Api.unit, out.WCSharp.Api.unit },
              { "Action", 0x6, Action },
              { "Apply", 0x6, Apply },
              { "Dispose", 0x6, Dispose },
              { "OnExpireStack", 0x106, OnExpireStack, T },
              { "OnStack", 0x186, OnStack, out.WCSharp.Buffs.Buff, System.Int32 },
              { "OnTick", 0x6, OnTick }
            },
            class = { "RollingBuff", 0x116, T }
          }
        end
      }
    end
  end)
  -- <summary>
  -- An enum to indicate how buffs should be stacked.
  -- </summary>
  namespace.enum("StackBehaviour", function ()
    return {
      None = 0,
      Stack = 1,
      StackCaster = 2,
      StackPlayer = 3,
      __metadata__ = function (out)
        return {
          fields = {
            { "None", 0xE, System.Int32 },
            { "Stack", 0xE, System.Int32 },
            { "StackCaster", 0xE, System.Int32 },
            { "StackPlayer", 0xE, System.Int32 }
          },
          class = { "StackBehaviour", 0x26 }
        }
      end
    }
  end)
  -- <summary>
  -- An enum to indicate how the buffs were stacked.
  -- </summary>
  namespace.enum("StackResult", function ()
    return {
      Reject = 0,
      Stack = 1,
      Consume = 2,
      __metadata__ = function (out)
        return {
          fields = {
            { "Consume", 0xE, System.Int32 },
            { "Reject", 0xE, System.Int32 },
            { "Stack", 0xE, System.Int32 }
          },
          class = { "StackResult", 0x26 }
        }
      end
    }
  end)
  -- <summary>
  -- A simple buff that only adds a ticking behaviour, allowing an action to be performed every interval.
  -- If you simply want to damage/heal every tick, you can use <see cref="T:WCSharp.Buffs.AutoBuff" /> instead to simplify the process.
  -- </summary>
  namespace.class("TickingBuff", function (namespace)
    local Apply, Action, Dispose, __ctor__
    -- <inheritdoc />
    __ctor__ = function (this, caster, target)
      System.base(this).__ctor__(this, caster, target)
    end
    -- <inheritdoc />
    Apply = function (this)
      if not System.String.IsNullOrEmpty(this.effectString) then
        this.Effect = AddSpecialEffectTarget(this.effectString, this.Target, this.effectAttachmentPoint)
        if this.effectScale ~= 1 then
          BlzSetSpecialEffectScale(this.Effect, this.effectScale)
        end
      end
      this.IntervalLeft = this.Interval
      this:OnApply()
    end
    -- <inheritdoc />
    Action = function (this)
      if this.Interval > 0 then
        while this.IntervalLeft <= 0.03125 --[[1f / 32f]] do
          this.IntervalLeft = this.IntervalLeft + this.Interval
          OnTick(this)
        end
      end
      this.IntervalLeft = this.IntervalLeft - (0.03125 --[[1f / 32f]])
      if this.Duration <= 0.03125 --[[1f / 32f]] then
        this:OnExpire()
        this.Active = false
      else
        this.Duration = this.Duration - (0.03125 --[[1f / 32f]])
      end
    end
    -- <inheritdoc />
    Dispose = function (this)
      this:OnDispose()
      if this.Effect ~= nil then
        DestroyEffect(this.Effect)
      end
      WCSharpBuffs.BuffSystem.Remove(this)
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Buffs.Buff
        }
      end,
      IntervalLeft = 0,
      Interval = 0,
      Apply = Apply,
      Action = Action,
      Dispose = Dispose,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "Interval", 0x6, System.Single },
            { "IntervalLeft", 0x6, System.Single }
          },
          methods = {
            { ".ctor", 0x206, nil, out.WCSharp.Api.unit, out.WCSharp.Api.unit },
            { "Action", 0x6, Action },
            { "Apply", 0x6, Apply },
            { "Dispose", 0x6, Dispose }
          },
          class = { "TickingBuff", 0x16 }
        }
      end
    }
  end)
end)

end
do
local System = System
local Linq = System.Linq.Enumerable
local ArrayInt32 = System.Array(System.Int32)
local WCSharpDateTime
local WCSharpEvents
local WCSharpShared
local WCSharpSync
local DictInt32Int32
local DictInt32WcDateTime
System.import(function (out)
  WCSharpDateTime = WCSharp.DateTime
  WCSharpEvents = WCSharp.Events
  WCSharpShared = WCSharp.Shared
  WCSharpSync = WCSharp.Sync
  DictInt32Int32 = System.Dictionary(System.Int32, System.Int32)
  DictInt32WcDateTime = System.Dictionary(System.Int32, WCSharpDateTime.WcDateTime)
end)
System.namespace("WCSharp.DateTime", function (namespace)
  namespace.class("DateTimeSyncMessage", function (namespace)
    return {
      PlayerId = 0,
      Seconds = 0,
      __metadata__ = function (out)
        return {
          properties = {
            { "PlayerId", 0x6, System.Int32 },
            { "Seconds", 0x6, System.Int32 }
          },
          class = { "DateTimeSyncMessage", 0x4 }
        }
      end
    }
  end)
  -- <summary>
  -- Defines a number of different methods by which a synchronised <see cref="T:WCSharp.DateTime.WcDateTime" /> can be calculated.
  -- </summary>
  namespace.enum("DateTimeSyncMethod", function ()
    return {
      Earliest = 0,
      Latest = 1,
      Average = 2,
      BestFit = 3,
      __metadata__ = function (out)
        return {
          fields = {
            { "Average", 0xE, System.Int32 },
            { "BestFit", 0xE, System.Int32 },
            { "Earliest", 0xE, System.Int32 },
            { "Latest", 0xE, System.Int32 }
          },
          class = { "DateTimeSyncMethod", 0x26 }
        }
      end
    }
  end)
  namespace.class("DateTimeSystem", function (namespace)
    local Run, HandleDateTimeSyncMessage, ResolveEarliest, ResolveLatest, ResolveAverage, ResolveBestFit, __ctor__
    __ctor__ = function (this, method, action)
      this.method = method
      this.action = action
      this.timestamps = DictInt32WcDateTime()
    end
    Run = function (this)
      local default = WCSharpDateTime.DateTimeSyncMessage()
      default.PlayerId = GetPlayerId(GetLocalPlayer())
      default.Seconds = WCSharpDateTime.WcDateTime.getLocalTime().TotalSeconds
      local message = default
      WCSharpSync.SyncSystem.Subscribe(System.fn(this, HandleDateTimeSyncMessage), WCSharpDateTime.DateTimeSyncMessage)
      WCSharpSync.SyncSystem.Send(message, WCSharpDateTime.DateTimeSyncMessage)
    end
    HandleDateTimeSyncMessage = function (this, message)
      this.timestamps:set(message.PlayerId, WCSharpDateTime.WcDateTime(message.Seconds))
      if Linq.All(WCSharpShared.Util.EnumeratePlayers(PLAYER_SLOT_STATE_PLAYING, MAP_CONTROL_USER), function (x)
        return this.timestamps:ContainsKey(GetPlayerId(x))
      end) then
        local default
        local extern = this.method
        if extern == 0 --[[DateTimeSyncMethod.Earliest]] then
          default = ResolveEarliest(this)
        elseif extern == 1 --[[DateTimeSyncMethod.Latest]] then
          default = ResolveLatest(this)
        elseif extern == 2 --[[DateTimeSyncMethod.Average]] then
          default = ResolveAverage(this)
        else
          default = ResolveBestFit(this)
        end
        local wcDateTime = default
        WCSharpSync.SyncSystem.Unsubscribe(System.fn(this, HandleDateTimeSyncMessage), WCSharpDateTime.DateTimeSyncMessage)
        WCSharpDateTime.WcDateTime.StoreSynchronisedTime(wcDateTime.TotalSeconds, this.method)
        local ref = this.action
        if ref ~= nil then
          ref(wcDateTime)
        end
      end
    end
    ResolveEarliest = function (this)
      return Linq.Min(this.timestamps:getValues())
    end
    ResolveLatest = function (this)
      return Linq.Max(this.timestamps:getValues())
    end
    ResolveAverage = function (this)
      local count = this.timestamps:getCount()
      return WCSharpDateTime.WcDateTime(Linq.Sum(Linq.OrderBy(this.timestamps:getValues(), function (x)
        return x.TotalSeconds
      end, nil, System.Int32), function (x)
        return System.div(x.TotalSeconds, count)
      end))
    end
    ResolveBestFit = function (this)
      if System.mod(this.timestamps:getCount(), 2) == 0 then
        local list = Linq.ToList(Linq.OrderBy(this.timestamps:getValues(), function (x)
          return x.TotalSeconds
        end, nil, System.Int32))
        local num = System.div(this.timestamps:getCount(), 2)
        local wcDateTime = list:get(num - 1)
        local wcDateTime2 = list:get(num)
        local num2 = Linq.Sum(list, function (x)
          return System.div(x.TotalSeconds, this.timestamps:getCount())
        end)
        if math.Abs(wcDateTime.TotalSeconds - num2) < math.Abs(wcDateTime2.TotalSeconds - num2) then
          return wcDateTime
        end
        return wcDateTime2
      end
      return Linq.ToList(Linq.OrderBy(this.timestamps:getValues(), function (x)
        return x.TotalSeconds
      end, nil, System.Int32)):get(System.div(this.timestamps:getCount(), 2))
    end
    return {
      method = 0,
      Run = Run,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "action", 0x1, System.Delegate(out.WCSharp.DateTime.WcDateTime, System.Void) },
            { "method", 0x1, System.Int32 },
            { "timestamps", 0x1, System.Dictionary(System.Int32, out.WCSharp.DateTime.WcDateTime) }
          },
          methods = {
            { ".ctor", 0x206, nil, System.Int32, System.Delegate(out.WCSharp.DateTime.WcDateTime, System.Void) },
            { "HandleDateTimeSyncMessage", 0x101, HandleDateTimeSyncMessage, out.WCSharp.DateTime.DateTimeSyncMessage },
            { "ResolveAverage", 0x81, ResolveAverage, out.WCSharp.DateTime.WcDateTime },
            { "ResolveBestFit", 0x81, ResolveBestFit, out.WCSharp.DateTime.WcDateTime },
            { "ResolveEarliest", 0x81, ResolveEarliest, out.WCSharp.DateTime.WcDateTime },
            { "ResolveLatest", 0x81, ResolveLatest, out.WCSharp.DateTime.WcDateTime },
            { "Run", 0x6, Run }
          },
          class = { "DateTimeSystem", 0x4 }
        }
      end
    }
  end)
  namespace.class("Os", function (namespace)
    return {
      __metadata__ = function (out)
        return {
          class = { "Os", 0x3C }
        }
      end
    }
  end)
  -- <summary>
  -- Represents an instant in time, with a precision in seconds.
  -- </summary>
  namespace.class("WcDateTime", function (namespace)
    local daysToMonth365, daysToMonth366, baseTime, offsetByMethod, getSecond, getMinute, getHour, getDay, 
    getMonth, getYear, getDayOfWeek, getDayOfYear, getDate, getTimeOfDay, getZero, getMinValue, 
    getMaxValue, getLocalTime, getLocalTimeUtc, GetSeconds, op_Addition, op_Subtraction, op_Subtraction1, op_Equality, 
    op_Inequality, op_LessThan, op_LessThanOrEqual, op_GreaterThan, op_GreaterThanOrEqual, GetDatePart, GetDatePart1, Add, 
    Subtract, AddSeconds, AddMinutes, AddHours, AddDays, AddMonths, AddYears, CompareToObj, 
    CompareTo, Equals, EqualsObj, GetHashCode, ToString, ToString1, ZeroPad, Format, 
    Deserialize, Serialize, GetCurrentTime, TryGetCurrentTime, StoreSynchronisedTime, class, static, __ctor1__, 
    __ctor2__, __ctor3__, __ctor4__
    namespace.enum("DatePart", function ()
      return {
        Year = 0,
        DayOfYear = 1,
        Month = 2,
        Day = 3,
        __metadata__ = function (out)
          return {
            fields = {
              { "Day", 0xE, System.Int32 },
              { "DayOfYear", 0xE, System.Int32 },
              { "Month", 0xE, System.Int32 },
              { "Year", 0xE, System.Int32 }
            },
            class = { "DatePart", 0x21 }
          }
        end
      }
    end)
    static = function (this)
      daysToMonth365 = ArrayInt32 { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 }
      daysToMonth366 = ArrayInt32 { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 }
      offsetByMethod = DictInt32Int32()
    end
    -- <summary>
    -- Creates a new <see cref="T:WCSharp.DateTime.WcDateTime" /> with the given number of seconds since January 1st, 1970, 00:00:00.
    -- </summary>
    -- <param name="seconds"></param>
    __ctor1__ = function (this, seconds)
      this.TotalSeconds = seconds
    end
    -- <summary>
    -- Creates a new <see cref="T:WCSharp.DateTime.WcDateTime" /> with the given year, month and day.
    -- <para>The given date must be between January 1st, 1970, 00:00:00 and January 19, 2038, 03:14:07.</para>
    -- </summary>
    -- <param name="year">The year. Must be between 1970 and 2038.</param>
    -- <param name="month">The month of the year. Must be between 1 and 12.</param>
    -- <param name="day">The day of the month.</param>
    __ctor2__ = function (this, year, month, day)
      this.TotalSeconds = GetSeconds(year, month, day, 0, 0, 0)
    end
    __ctor3__ = function (this, table)
      this.TotalSeconds = GetSeconds(System.cast(System.Int32, table:get("year")), System.cast(System.Int32, table:get("month")), System.cast(System.Int32, table:get("day")), System.cast(System.Int32, table:get("hour")), System.cast(System.Int32, table:get("min")), System.cast(System.Int32, table:get("sec")))
    end
    -- <summary>
    -- 
    -- </summary>
    -- <param name="year">The year. Must be between 1970 and 2038.</param>
    -- <param name="month">The month of the year. Must be between 1 and 12.</param>
    -- <param name="day">The day of the month.</param>
    -- <param name="hour">The hour of the day. Must be between 0 and 23.</param>
    -- <param name="minute">The minute of the hour. Must be between 0 and 59.</param>
    -- <param name="second">The second of the minute. Must be between 0 and 59.</param>
    __ctor4__ = function (this, year, month, day, hour, minute, second)
      this.TotalSeconds = GetSeconds(year, month, day, hour, minute, second)
    end
    baseTime = -1
    getSecond = function (this)
      return System.mod(this.TotalSeconds, 60)
    end
    getMinute = function (this)
      return System.div(System.mod(this.TotalSeconds, 3600), 60)
    end
    getHour = function (this)
      return System.div(System.mod(this.TotalSeconds, 86400), 3600)
    end
    getDay = function (this)
      return GetDatePart(this, 3 --[[DatePart.Day]])
    end
    getMonth = function (this)
      return GetDatePart(this, 2 --[[DatePart.Month]])
    end
    getYear = function (this)
      return GetDatePart(this, 0 --[[DatePart.Year]])
    end
    getDayOfWeek = function (this)
      local num = System.mod(System.div(this.TotalSeconds, 86400), 7)
      if num < 0 then
        num = 7 + num
      end
      return (System.mod((num + 4), 7))
    end
    getDayOfYear = function (this)
      return GetDatePart(this, 1 --[[DatePart.DayOfYear]]) + 1
    end
    getDate = function (this)
      local year, month, day = GetDatePart1(this)
      return System.new(class, 2, year, month, day)
    end
    getTimeOfDay = function (this)
      return System.new(WCSharpDateTime.WcTimeSpan, 2, getHour(this), getMinute(this), getSecond(this))
    end
    getZero = function ()
      return class(0)
    end
    getMinValue = function ()
      return class(-2147483648 --[[Int32.MinValue]])
    end
    getMaxValue = function ()
      return class(2147483647 --[[Int32.MaxValue]])
    end
    getLocalTime = function ()
      return System.new(class, 3, WCSharpShared.LuaTable(os.date("*t")))
    end
    getLocalTimeUtc = function ()
      return System.new(class, 3, WCSharpShared.LuaTable(os.date("!*t")))
    end
    GetSeconds = function (year, month, day, hour, minute, second)
      local num = 0
      if year < 1970 or year > 2038 then
        System.throw(System.ArgumentException("WcDateTime before 1970 or after 2038 are not supported."))
      end
      if month < 1 or month > 12 then
        System.throw(System.ArgumentException("Month cannot be less than 1 or greater than 12."))
      end
      if hour < 0 or hour > 23 then
        System.throw(System.ArgumentException("Hour cannot be less than 0 or greater than 23."))
      end
      if minute < 0 or minute > 59 then
        System.throw(System.ArgumentException("Minutes cannot be less than 0 or greater than 59."))
      end
      if second < 0 or second > 59 then
        System.throw(System.ArgumentException("Seconds cannot be less than 0 or greater than 59."))
      end
      for i = 1970, year - 1 do
        num = ((System.mod(i, 4) ~= 0) and (num + 31536000) or (num + 31622400))
      end
      local default
      if (System.mod(year, 4) == 0) then
        default = daysToMonth366
      else
        default = daysToMonth365
      end
      local array = default
      if day < 0 or day > array:get(month) - array:get(month - 1) then
        System.throw(System.ArgumentException("Days cannot be less than 0 or greater the number of days in the current month (" .. array:get(month) - array:get(month - 1) .. ")."))
      end
      return num + array:get(month - 1) * 86400 + (day - 1) * 86400 + hour * 3600 + minute * 60 + second
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcDateTime" /> that is equal to <paramref name="a" /> plus the number of seconds in <paramref name="b" />.
    -- </summary>
    op_Addition = function (a, b)
      return class(a.TotalSeconds + b.seconds)
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcDateTime" /> that is equal to <paramref name="a" /> minus the number of seconds in <paramref name="b" />.
    -- </summary>
    op_Subtraction = function (a, b)
      return class(a.TotalSeconds - b.seconds)
    end
    -- <summary>
    -- Returns a <see cref="T:WCSharp.DateTime.WcTimeSpan" /> representing the time from <paramref name="a" /> to <paramref name="b" />.
    -- </summary>
    op_Subtraction1 = function (a, b)
      return WCSharpDateTime.WcTimeSpan(a.TotalSeconds - b.TotalSeconds)
    end
    -- <summary>
    -- Returns true if <paramref name="a" /> is the same time as <paramref name="b" />.
    -- </summary>
    op_Equality = function (a, b)
      if a ~= nil then
        return a.TotalSeconds == b.TotalSeconds
      end
      return b == nil
    end
    -- <summary>
    -- Returns true if <paramref name="a" /> is not the same time as <paramref name="b" />.
    -- </summary>
    op_Inequality = function (a, b)
      return not (op_Equality(a, b))
    end
    -- <summary>
    -- Returns true if <paramref name="a" /> is earlier than <paramref name="b" />.
    -- </summary>
    op_LessThan = function (a, b)
      if a ~= nil and b ~= nil then
        return a.TotalSeconds < b.TotalSeconds
      end
      return false
    end
    -- <summary>
    -- Returns true if <paramref name="a" /> is earlier than or equal to <paramref name="b" />.
    -- </summary>
    op_LessThanOrEqual = function (a, b)
      if a ~= nil and b ~= nil then
        return a.TotalSeconds <= b.TotalSeconds
      end
      return false
    end
    -- <summary>
    -- Returns true if <paramref name="a" /> is later than <paramref name="b" />.
    -- </summary>
    op_GreaterThan = function (a, b)
      if a ~= nil and b ~= nil then
        return a.TotalSeconds > b.TotalSeconds
      end
      return false
    end
    -- <summary>
    -- Returns true if <paramref name="a" /> is later than or equal to <paramref name="b" />.
    -- </summary>
    op_GreaterThanOrEqual = function (a, b)
      if a ~= nil and b ~= nil then
        return a.TotalSeconds >= b.TotalSeconds
      end
      return false
    end
    GetDatePart = function (this, part)
      local num = System.div(this.TotalSeconds, 86400)
      local num2 = System.div(num, 1461)
      num = num - (num2 * 1461)
      local num3 = ((num == 1095) and 2 or (System.div(num, 365)))
      if num3 == 4 then
        num3 = 3
      end
      local result = 1970 + num2 * 4 + num3
      if part == 0 --[[DatePart.Year]] then
        return result
      end
      num = num - ((num >= 1096) and (num3 * 365 + 1) or (num3 * 365))
      if part == 1 --[[DatePart.DayOfYear]] then
        return num
      end
      local default
      if (num3 == 2) then
        default = daysToMonth366
      else
        default = daysToMonth365
      end
      local array = default
      local i
      do
        i = (num >> 5) + 1
        while num >= array:get(i) do
          i = i + 1
        end
      end
      if part ~= 2 --[[DatePart.Month]] then
        return num - array:get(i - 1) + 1
      end
      return i
    end
    GetDatePart1 = function (this, year, month, day)
      local num = System.div(this.TotalSeconds, 86400)
      local num2 = System.div(num, 1461)
      num = num - (num2 * 1461)
      local num3 = ((num == 1095) and 2 or (System.div(num, 365)))
      if num3 == 4 then
        num3 = 3
      end
      year = 1970 + num2 * 4 + num3
      num = num - ((num >= 1096) and (num3 * 365 + 1) or (num3 * 365))
      local default
      if (num3 == 2) then
        default = daysToMonth366
      else
        default = daysToMonth365
      end
      local array = default
      month = (num >> 5) + 1
      while num >= array:get(month) do
        month = month + 1
      end
      day = num - array:get(month - 1) + 1
      return year, month, day
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcDateTime" /> that is an amount of time indicated by <paramref name="value" /> into the future.
    -- </summary>
    -- <param name="value">The amount of time to move this instance into the future.</param>
    Add = function (this, value)
      return class(this.TotalSeconds + value.seconds)
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcDateTime" /> that is an amount of time indicated by <paramref name="value" /> into the past.
    -- </summary>
    -- <param name="value">The amount of time to move this instance into the past.</param>
    Subtract = function (this, value)
      return op_Subtraction1(this, value)
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcDateTime" /> that is a given number of seconds into the future.
    -- </summary>
    -- <param name="seconds">The amount of seconds to move this instance into the future.</param>
    AddSeconds = function (this, seconds)
      return class(this.TotalSeconds + seconds)
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcDateTime" /> that is a given number of minutes into the future.
    -- </summary>
    -- <param name="minutes">The amount of minutes to move this instance into the future.</param>
    AddMinutes = function (this, minutes)
      return class(this.TotalSeconds + minutes * 60)
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcDateTime" /> that is a given number of hours into the future.
    -- </summary>
    -- <param name="hours">The amount of hours to move this instance into the future.</param>
    AddHours = function (this, hours)
      return class(this.TotalSeconds + hours * 3600)
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcDateTime" /> that is a given number of days into the future.
    -- </summary>
    -- <param name="days">The amount of days to move this instance into the future.</param>
    AddDays = function (this, days)
      return class(this.TotalSeconds + days * 86400)
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcDateTime" /> that is a given number of months into the future.
    -- </summary>
    -- <param name="months">The amount of months to move this instance into the future.</param>
    AddMonths = function (this, months)
      local year, month, day = GetDatePart1(this)
      year = year + (System.div((month + months), 12))
      month = System.mod((month - 1 + months), 12) + 1
      local default
      if (System.mod(year, 4) == 0) then
        default = daysToMonth366
      else
        default = daysToMonth365
      end
      day = math.Min(default:get(month), day)
      return System.new(class, 4, year, month, day, getHour(this), getMinute(this), getSecond(this))
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcDateTime" /> that is a given number of years into the future.
    -- </summary>
    -- <param name="years">The amount of years to move this instance into the future.</param>
    AddYears = function (this, years)
      return AddMonths(this, years * 12)
    end
    -- <inheritdoc />
    CompareToObj = function (this, obj)
      local other = obj
      if not (System.is(other, class)) then
        System.throw(System.ArgumentException("Cannot compare WcDateTime to non-WcDateTime object"))
      end
      return CompareTo(this, other)
    end
    -- <inheritdoc />
    CompareTo = function (this, other)
      if other ~= nil then
        return System.Int32.CompareTo(this.TotalSeconds, other.TotalSeconds)
      end
      return 1
    end
    -- <inheritdoc />
    Equals = function (this, other)
      if other ~= nil then
        return this.TotalSeconds == other.TotalSeconds
      end
      return false
    end
    -- <inheritdoc />
    EqualsObj = function (this, obj)
      local wcDateTime = obj
      if System.is(wcDateTime, class) then
        return this.TotalSeconds == wcDateTime.TotalSeconds
      end
      return false
    end
    -- <inheritdoc />
    GetHashCode = function (this)
      return this.TotalSeconds
    end
    -- <summary>
    -- Outputs this <see cref="T:WCSharp.DateTime.WcDateTime" /> in the default format of "yyyy-MM-dd HH:mm:ss".
    -- </summary>
    ToString = function (this)
      return ToString1(this, "yyyy-MM-dd HH:mm:ss")
    end
    -- <summary>
    -- Returns a string representation using the given format.
    -- <para>Supports standard C# format specifiers for year, month, day, hour, minute and second.</para>
    -- <para>See the wiki for more information on the format specification.</para>
    -- <para>Alternatively, use <see cref="M:WCSharp.DateTime.WcDateTime.Format(System.String)" /> for a C/Lua style format.</para>
    -- </summary>
    -- <param name="format">The format to print the date in.</param>
    ToString1 = function (this, format)
      local year, _, day = GetDatePart1(this)
      if format:Contains("yyyyy") then
        format = format:Replace("yyyyy", ZeroPad(System.mod(year, 100000), 5))
      elseif format:Contains("yyyy") then
        format = format:Replace("yyyy", ZeroPad(System.mod(year, 10000), 4))
      elseif format:Contains("yyy") then
        format = format:Replace("yyy", ZeroPad(System.mod(year, 1000), 3))
      elseif format:Contains("yy") then
        format = format:Replace("yy", ZeroPad(System.mod(year, 100), 2))
      elseif format:Contains(121 --[['y']]) then
        format = format:Replace("y", System.Int32.ToString((System.mod(year, 100))))
      end
      if format:Contains("MM") then
        format = format:Replace("MM", ZeroPad(getMonth(this), 2))
      elseif format:Contains(77 --[['M']]) then
        format = format:Replace("M", System.Int32.ToString(getMonth(this)))
      end
      if format:Contains("dd") then
        format = format:Replace("dd", ZeroPad(day, 2))
      elseif format:Contains(100 --[['d']]) then
        format = format:Replace("d", System.Int32.ToString(day))
      end
      if format:Contains("hh") then
        format = format:Replace("hh", ZeroPad(System.mod((getHour(this) + 1), 12), 2))
      elseif format:Contains(104 --[['h']]) then
        format = format:Replace("h", System.Int32.ToString((System.mod((getHour(this) + 1), 12))))
      elseif format:Contains("HH") then
        format = format:Replace("HH", ZeroPad(getHour(this), 2))
      elseif format:Contains(72 --[['H']]) then
        format = format:Replace("H", System.Int32.ToString(getHour(this)))
      end
      if format:Contains("mm") then
        format = format:Replace("mm", ZeroPad(getMinute(this), 2))
      elseif format:Contains(109 --[['m']]) then
        format = format:Replace("m", System.Int32.ToString(getMinute(this)))
      end
      if format:Contains("ss") then
        format = format:Replace("ss", ZeroPad(getSecond(this), 2))
      elseif format:Contains(115 --[['s']]) then
        format = format:Replace("s", System.Int32.ToString(getSecond(this)))
      end
      if format:Contains(116 --[['t']]) then
        format = format:Replace("t", (getHour(this) >= 12) and "P" or "A")
      elseif format:Contains("tt") then
        format = format:Replace("tt", (getHour(this) >= 12) and "PM" or "AM")
      end
      return format
    end
    ZeroPad = function (number, length)
      local text = System.Int32.ToString(number)
      while #text < length do
        text = "0" .. System.toString(text)
      end
      return text
    end
    -- <summary>
    -- Formats the given time in seconds according to the given format.
    -- <para>For more information regarding the format, see <see href="http://www.cplusplus.com/reference/ctime/strftime/" />.</para>
    -- <para>Alternatively, use <see cref="M:WCSharp.DateTime.WcDateTime.ToString(System.String)" /> for a C# style format.</para>
    -- </summary>
    -- <param name="format">The format to print the date in.</param>
    -- <returns></returns>
    Format = function (this, format)
      if not (format == "*t") and not (format == "!*t") then
        return os.date(format, this.TotalSeconds)
      end
      return format
    end
    -- <summary>
    -- Attempts to parse the given string as the number of seconds since January 1st, 1970.
    -- </summary>
    -- <returns>Null if <paramref name="string" /> is not a valid integer.</returns>
    Deserialize = function (string)
      local default, result = System.Int32.TryParse(string, nil)
      if not default then
        return nil
      end
      return class(result)
    end
    -- <summary>
    -- Returns a string representing the number of seconds since January 1st, 1970 contained in <paramref name="wcDateTime" />.
    -- </summary>
    Serialize = function (wcDateTime)
      return System.Int32.ToString(wcDateTime.TotalSeconds)
    end
    -- <summary>
    -- This will produce a synchronised time for all players. The given action will be called once a synchronised time has been determined.
    -- <para>This is done by individually querying the time, synchronizing this data across all players, and then deciding an overall time.</para>
    -- </summary>
    -- <param name="action">This action will be called when the synchronised time is determined.</param>
    -- <param name="method">The method it should use for determining the synchronised time.</param>
    GetCurrentTime = function (action, method)
      local default, value = offsetByMethod:TryGetValue(method, nil)
      if default then
        local extern = action
        if extern ~= nil then
          extern(class(baseTime + value))
        end
      else
        WCSharpDateTime.DateTimeSystem(method, action):Run()
      end
    end
    -- <summary>
    -- This will attempt to immediately return a synchronised time for all players, if it has already been calculated.
    -- If it has not been calculated, this will return false.
    -- <para>If it has not been calculated, will start a calculation procedure behind the scenes, but this will take some time.</para>
    -- </summary>
    -- <param name="wcDateTime">The synchronised time, if available.</param>
    -- <param name="method">The method it should use for determining the synchronised time.</param>
    -- <returns>Whether the retrieval was successful.</returns>
    TryGetCurrentTime = function (wcDateTime, method)
      local default, value = offsetByMethod:TryGetValue(method, nil)
      if default then
        wcDateTime = class(baseTime + value)
        return true, wcDateTime
      end
      wcDateTime = nil
      WCSharpDateTime.DateTimeSystem(method):Run()
      return false, wcDateTime
    end
    StoreSynchronisedTime = function (seconds, method)
      if offsetByMethod:ContainsKey(method) then
        return
      end
      if baseTime < 0 then
        baseTime = seconds
        WCSharpEvents.PeriodicEvents.AddPeriodicEvent(function ()
          baseTime = baseTime + 1
          return true
        end, 1.0)
      end
      offsetByMethod:AddKeyValue(method, seconds - baseTime)
    end
    class = {
      base = function (out)
        return {
          System.IComparable,
          System.IComparable_1(out.WCSharp.DateTime.WcDateTime),
          System.IEquatable_1(out.WCSharp.DateTime.WcDateTime)
        }
      end,
      TotalSeconds = 0,
      getSecond = getSecond,
      getMinute = getMinute,
      getHour = getHour,
      getDay = getDay,
      getMonth = getMonth,
      getYear = getYear,
      getDayOfWeek = getDayOfWeek,
      getDayOfYear = getDayOfYear,
      getDate = getDate,
      getTimeOfDay = getTimeOfDay,
      getZero = getZero,
      getMinValue = getMinValue,
      getMaxValue = getMaxValue,
      getLocalTime = getLocalTime,
      getLocalTimeUtc = getLocalTimeUtc,
      op_Addition = op_Addition,
      op_Subtraction = op_Subtraction,
      op_Subtraction1 = op_Subtraction1,
      op_Equality = op_Equality,
      op_Inequality = op_Inequality,
      op_LessThan = op_LessThan,
      op_LessThanOrEqual = op_LessThanOrEqual,
      op_GreaterThan = op_GreaterThan,
      op_GreaterThanOrEqual = op_GreaterThanOrEqual,
      Add = Add,
      Subtract = Subtract,
      AddSeconds = AddSeconds,
      AddMinutes = AddMinutes,
      AddHours = AddHours,
      AddDays = AddDays,
      AddMonths = AddMonths,
      AddYears = AddYears,
      CompareToObj = CompareToObj,
      CompareTo = CompareTo,
      Equals = Equals,
      EqualsObj = EqualsObj,
      GetHashCode = GetHashCode,
      ToString = ToString,
      ToString1 = ToString1,
      ZeroPad = ZeroPad,
      Format = Format,
      Deserialize = Deserialize,
      Serialize = Serialize,
      GetCurrentTime = GetCurrentTime,
      TryGetCurrentTime = TryGetCurrentTime,
      StoreSynchronisedTime = StoreSynchronisedTime,
      static = static,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__,
        __ctor4__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "baseTime", 0x9, System.Int32 },
            { "daysToMonth365", 0x9, System.Array(System.Int32) },
            { "daysToMonth366", 0x9, System.Array(System.Int32) },
            { "offsetByMethod", 0x9, System.Dictionary(System.Int32, System.Int32) }
          },
          properties = {
            { "Date", 0x206, class, getDate },
            { "Day", 0x206, System.Int32, getDay },
            { "DayOfWeek", 0x206, System.Int32, getDayOfWeek },
            { "DayOfYear", 0x206, System.Int32, getDayOfYear },
            { "Hour", 0x206, System.Int32, getHour },
            { "LocalTime", 0x20E, class, getLocalTime },
            { "LocalTimeUtc", 0x20E, class, getLocalTimeUtc },
            { "MaxValue", 0x20E, class, getMaxValue },
            { "MinValue", 0x20E, class, getMinValue },
            { "Minute", 0x206, System.Int32, getMinute },
            { "Month", 0x206, System.Int32, getMonth },
            { "Second", 0x206, System.Int32, getSecond },
            { "TimeOfDay", 0x206, out.WCSharp.DateTime.WcTimeSpan, getTimeOfDay },
            { "TotalSeconds", 0x6, System.Int32 },
            { "Year", 0x206, System.Int32, getYear },
            { "Zero", 0x20E, class, getZero }
          },
          methods = {
            { ".ctor", 0x106, __ctor1__, System.Int32 },
            { ".ctor", 0x306, __ctor2__, System.Int32, System.Int32, System.Int32 },
            { ".ctor", 0x101, __ctor3__, out.WCSharp.Shared.LuaTable },
            { ".ctor", 0x606, __ctor4__, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32 },
            { "Add", 0x186, Add, out.WCSharp.DateTime.WcTimeSpan, class },
            { "AddDays", 0x186, AddDays, System.Int32, class },
            { "AddHours", 0x186, AddHours, System.Int32, class },
            { "AddMinutes", 0x186, AddMinutes, System.Int32, class },
            { "AddMonths", 0x186, AddMonths, System.Int32, class },
            { "AddSeconds", 0x186, AddSeconds, System.Int32, class },
            { "AddYears", 0x186, AddYears, System.Int32, class },
            { "CompareTo", 0x186, CompareToObj, System.Object, System.Int32 },
            { "CompareTo", 0x186, CompareTo, class, System.Int32 },
            { "Deserialize", 0x18E, Deserialize, System.String, class },
            { "Equals", 0x186, Equals, class, System.Boolean },
            { "Equals", 0x186, EqualsObj, System.Object, System.Boolean },
            { "Format", 0x186, Format, System.String, System.String },
            { "GetCurrentTime", 0x20E, GetCurrentTime, System.Delegate(class, System.Void), System.Int32 },
            { "GetDatePart", 0x301, GetDatePart1, System.Int32, System.Int32, System.Int32 },
            { "GetDatePart", 0x181, GetDatePart, System.Int32, System.Int32 },
            { "GetHashCode", 0x86, GetHashCode, System.Int32 },
            { "GetSeconds", 0x689, GetSeconds, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32 },
            { "Serialize", 0x18E, Serialize, class, System.String },
            { "StoreSynchronisedTime", 0x20C, StoreSynchronisedTime, System.Int32, System.Int32 },
            { "Subtract", 0x186, Subtract, class, out.WCSharp.DateTime.WcTimeSpan },
            { "ToString", 0x186, ToString1, System.String, System.String },
            { "ToString", 0x86, ToString, System.String },
            { "TryGetCurrentTime", 0x28E, TryGetCurrentTime, class, System.Int32, System.Boolean },
            { "ZeroPad", 0x28C, ZeroPad, System.Int32, System.Int32, System.String }
          },
          class = { "WcDateTime", 0x6 }
        }
      end
    }
    return class
  end)
  -- <summary>
  -- Represents a duration of time, with a precision in seconds.
  -- </summary>
  namespace.class("WcTimeSpan", function (namespace)
    local getSeconds, getMinutes, getHours, getDays, getTotalSeconds, getTotalMinutes, getTotalHours, getTotalDays, 
    getZero, getMinValue, getMaxValue, getLocalPlaytime, op_UnaryNegation, op_Subtraction, op_UnaryPlus, op_Addition, 
    op_Equality, op_Inequality, op_LessThan, op_LessThanOrEqual, op_GreaterThan, op_GreaterThanOrEqual, Add, Subtract, 
    Duration, Negate, CompareToObj, CompareTo, Equals, EqualsObj, GetHashCode, ToString, 
    ToString1, Deserialize, Serialize, class, __ctor1__, __ctor2__, __ctor3__
    -- <summary>
    -- Creates a new <see cref="T:WCSharp.DateTime.WcTimeSpan" /> instance with a duration of the given number of seconds.
    -- </summary>
    __ctor1__ = function (this, seconds)
      this.seconds = seconds
    end
    -- <summary>
    -- Creates a new <see cref="T:WCSharp.DateTime.WcTimeSpan" /> instance with a duration of the given number of hours, minutes and seconds.
    -- </summary>
    __ctor2__ = function (this, hours, minutes, seconds)
      this.seconds = hours * 3600 + minutes * 60 + seconds
    end
    -- <summary>
    -- Creates a new <see cref="T:WCSharp.DateTime.WcTimeSpan" /> instance with a duration of the given number of days, hours, minutes and seconds.
    -- </summary>
    __ctor3__ = function (this, days, hours, minutes, seconds)
      this.seconds = days * 86400 + hours * 3600 + minutes * 60 + seconds
    end
    getSeconds = function (this)
      return System.mod(this.seconds, 60)
    end
    getMinutes = function (this)
      return System.div(System.mod(this.seconds, 3600), 60)
    end
    getHours = function (this)
      return System.div(System.mod(this.seconds, 86400), 3600)
    end
    getDays = function (this)
      return System.div(this.seconds, 86400)
    end
    getTotalSeconds = function (this)
      return this.seconds
    end
    getTotalMinutes = function (this)
      return this.seconds / 60
    end
    getTotalHours = function (this)
      return this.seconds / 3600
    end
    getTotalDays = function (this)
      return this.seconds / 86400
    end
    getZero = function ()
      return class(0)
    end
    getMinValue = function ()
      return class(-2147483648 --[[Int32.MinValue]])
    end
    getMaxValue = function ()
      return class(2147483647 --[[Int32.MaxValue]])
    end
    getLocalPlaytime = function ()
      return class(System.ToInt32(os.clock()))
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcTimeSpan" /> that is the negation of the time represented by <paramref name="a" />.
    -- </summary>
    op_UnaryNegation = function (a)
      return class(-a.seconds)
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcTimeSpan" /> that is equal to <paramref name="a" /> minus <paramref name="b" />.
    -- </summary>
    op_Subtraction = function (a, b)
      return class(a.seconds - b.seconds)
    end
    -- <summary>
    -- Since no changes are required, simply returns the given <see cref="T:WCSharp.DateTime.WcTimeSpan" />.
    -- </summary>
    op_UnaryPlus = function (a)
      return a
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcTimeSpan" /> that is equal to <paramref name="a" /> plus <paramref name="b" />.
    -- </summary>
    op_Addition = function (a, b)
      return class(a.seconds + b.seconds)
    end
    -- <summary>
    -- Returns true if <paramref name="a" /> represents an equally long time as <paramref name="b" />.
    -- </summary>
    op_Equality = function (a, b)
      if a ~= nil then
        return a.seconds == b.seconds
      end
      return b == nil
    end
    -- Returns true if <paramref name="a" /> does not represent an equally long time as <paramref name="b" />.
    op_Inequality = function (a, b)
      return not (op_Equality(a, b))
    end
    -- Returns true if <paramref name="a" /> represents a shorter time than <paramref name="b" />.
    op_LessThan = function (a, b)
      if a ~= nil and b ~= nil then
        return a.seconds < b.seconds
      end
      return false
    end
    -- Returns true if <paramref name="a" /> represents a shorter or equivalent time as <paramref name="b" />.
    op_LessThanOrEqual = function (a, b)
      if a ~= nil and b ~= nil then
        return a.seconds <= b.seconds
      end
      return false
    end
    -- Returns true if <paramref name="a" /> represents a longer time than <paramref name="b" />.
    op_GreaterThan = function (a, b)
      if a ~= nil and b ~= nil then
        return a.seconds > b.seconds
      end
      return false
    end
    -- Returns true if <paramref name="a" /> represents a longer or equivalent time as <paramref name="b" />.
    op_GreaterThanOrEqual = function (a, b)
      if a ~= nil and b ~= nil then
        return a.seconds >= b.seconds
      end
      return false
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcTimeSpan" /> whose value is the sum of this instance and the given object.
    -- </summary>
    Add = function (this, value)
      return class(this.seconds + value.seconds)
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcTimeSpan" /> whose value is the difference of this instance and the given object.
    -- </summary>
    Subtract = function (this, value)
      return class(this.seconds - value.seconds)
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcTimeSpan" /> whose value is the absolute value of this instance.
    -- </summary>
    Duration = function (this)
      return class(math.Abs(this.seconds))
    end
    -- <summary>
    -- Returns a new <see cref="T:WCSharp.DateTime.WcTimeSpan" /> whose value is the negated value of this instance.
    -- </summary>
    Negate = function (this)
      return class(-this.seconds)
    end
    -- <inheritdoc />
    CompareToObj = function (this, obj)
      local obj2 = obj
      if not (System.is(obj2, WCSharpDateTime.WcDateTime)) then
        System.throw(System.ArgumentException("Cannot compare WcTimeSpan to non-WcTimeSpan object"))
      end
      return CompareToObj(this, obj2)
    end
    -- <inheritdoc />
    CompareTo = function (this, other)
      if other ~= nil then
        return System.Int32.CompareTo(this.seconds, other.seconds)
      end
      return 1
    end
    -- <inheritdoc />
    Equals = function (this, other)
      if other ~= nil then
        return this.seconds == other.seconds
      end
      return false
    end
    -- <inheritdoc />S
    EqualsObj = function (this, obj)
      local wcTimeSpan = obj
      if System.is(wcTimeSpan, class) then
        return this.seconds == wcTimeSpan.seconds
      end
      return false
    end
    -- <inheritdoc />
    GetHashCode = function (this)
      return this.seconds
    end
    -- <summary>
    -- Outputs this <see cref="T:WCSharp.DateTime.WcTimeSpan" /> in the standard format of "d:hh:mm:ss" or "hh:mm:ss" if less than 1 day.
    -- </summary>
    -- <returns></returns>
    ToString = function (this)
      if getDays(this) <= 0 then
        return ToString1(this, "hh:mm:ss")
      end
      return ToString1(this, "d:hh:mm:ss")
    end
    -- <summary>
    -- Returns a string representation using the given format.
    -- <para>See the wiki for more information on the format specification.</para>
    -- </summary>
    -- <param name="format">The format to print the string in.</param>
    ToString1 = function (this, format)
      if format:Contains(100 --[['d']]) then
        format = format:Replace("d", System.Int32.ToString(getDays(this)))
      end
      if format:Contains("hh") then
        format = format:Replace("hh", WCSharpDateTime.WcDateTime.ZeroPad(getHours(this), 2))
      elseif format:Contains(104 --[['h']]) then
        format = format:Replace("h", System.Int32.ToString(getHours(this)))
      end
      if format:Contains("mm") then
        format = format:Replace("mm", WCSharpDateTime.WcDateTime.ZeroPad(getMinutes(this), 2))
      elseif format:Contains(109 --[['m']]) then
        format = format:Replace("m", System.Int32.ToString(getMinutes(this)))
      end
      if format:Contains("ss") then
        format = format:Replace("ss", WCSharpDateTime.WcDateTime.ZeroPad(getSeconds(this), 2))
      elseif format:Contains(115 --[['s']]) then
        format = format:Replace("s", System.Int32.ToString(getSeconds(this)))
      end
      return format
    end
    -- <summary>
    -- Attempts to parse the given string as the number of seconds.
    -- </summary>
    -- <returns>Null if <paramref name="string" /> is not a valid integer.</returns>
    Deserialize = function (string)
      local default, result = System.Int32.TryParse(string, nil)
      if not default then
        return nil
      end
      return class(result)
    end
    -- <summary>
    -- Returns a string representing the number of seconds contained in <paramref name="wcTimeSpan" />.
    -- </summary>
    Serialize = function (wcTimeSpan)
      return System.Int32.ToString(wcTimeSpan.seconds)
    end
    class = {
      base = function (out)
        return {
          System.IComparable,
          System.IComparable_1(out.WCSharp.DateTime.WcTimeSpan),
          System.IEquatable_1(out.WCSharp.DateTime.WcTimeSpan)
        }
      end,
      seconds = 0,
      getSeconds = getSeconds,
      getMinutes = getMinutes,
      getHours = getHours,
      getDays = getDays,
      getTotalSeconds = getTotalSeconds,
      getTotalMinutes = getTotalMinutes,
      getTotalHours = getTotalHours,
      getTotalDays = getTotalDays,
      getZero = getZero,
      getMinValue = getMinValue,
      getMaxValue = getMaxValue,
      getLocalPlaytime = getLocalPlaytime,
      op_UnaryNegation = op_UnaryNegation,
      op_Subtraction = op_Subtraction,
      op_UnaryPlus = op_UnaryPlus,
      op_Addition = op_Addition,
      op_Equality = op_Equality,
      op_Inequality = op_Inequality,
      op_LessThan = op_LessThan,
      op_LessThanOrEqual = op_LessThanOrEqual,
      op_GreaterThan = op_GreaterThan,
      op_GreaterThanOrEqual = op_GreaterThanOrEqual,
      Add = Add,
      Subtract = Subtract,
      Duration = Duration,
      Negate = Negate,
      CompareToObj = CompareToObj,
      CompareTo = CompareTo,
      Equals = Equals,
      EqualsObj = EqualsObj,
      GetHashCode = GetHashCode,
      ToString = ToString,
      ToString1 = ToString1,
      Deserialize = Deserialize,
      Serialize = Serialize,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "seconds", 0x4, System.Int32 }
          },
          properties = {
            { "Days", 0x206, System.Int32, getDays },
            { "Hours", 0x206, System.Int32, getHours },
            { "LocalPlaytime", 0x20E, class, getLocalPlaytime },
            { "MaxValue", 0x20E, class, getMaxValue },
            { "MinValue", 0x20E, class, getMinValue },
            { "Minutes", 0x206, System.Int32, getMinutes },
            { "Seconds", 0x206, System.Int32, getSeconds },
            { "TotalDays", 0x206, System.Single, getTotalDays },
            { "TotalHours", 0x206, System.Single, getTotalHours },
            { "TotalMinutes", 0x206, System.Single, getTotalMinutes },
            { "TotalSeconds", 0x206, System.Single, getTotalSeconds },
            { "Zero", 0x20E, class, getZero }
          },
          methods = {
            { ".ctor", 0x106, __ctor1__, System.Int32 },
            { ".ctor", 0x306, __ctor2__, System.Int32, System.Int32, System.Int32 },
            { ".ctor", 0x406, __ctor3__, System.Int32, System.Int32, System.Int32, System.Int32 },
            { "Add", 0x186, Add, class, class },
            { "CompareTo", 0x186, CompareToObj, System.Object, System.Int32 },
            { "CompareTo", 0x186, CompareTo, class, System.Int32 },
            { "Deserialize", 0x18E, Deserialize, System.String, class },
            { "Duration", 0x86, Duration, class },
            { "Equals", 0x186, Equals, class, System.Boolean },
            { "Equals", 0x186, EqualsObj, System.Object, System.Boolean },
            { "GetHashCode", 0x86, GetHashCode, System.Int32 },
            { "Negate", 0x86, Negate, class },
            { "Serialize", 0x18E, Serialize, class, System.String },
            { "Subtract", 0x186, Subtract, class, class },
            { "ToString", 0x86, ToString, System.String },
            { "ToString", 0x186, ToString1, System.String, System.String }
          },
          class = { "WcTimeSpan", 0x6 }
        }
      end
    }
    return class
  end)
end)

end
do
local System = System
local WCSharpApi = WCSharp.Api
local Listunit = System.List(WCSharpApi.unit)
local WCSharpDummies
local WCSharpEvents
local ListDummyBeingRecycled
System.import(function (out)
  WCSharpDummies = WCSharp.Dummies
  WCSharpEvents = WCSharp.Events
  ListDummyBeingRecycled = System.List(WCSharpDummies.DummyBeingRecycled)
end)
System.namespace("WCSharp.Dummies", function (namespace)
  namespace.class("DummyBeingRecycled", function (namespace)
    local __ctor__
    __ctor__ = function (this, dummy, recycleTime)
      this.Dummy = dummy
      this.TicksLeft = recycleTime
    end
    return {
      TicksLeft = 0,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "Dummy", 0x6, out.WCSharp.Api.unit },
            { "TicksLeft", 0x6, System.Int32 }
          },
          methods = {
            { ".ctor", 0x206, nil, out.WCSharp.Api.unit, System.Int32 }
          },
          class = { "DummyBeingRecycled", 0x4 }
        }
      end
    }
  end)
  -- <summary>
  -- Tracks and recycles all dummy units on the map. Will automatically create more if necessary.
  -- </summary>
  namespace.class("DummySystem", function (namespace)
    local periodicEvent, dummiesReady, dummiesBeingRecycled, OnDummyCast, Countdown, RecycleDummy, GetDummy, GetDummy1, 
    static
    static = function (this)
      periodicEvent = WCSharpEvents.PeriodicEvent(Countdown, 1.0)
      dummiesReady = Listunit()
      dummiesBeingRecycled = ListDummyBeingRecycled()
      WCSharpEvents.PlayerUnitEvents.Register14(848 --[[UnitTypeEvent.SpellEndCast]], OnDummyCast)
    end
    OnDummyCast = function ()
      local triggerUnit = GetTriggerUnit()
      if GetUnitTypeId(triggerUnit) == 2021161080 then
        UnitRemoveAbility(triggerUnit, GetSpellAbilityId())
      end
    end
    Countdown = function ()
      local num = #dummiesBeingRecycled - 1
      for num2 = num, 0, -1 do
        local dummyBeingRecycled = dummiesBeingRecycled:get(num2)
        if dummyBeingRecycled.TicksLeft <= 0 then
          SetUnitX(dummyBeingRecycled.Dummy, 0)
          SetUnitY(dummyBeingRecycled.Dummy, 0)
          dummiesReady:Add(dummyBeingRecycled.Dummy)
          dummiesBeingRecycled:set(num2, dummiesBeingRecycled:get(num))
          dummiesBeingRecycled:RemoveAt(num)
          num = num - 1
        else
          local default = dummyBeingRecycled
          default.TicksLeft = default.TicksLeft - 1
        end
      end
      return num >= 0
    end
    -- <summary>
    -- Call this when you are done with a dummy. The dummy will become available for use again after the <paramref name="recycleTime" />.
    -- </summary>
    RecycleDummy = function (dummy, recycleTime)
      if #dummiesBeingRecycled == 0 then
        WCSharpEvents.PeriodicEvents.AddPeriodicEvent1(periodicEvent)
      end
      dummiesBeingRecycled:Add(WCSharpDummies.DummyBeingRecycled(dummy, System.ToInt32(recycleTime / (0.03125 --[[1f / 32f]]))))
    end
    -- <summary>
    -- Requests an available dummy.
    -- </summary>
    GetDummy = function ()
      local num = #dummiesReady - 1
      if num == -1 then
        return CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 2021161080, 0, 0, 0)
      end
      local result = dummiesReady:get(num)
      dummiesReady:RemoveAt(num)
      return result
    end
    -- <summary>
    -- Requests an available dummy at the given coordinates and under control of the given player.
    -- </summary>
    GetDummy1 = function (x, y, z, player)
      local num = #dummiesReady - 1
      local unit
      if num == -1 then
        unit = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 2021161080, 0, 0, 0)
      else
        unit = dummiesReady:get(num)
        dummiesReady:RemoveAt(num)
      end
      SetUnitOwner(unit, player, false)
      SetUnitPosition(unit, x, y)
      SetUnitFlyHeight(unit, z, 2.1474836E+09)
      return unit
    end
    return {
      RecycleDummy = RecycleDummy,
      GetDummy = GetDummy,
      GetDummy1 = GetDummy1,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "dummiesBeingRecycled", 0x9, System.List(out.WCSharp.Dummies.DummyBeingRecycled) },
            { "dummiesReady", 0x9, System.List(out.WCSharp.Api.unit) },
            { "periodicEvent", 0x9, out.WCSharp.Events.PeriodicEvent }
          },
          methods = {
            { "Countdown", 0x89, Countdown, System.Boolean },
            { "GetDummy", 0x8E, GetDummy, out.WCSharp.Api.unit },
            { "GetDummy", 0x48E, GetDummy1, System.Single, System.Single, System.Single, out.WCSharp.Api.player, out.WCSharp.Api.unit },
            { "OnDummyCast", 0x9, OnDummyCast },
            { "RecycleDummy", 0x20E, RecycleDummy, out.WCSharp.Api.unit, System.Single }
          },
          class = { "DummySystem", 0x3E }
        }
      end
    }
  end)
end)

end
do
local System = System
local WCSharpEffects
local WCSharpEvents
local PeriodicTrigger_1TimedEffect
System.import(function (out)
  WCSharpEffects = WCSharp.Effects
  WCSharpEvents = WCSharp.Events
  PeriodicTrigger_1TimedEffect = WCSharpEvents.PeriodicTrigger_1(WCSharpEffects.TimedEffect)
end)
System.namespace("WCSharp.Effects", function (namespace)
  -- <summary>
  -- Simple system for destroying effects after a given duration.
  -- <para>This circumvents issues with certain special effects not showing up if deleted immediately in Reforged.</para>
  -- </summary>
  namespace.class("EffectSystem", function (namespace)
    local periodicTrigger, Add, static
    static = function (this)
      periodicTrigger = PeriodicTrigger_1TimedEffect(0.03125 --[[1f / 32f]])
    end
    -- <summary>
    -- Adds an effect for removal after the given duration.
    -- </summary>
    -- <param name="effect"></param>
    -- <param name="duration">In seconds.</param>
    Add = function (effect, duration)
      periodicTrigger:Add(WCSharpEffects.TimedEffect(effect, duration))
    end
    return {
      Add = Add,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "periodicTrigger", 0x9, out.WCSharp.Events.PeriodicTrigger_1(out.WCSharp.Effects.TimedEffect) }
          },
          methods = {
            { "Add", 0x20E, Add, out.WCSharp.Api.effect, System.Single }
          },
          class = { "EffectSystem", 0x6 }
        }
      end
    }
  end)
  namespace.class("TimedEffect", function (namespace)
    local getActive, setActive, Action, __ctor__
    __ctor__ = function (this, effect, duration)
      this.Effect = effect
      this.Duration = duration
    end
    getActive, setActive = System.property("Active")
    Action = function (this)
      this.Duration = this.Duration - (0.03125 --[[1f / 32f]])
      if this.Duration <= 0 then
        DestroyEffect(this.Effect)
        this.Active = false
      end
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Events.IPeriodicAction
        }
      end,
      Active = false,
      getActive = getActive,
      setActive = setActive,
      Duration = 0,
      Action = Action,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "Active", 0x106, System.Boolean, getActive, setActive },
            { "Duration", 0x6, System.Single },
            { "Effect", 0x6, out.WCSharp.Api.effect }
          },
          methods = {
            { ".ctor", 0x206, nil, out.WCSharp.Api.effect, System.Single },
            { "Action", 0x6, Action }
          },
          class = { "TimedEffect", 0x4 }
        }
      end
    }
  end)
end)

end
do
local System = System
local Linq = System.Linq.Enumerable
local WCSharpApi = WCSharp.Api
local ListDelegate = System.List(System.Delegate)
local DictStringInt32 = System.Dictionary(System.String, System.Int32)
local DictInt32Delegate = System.Dictionary(System.Int32, System.Delegate)
local DicthandleDelegate = System.Dictionary(WCSharpApi.handle, System.Delegate)
local DictInt32playerunitevent = System.Dictionary(System.Int32, WCSharpApi.playerunitevent)
local WCSharpEvents
local WCSharpEventHandlers
local PlayerUnitEventHandlers
local WCSharpShared
local WCSharpSharedData
local ListIEventSet
local DictInt32EventSet
local ListPeriodicEvent
local DicthandleEventSet
local TypeWrapper_1handle
local DictInt32IPlayerUnitEventHandler
local DictplayeruniteventIPlayerUnitEventHandler
System.import(function (out)
  WCSharpEvents = WCSharp.Events
  WCSharpEventHandlers = WCSharp.Events.EventHandlers
  PlayerUnitEventHandlers = WCSharp.Events.EventHandlers.PlayerUnitEventHandlers
  WCSharpShared = WCSharp.Shared
  WCSharpSharedData = WCSharp.Shared.Data
  ListIEventSet = System.List(WCSharpEventHandlers.IEventSet)
  DictInt32EventSet = System.Dictionary(System.Int32, WCSharpEventHandlers.EventSet)
  ListPeriodicEvent = System.List(WCSharpEvents.PeriodicEvent)
  DicthandleEventSet = System.Dictionary(WCSharpApi.handle, WCSharpEventHandlers.EventSet)
  TypeWrapper_1handle = WCSharpShared.TypeWrapper_1(WCSharpApi.handle)
  DictInt32IPlayerUnitEventHandler = System.Dictionary(System.Int32, PlayerUnitEventHandlers.IPlayerUnitEventHandler)
  DictplayeruniteventIPlayerUnitEventHandler = System.Dictionary(WCSharpApi.playerunitevent, PlayerUnitEventHandlers.IPlayerUnitEventHandler)
end)
System.namespace("WCSharp.Events", function (namespace)
  -- <summary>
  -- Defines all built-in HeroEvents supported by <see cref="T:WCSharp.Events.PlayerUnitEvents" />.
  -- <para>All of these events fire based on a unit handle filter.</para>
  -- <para>Custom events can also be specified via <see cref="M:WCSharp.Events.PlayerUnitEvents.AddCustomEvent(System.String,System.Func{System.Int32},WCSharp.Api.playerunitevent)" />.</para>
  -- </summary>
  namespace.enum("HeroEvent", function ()
    return {
      BecomesRevivable = 1,
      CancelsRevive = 2,
      FinishesRevive = 3,
      LearnsSpell = 4,
      Levels = 5,
      StartsRevive = 6,
      __metadata__ = function (out)
        return {
          fields = {
            { "BecomesRevivable", 0xE, System.Int32 },
            { "CancelsRevive", 0xE, System.Int32 },
            { "FinishesRevive", 0xE, System.Int32 },
            { "LearnsSpell", 0xE, System.Int32 },
            { "Levels", 0xE, System.Int32 },
            { "StartsRevive", 0xE, System.Int32 }
          },
          class = { "HeroEvent", 0x26 }
        }
      end
    }
  end)
  -- <summary>
  -- Defines all built-in HeroTypeEvents supported by <see cref="T:WCSharp.Events.PlayerUnitEvents" />.
  -- <para>All of these events fire based on a unit type id filter.</para>
  -- <para>Custom events can also be specified via <see cref="M:WCSharp.Events.PlayerUnitEvents.AddCustomEvent(System.String,System.Func{System.Int32},WCSharp.Api.playerunitevent)" />.</para>
  -- </summary>
  namespace.enum("HeroTypeEvent", function ()
    return {
      BecomesRevivable = 101,
      CancelsRevive = 102,
      FinishesRevive = 103,
      LearnsSpell = 104,
      Levels = 105,
      StartsRevive = 106,
      __metadata__ = function (out)
        return {
          fields = {
            { "BecomesRevivable", 0xE, System.Int32 },
            { "CancelsRevive", 0xE, System.Int32 },
            { "FinishesRevive", 0xE, System.Int32 },
            { "LearnsSpell", 0xE, System.Int32 },
            { "Levels", 0xE, System.Int32 },
            { "StartsRevive", 0xE, System.Int32 }
          },
          class = { "HeroTypeEvent", 0x26 }
        }
      end
    }
  end)
  -- <summary>
  -- Interface for defining periodic actions. If your periodic action has actions that it should perform when ended, use <see cref="T:WCSharp.Events.IPeriodicDisposableAction" /> instead.
  -- </summary>
  namespace.interface("IPeriodicAction", function ()
    return {
      __metadata__ = function (out)
        return {
          class = { "IPeriodicAction", 0x16 }
        }
      end
    }
  end)
  -- <summary>
  -- Interface for defining periodic actions. If your periodic action does not have actions that it should perform when ended, use <see cref="T:WCSharp.Events.IPeriodicAction" /> instead.
  -- </summary>
  namespace.interface("IPeriodicDisposableAction", function ()
    return {
      __metadata__ = function (out)
        return {
          class = { "IPeriodicDisposableAction", 0x16 }
        }
      end
    }
  end)
  -- <summary>
  -- Defines all built-in ItemEvents supported by <see cref="T:WCSharp.Events.PlayerUnitEvents" />.
  -- <para>All of these events fire based on an item filter.</para>
  -- <para>Custom events can also be specified via <see cref="M:WCSharp.Events.PlayerUnitEvents.AddCustomEvent(System.String,System.Func{System.Int32},WCSharp.Api.playerunitevent)" />.</para>
  -- </summary>
  namespace.enum("ItemEvent", function ()
    return {
      IsAbsorbed = 201,
      IsDropped = 202,
      IsPawned = 203,
      IsPickedUp = 204,
      IsSold = 205,
      IsStacked = 206,
      IsUsed = 207,
      __metadata__ = function (out)
        return {
          fields = {
            { "IsAbsorbed", 0xE, System.Int32 },
            { "IsDropped", 0xE, System.Int32 },
            { "IsPawned", 0xE, System.Int32 },
            { "IsPickedUp", 0xE, System.Int32 },
            { "IsSold", 0xE, System.Int32 },
            { "IsStacked", 0xE, System.Int32 },
            { "IsUsed", 0xE, System.Int32 }
          },
          class = { "ItemEvent", 0x26 }
        }
      end
    }
  end)
  -- <summary>
  -- Defines all built-in ItemTypeEvents supported by <see cref="T:WCSharp.Events.PlayerUnitEvents" />.
  -- <para>All of these events fire based on an item type id filter.</para>
  -- <para>Custom events can also be specified via <see cref="M:WCSharp.Events.PlayerUnitEvents.AddCustomEvent(System.String,System.Func{System.Int32},WCSharp.Api.playerunitevent)" />.</para>
  -- </summary>
  namespace.enum("ItemTypeEvent", function ()
    return {
      IsAbsorbed = 301,
      IsDropped = 302,
      IsPawned = 303,
      IsPickedUp = 304,
      IsSold = 305,
      IsStacked = 306,
      IsUsed = 307,
      __metadata__ = function (out)
        return {
          fields = {
            { "IsAbsorbed", 0xE, System.Int32 },
            { "IsDropped", 0xE, System.Int32 },
            { "IsPawned", 0xE, System.Int32 },
            { "IsPickedUp", 0xE, System.Int32 },
            { "IsSold", 0xE, System.Int32 },
            { "IsStacked", 0xE, System.Int32 },
            { "IsUsed", 0xE, System.Int32 }
          },
          class = { "ItemTypeEvent", 0x26 }
        }
      end
    }
  end)
  -- <summary>
  -- Helpful class that can be used to batch together multiple periodic events of the same type. Will automatically remove inactive triggers, and
  -- subscribe/unsubscribe from <see cref="T:WCSharp.Events.PeriodicEvents" /> based on whether any triggers are active.
  -- </summary>
  -- <typeparam name="T"></typeparam>
  namespace.class("PeriodicDisposableTrigger_1", function (namespace)
    return function (T)
      local getActions, Add, Periodic, __ctor__
      local ListT = System.List(T)
      -- <param name="period">How frequently this trigger should fire.</param>
      __ctor__ = function (this, period)
        this.actions = ListT()
        this.timerEvent = WCSharpEvents.PeriodicEvent(System.fn(this, Periodic), period)
      end
      getActions = function (this)
        return Linq.Where(this.actions, function (x)
          return x:getActive()
        end)
      end
      -- <summary>
      -- Adds the given periodicTrigger to automatic management.
      -- </summary>
      Add = function (this, periodicTrigger)
        if not this.active then
          WCSharpEvents.PeriodicEvents.AddPeriodicEvent1(this.timerEvent)
          this.active = true
        end
        periodicTrigger:setActive(true)
        this.actions:Add(periodicTrigger)
      end
      Periodic = function (this)
        local num = #this.actions
        local num2 = 0
        while num2 < num do
          local continue
          repeat
            local val = this.actions:get(num2)
            if val:getActive() then
              val:Action()
            end
            if val:getActive() then
              num2 = num2 + 1
              continue = true
              break
            end
            num = num - 1
            this.actions:set(num2, this.actions:get(num))
            this.actions:RemoveAt(num)
            val:Dispose()
            continue = true
          until 1
          if not continue then
            break
          end
        end
        if num == 0 then
          this.active = #this.actions > 0
        end
        return this.active
      end
      return {
        active = false,
        getActions = getActions,
        Add = Add,
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            fields = {
              { "actions", 0x1, System.List(T) },
              { "active", 0x1, System.Boolean },
              { "timerEvent", 0x1, out.WCSharp.Events.PeriodicEvent }
            },
            properties = {
              { "Actions", 0x206, System.IEnumerable_1(T), getActions }
            },
            methods = {
              { ".ctor", 0x106, nil, System.Single },
              { "Add", 0x106, Add, T },
              { "Periodic", 0x81, Periodic, System.Boolean }
            },
            class = { "PeriodicDisposableTrigger", 0x106, T }
          }
        end
      }
    end
  end)
  -- <summary>
  -- Represents a single periodic event that will invoke <see cref="P:WCSharp.Events.PeriodicEvent.Method" /> every <see cref="P:WCSharp.Events.PeriodicEvent.Interval" />.
  -- </summary>
  namespace.class("PeriodicEvent", function (namespace)
    local __ctor__
    -- <summary>
    -- Creates a new periodic event that will call the given method every interval.
    -- Must be added to <see cref="T:WCSharp.Events.PeriodicEvents" /> in order to be active.
    -- </summary>
    __ctor__ = function (this, method, interval)
      this.Method = method
      this.Interval = interval
      this.IntervalLeft = interval
    end
    return {
      Interval = 0,
      IntervalLeft = 0,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "Interval", 0x6, System.Double },
            { "IntervalLeft", 0x6, System.Double },
            { "Method", 0x6, System.Delegate(System.Boolean) }
          },
          methods = {
            { ".ctor", 0x206, nil, System.Delegate(System.Boolean), System.Double }
          },
          class = { "PeriodicEvent", 0x6 }
        }
      end
    }
  end)
  -- <summary>
  -- Keeps track of all periodic events. The system runs at an interval defined by <see cref="F:WCSharp.Events.PeriodicEvents.SYSTEM_INTERVAL" /> (0.03125).
  -- </summary>
  namespace.class("PeriodicEvents", function (namespace)
    local timerEvents, timer, Start, EnableDebug, AddPeriodicEvent, AddPeriodicEvent1, Tick, static
    static = function (this)
      timerEvents = ListPeriodicEvent()
      timer = Start(Tick)
    end
    Start = function (action)
      local obj = CreateTimer()
      TimerStart(obj, 0.03125 --[[1f / 32f]], true, action)
      return obj
    end
    -- <summary>
    -- Call this method to automatically wrap your actions in a try/catch, so that exceptions that lead back to <see cref="T:WCSharp.Events.PeriodicEvents" /> will automatically output
    -- information.
    -- <para>It is recommended to use compilation time conditions to not call this on release mode.</para>
    -- </summary>
    EnableDebug = function ()
      DestroyTimer(timer)
      timer = Start(function ()
        System.try(function ()
          Tick()
        end, function (default)
          local ex = default
          System.Console.WriteLine(ex:getMessage())
          System.Console.WriteLine(ex:getStackTrace())
        end)
      end)
    end
    -- <summary>
    -- Adds the given method to the periodic system. In most cases, you can ignore the return value.
    -- </summary>
    -- <param name="method">The method to execute. Must return a boolean to indicate whether to continue looping or abort the periodic event.</param>
    -- <param name="period">
    -- The speed at which this event should fire.
    -- <para>Periods below <see cref="F:WCSharp.Events.PeriodicEvents.SYSTEM_INTERVAL" /> (0.03125) will run multiple times on certain ticks.</para>
    -- </param>
    AddPeriodicEvent = function (method, period)
      local periodicEvent = WCSharpEvents.PeriodicEvent(method, period)
      timerEvents:Add(periodicEvent)
      return periodicEvent
    end
    -- <summary>
    -- Shorthand in case you already have an existing PeriodicEvent to resume.
    -- </summary>
    AddPeriodicEvent1 = function (timerEvent)
      timerEvents:Add(timerEvent)
    end
    Tick = function ()
      local num = #timerEvents
      local num2 = 0
      while num2 < num do
        local periodicEvent = timerEvents:get(num2)
        num2 = num2 + 1
        periodicEvent.IntervalLeft = periodicEvent.IntervalLeft - (0.03125 --[[1.0 / 32.0]])
        while periodicEvent.IntervalLeft <= 0.0 do
          periodicEvent.IntervalLeft = periodicEvent.IntervalLeft + periodicEvent.Interval
          if not periodicEvent.Method() then
            num = num - 1
            num2 = num2 - 1
            timerEvents:set(num2, timerEvents:get(num))
            timerEvents:RemoveAt(num)
            break
          end
        end
      end
    end
    return {
      EnableDebug = EnableDebug,
      AddPeriodicEvent = AddPeriodicEvent,
      AddPeriodicEvent1 = AddPeriodicEvent1,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "timer", 0x9, out.WCSharp.Api.timer },
            { "timerEvents", 0x9, System.List(out.WCSharp.Events.PeriodicEvent) }
          },
          methods = {
            { "AddPeriodicEvent", 0x28E, AddPeriodicEvent, System.Delegate(System.Boolean), System.Double, out.WCSharp.Events.PeriodicEvent },
            { "AddPeriodicEvent", 0x10E, AddPeriodicEvent1, out.WCSharp.Events.PeriodicEvent },
            { "EnableDebug", 0xE, EnableDebug },
            { "Start", 0x189, Start, System.Delegate, out.WCSharp.Api.timer },
            { "Tick", 0x9, Tick }
          },
          class = { "PeriodicEvents", 0x3E }
        }
      end
    }
  end)
  -- <summary>
  -- Helpful class that can be used to batch together multiple periodic events of the same type. Will automatically remove inactive triggers, and
  -- subscribe/unsubscribe from <see cref="T:WCSharp.Events.PeriodicEvents" /> based on whether any triggers are active.
  -- </summary>
  -- <typeparam name="T"></typeparam>
  namespace.class("PeriodicTrigger_1", function (namespace)
    return function (T)
      local getActions, Add, Periodic, __ctor__
      local ListT = System.List(T)
      -- <param name="period">How frequently this trigger should fire.</param>
      __ctor__ = function (this, period)
        this.actions = ListT()
        this.timerEvent = WCSharpEvents.PeriodicEvent(System.fn(this, Periodic), period)
      end
      getActions = function (this)
        return Linq.Where(this.actions, function (x)
          return x:getActive()
        end)
      end
      -- <summary>
      -- Adds the given periodicTrigger to automatic management.
      -- </summary>
      Add = function (this, periodicTrigger)
        if not this.active then
          WCSharpEvents.PeriodicEvents.AddPeriodicEvent1(this.timerEvent)
          this.active = true
        end
        periodicTrigger:setActive(true)
        this.actions:Add(periodicTrigger)
      end
      Periodic = function (this)
        local num = #this.actions
        local num2 = 0
        while num2 < num do
          local val = this.actions:get(num2)
          if val:getActive() then
            val:Action()
            num2 = num2 + 1
          else
            num = num - 1
            this.actions:set(num2, this.actions:get(num))
            this.actions:RemoveAt(num)
          end
        end
        if num == 0 then
          this.active = #this.actions > 0
        end
        return this.active
      end
      return {
        active = false,
        getActions = getActions,
        Add = Add,
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            fields = {
              { "actions", 0x1, System.List(T) },
              { "active", 0x1, System.Boolean },
              { "timerEvent", 0x1, out.WCSharp.Events.PeriodicEvent }
            },
            properties = {
              { "Actions", 0x206, System.IEnumerable_1(T), getActions }
            },
            methods = {
              { ".ctor", 0x106, nil, System.Single },
              { "Add", 0x106, Add, T },
              { "Periodic", 0x81, Periodic, System.Boolean }
            },
            class = { "PeriodicTrigger", 0x106, T }
          }
        end
      }
    end
  end)
  -- <summary>
  -- Defines all built-in PlayerEvents supported by <see cref="T:WCSharp.Events.PlayerUnitEvents" />.
  -- <para>All of these events fire based on a player id.</para>
  -- <para>Custom events can also be specified via <see cref="M:WCSharp.Events.PlayerUnitEvents.AddCustomEvent(System.String,System.Func{System.Int32},WCSharp.Api.playerunitevent)" />.</para>
  -- </summary>
  namespace.enum("PlayerEvent", function ()
    return {
      DeselectsUnit = 401,
      GainsOwnership = 402,
      LosesOwnership = 403,
      SelectsUnit = 404,
      __metadata__ = function (out)
        return {
          fields = {
            { "DeselectsUnit", 0xE, System.Int32 },
            { "GainsOwnership", 0xE, System.Int32 },
            { "LosesOwnership", 0xE, System.Int32 },
            { "SelectsUnit", 0xE, System.Int32 }
          },
          class = { "PlayerEvent", 0x26 }
        }
      end
    }
  end)
  -- <summary>
  -- Manager for all Warcraft III <see cref="T:WCSharp.Api.playerunitevent" />s. Will bundle together and is able to efficiently filter on specific data.
  -- </summary>
  namespace.class("PlayerUnitEvents", function (namespace)
    local customEventIdsByIdentifier, playerUnitEventHandlers, customPlayerUnitEventHandlers, playerUnitEventNativesById, filterFuncIdsByEvent, filterFuncHandlesByEvent, Register, Register1, 
    Register2, Register3, Register4, Register5, Register6, Register7, Register8, Register9, 
    Register10, Register11, Register12, Register13, Register14, Register15, Register16, Register17, 
    Register18, Register19, Unregister, Unregister1, Unregister2, Unregister3, Unregister4, Unregister5, 
    Unregister6, Unregister7, Unregister8, Unregister9, Unregister10, Unregister11, Unregister12, Unregister13, 
    Unregister14, Unregister15, Unregister16, Unregister17, Unregister18, GetOrCreateHandler, AddCustomEvent, CreateCustomHandler, 
    EnableDebug, class, static
    static = function (this)
      customEventIdsByIdentifier = DictStringInt32()
      playerUnitEventHandlers = DictplayeruniteventIPlayerUnitEventHandler()
      local default = DictInt32IPlayerUnitEventHandler()
      default:AddKeyValue(821, nil)
      customPlayerUnitEventHandlers = default
      local default = DictInt32playerunitevent()
      default:AddKeyValue(1, EVENT_PLAYER_HERO_REVIVABLE)
      default:AddKeyValue(2, EVENT_PLAYER_HERO_REVIVE_CANCEL)
      default:AddKeyValue(3, EVENT_PLAYER_HERO_REVIVE_FINISH)
      default:AddKeyValue(4, EVENT_PLAYER_HERO_SKILL)
      default:AddKeyValue(5, EVENT_PLAYER_HERO_LEVEL)
      default:AddKeyValue(6, EVENT_PLAYER_HERO_REVIVE_START)
      default:AddKeyValue(101, EVENT_PLAYER_HERO_REVIVABLE)
      default:AddKeyValue(102, EVENT_PLAYER_HERO_REVIVE_CANCEL)
      default:AddKeyValue(103, EVENT_PLAYER_HERO_REVIVE_FINISH)
      default:AddKeyValue(104, EVENT_PLAYER_HERO_SKILL)
      default:AddKeyValue(105, EVENT_PLAYER_HERO_LEVEL)
      default:AddKeyValue(106, EVENT_PLAYER_HERO_REVIVE_START)
      default:AddKeyValue(201, EVENT_PLAYER_UNIT_PICKUP_ITEM)
      default:AddKeyValue(202, EVENT_PLAYER_UNIT_DROP_ITEM)
      default:AddKeyValue(203, EVENT_PLAYER_UNIT_PAWN_ITEM)
      default:AddKeyValue(204, EVENT_PLAYER_UNIT_PICKUP_ITEM)
      default:AddKeyValue(205, EVENT_PLAYER_UNIT_SELL_ITEM)
      default:AddKeyValue(206, EVENT_PLAYER_UNIT_STACK_ITEM)
      default:AddKeyValue(207, EVENT_PLAYER_UNIT_USE_ITEM)
      default:AddKeyValue(301, EVENT_PLAYER_UNIT_PICKUP_ITEM)
      default:AddKeyValue(302, EVENT_PLAYER_UNIT_DROP_ITEM)
      default:AddKeyValue(303, EVENT_PLAYER_UNIT_PAWN_ITEM)
      default:AddKeyValue(304, EVENT_PLAYER_UNIT_PICKUP_ITEM)
      default:AddKeyValue(305, EVENT_PLAYER_UNIT_SELL_ITEM)
      default:AddKeyValue(306, EVENT_PLAYER_UNIT_STACK_ITEM)
      default:AddKeyValue(307, EVENT_PLAYER_UNIT_USE_ITEM)
      default:AddKeyValue(401, EVENT_PLAYER_UNIT_DESELECTED)
      default:AddKeyValue(402, EVENT_PLAYER_UNIT_CHANGE_OWNER)
      default:AddKeyValue(403, EVENT_PLAYER_UNIT_CHANGE_OWNER)
      default:AddKeyValue(404, EVENT_PLAYER_UNIT_SELECTED)
      default:AddKeyValue(501, EVENT_PLAYER_UNIT_RESEARCH_CANCEL)
      default:AddKeyValue(502, EVENT_PLAYER_UNIT_RESEARCH_FINISH)
      default:AddKeyValue(503, EVENT_PLAYER_UNIT_RESEARCH_START)
      default:AddKeyValue(601, EVENT_PLAYER_UNIT_SPELL_CAST)
      default:AddKeyValue(602, EVENT_PLAYER_UNIT_SPELL_CHANNEL)
      default:AddKeyValue(603, EVENT_PLAYER_UNIT_SPELL_EFFECT)
      default:AddKeyValue(604, EVENT_PLAYER_UNIT_SPELL_ENDCAST)
      default:AddKeyValue(605, EVENT_PLAYER_UNIT_SPELL_FINISH)
      default:AddKeyValue(606, EVENT_PLAYER_HERO_SKILL)
      default:AddKeyValue(701, EVENT_PLAYER_UNIT_ATTACKED)
      default:AddKeyValue(702, EVENT_PLAYER_UNIT_SELL)
      default:AddKeyValue(703, EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL)
      default:AddKeyValue(704, EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL)
      default:AddKeyValue(705, EVENT_PLAYER_UNIT_RESEARCH_CANCEL)
      default:AddKeyValue(706, EVENT_PLAYER_UNIT_TRAIN_CANCEL)
      default:AddKeyValue(707, EVENT_PLAYER_UNIT_UPGRADE_CANCEL)
      default:AddKeyValue(708, EVENT_PLAYER_UNIT_CHANGE_OWNER)
      default:AddKeyValue(709, EVENT_PLAYER_UNIT_DAMAGING)
      default:AddKeyValue(710, EVENT_PLAYER_UNIT_DECAY)
      default:AddKeyValue(711, EVENT_PLAYER_UNIT_DEATH)
      default:AddKeyValue(712, EVENT_PLAYER_UNIT_DROP_ITEM)
      default:AddKeyValue(713, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
      default:AddKeyValue(714, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
      default:AddKeyValue(715, EVENT_PLAYER_UNIT_RESEARCH_FINISH)
      default:AddKeyValue(716, EVENT_PLAYER_UNIT_TRAIN_FINISH)
      default:AddKeyValue(717, EVENT_PLAYER_UNIT_UPGRADE_FINISH)
      default:AddKeyValue(718, EVENT_PLAYER_UNIT_ATTACKED)
      default:AddKeyValue(719, EVENT_PLAYER_UNIT_DAMAGED)
      default:AddKeyValue(720, EVENT_PLAYER_UNIT_DESELECTED)
      default:AddKeyValue(721, EVENT_PLAYER_UNIT_DETECTED)
      default:AddKeyValue(722, EVENT_PLAYER_UNIT_HIDDEN)
      default:AddKeyValue(723, EVENT_PLAYER_UNIT_LOADED)
      default:AddKeyValue(724, EVENT_PLAYER_UNIT_RESCUED)
      default:AddKeyValue(725, EVENT_PLAYER_UNIT_SELECTED)
      default:AddKeyValue(726, EVENT_PLAYER_UNIT_SELL)
      default:AddKeyValue(727, EVENT_PLAYER_UNIT_DEATH)
      default:AddKeyValue(728, EVENT_PLAYER_UNIT_LOADED)
      default:AddKeyValue(729, EVENT_PLAYER_UNIT_PAWN_ITEM)
      default:AddKeyValue(730, EVENT_PLAYER_UNIT_PICKUP_ITEM)
      default:AddKeyValue(731, EVENT_PLAYER_UNIT_ISSUED_ORDER)
      default:AddKeyValue(732, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)
      default:AddKeyValue(733, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER)
      default:AddKeyValue(734, EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER)
      default:AddKeyValue(735, EVENT_PLAYER_UNIT_RESCUED)
      default:AddKeyValue(736, EVENT_PLAYER_UNIT_SELL_ITEM)
      default:AddKeyValue(737, EVENT_PLAYER_UNIT_SELL)
      default:AddKeyValue(738, EVENT_PLAYER_UNIT_SPELL_CAST)
      default:AddKeyValue(739, EVENT_PLAYER_UNIT_SPELL_CAST)
      default:AddKeyValue(740, EVENT_PLAYER_UNIT_SPELL_CHANNEL)
      default:AddKeyValue(741, EVENT_PLAYER_UNIT_SPELL_CHANNEL)
      default:AddKeyValue(742, EVENT_PLAYER_UNIT_SPELL_EFFECT)
      default:AddKeyValue(743, EVENT_PLAYER_UNIT_SPELL_EFFECT)
      default:AddKeyValue(744, EVENT_PLAYER_UNIT_SPELL_ENDCAST)
      default:AddKeyValue(745, EVENT_PLAYER_UNIT_SPELL_ENDCAST)
      default:AddKeyValue(746, EVENT_PLAYER_UNIT_SPELL_FINISH)
      default:AddKeyValue(747, EVENT_PLAYER_UNIT_SPELL_FINISH)
      default:AddKeyValue(748, EVENT_PLAYER_UNIT_STACK_ITEM)
      default:AddKeyValue(749, EVENT_PLAYER_UNIT_CONSTRUCT_START)
      default:AddKeyValue(750, EVENT_PLAYER_UNIT_RESEARCH_START)
      default:AddKeyValue(751, EVENT_PLAYER_UNIT_TRAIN_START)
      default:AddKeyValue(752, EVENT_PLAYER_UNIT_UPGRADE_START)
      default:AddKeyValue(753, EVENT_PLAYER_UNIT_SUMMON)
      default:AddKeyValue(754, EVENT_PLAYER_UNIT_USE_ITEM)
      default:AddKeyValue(801, EVENT_PLAYER_UNIT_ATTACKED)
      default:AddKeyValue(802, EVENT_PLAYER_UNIT_SELL)
      default:AddKeyValue(803, EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL)
      default:AddKeyValue(804, EVENT_PLAYER_UNIT_TRAIN_CANCEL)
      default:AddKeyValue(805, EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL)
      default:AddKeyValue(806, EVENT_PLAYER_UNIT_RESEARCH_CANCEL)
      default:AddKeyValue(807, EVENT_PLAYER_UNIT_TRAIN_CANCEL)
      default:AddKeyValue(808, EVENT_PLAYER_UNIT_UPGRADE_CANCEL)
      default:AddKeyValue(809, EVENT_PLAYER_UNIT_CHANGE_OWNER)
      default:AddKeyValue(810, EVENT_PLAYER_UNIT_DAMAGING)
      default:AddKeyValue(811, EVENT_PLAYER_UNIT_DECAY)
      default:AddKeyValue(812, EVENT_PLAYER_UNIT_DEATH)
      default:AddKeyValue(813, EVENT_PLAYER_UNIT_DROP_ITEM)
      default:AddKeyValue(814, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
      default:AddKeyValue(815, EVENT_PLAYER_UNIT_TRAIN_FINISH)
      default:AddKeyValue(816, EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
      default:AddKeyValue(817, EVENT_PLAYER_UNIT_RESEARCH_FINISH)
      default:AddKeyValue(818, EVENT_PLAYER_UNIT_TRAIN_FINISH)
      default:AddKeyValue(819, EVENT_PLAYER_UNIT_UPGRADE_FINISH)
      default:AddKeyValue(820, EVENT_PLAYER_UNIT_ATTACKED)
      default:AddKeyValue(822, EVENT_PLAYER_UNIT_DAMAGED)
      default:AddKeyValue(823, EVENT_PLAYER_UNIT_DESELECTED)
      default:AddKeyValue(824, EVENT_PLAYER_UNIT_DETECTED)
      default:AddKeyValue(825, EVENT_PLAYER_UNIT_HIDDEN)
      default:AddKeyValue(826, EVENT_PLAYER_UNIT_LOADED)
      default:AddKeyValue(827, EVENT_PLAYER_UNIT_RESCUED)
      default:AddKeyValue(828, EVENT_PLAYER_UNIT_SELECTED)
      default:AddKeyValue(829, EVENT_PLAYER_UNIT_SELL)
      default:AddKeyValue(830, EVENT_PLAYER_UNIT_SUMMON)
      default:AddKeyValue(831, EVENT_PLAYER_UNIT_DEATH)
      default:AddKeyValue(832, EVENT_PLAYER_UNIT_LOADED)
      default:AddKeyValue(833, EVENT_PLAYER_UNIT_PAWN_ITEM)
      default:AddKeyValue(834, EVENT_PLAYER_UNIT_PICKUP_ITEM)
      default:AddKeyValue(835, EVENT_PLAYER_UNIT_ISSUED_ORDER)
      default:AddKeyValue(836, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)
      default:AddKeyValue(837, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER)
      default:AddKeyValue(838, EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER)
      default:AddKeyValue(839, EVENT_PLAYER_UNIT_RESCUED)
      default:AddKeyValue(840, EVENT_PLAYER_UNIT_SELL_ITEM)
      default:AddKeyValue(841, EVENT_PLAYER_UNIT_SELL)
      default:AddKeyValue(842, EVENT_PLAYER_UNIT_SPELL_CAST)
      default:AddKeyValue(843, EVENT_PLAYER_UNIT_SPELL_CAST)
      default:AddKeyValue(844, EVENT_PLAYER_UNIT_SPELL_CHANNEL)
      default:AddKeyValue(845, EVENT_PLAYER_UNIT_SPELL_CHANNEL)
      default:AddKeyValue(846, EVENT_PLAYER_UNIT_SPELL_EFFECT)
      default:AddKeyValue(847, EVENT_PLAYER_UNIT_SPELL_EFFECT)
      default:AddKeyValue(848, EVENT_PLAYER_UNIT_SPELL_ENDCAST)
      default:AddKeyValue(849, EVENT_PLAYER_UNIT_SPELL_ENDCAST)
      default:AddKeyValue(850, EVENT_PLAYER_UNIT_SPELL_FINISH)
      default:AddKeyValue(851, EVENT_PLAYER_UNIT_SPELL_FINISH)
      default:AddKeyValue(852, EVENT_PLAYER_UNIT_STACK_ITEM)
      default:AddKeyValue(853, EVENT_PLAYER_UNIT_CONSTRUCT_START)
      default:AddKeyValue(854, EVENT_PLAYER_UNIT_TRAIN_START)
      default:AddKeyValue(855, EVENT_PLAYER_UNIT_CONSTRUCT_START)
      default:AddKeyValue(856, EVENT_PLAYER_UNIT_RESEARCH_START)
      default:AddKeyValue(857, EVENT_PLAYER_UNIT_TRAIN_START)
      default:AddKeyValue(858, EVENT_PLAYER_UNIT_UPGRADE_START)
      default:AddKeyValue(859, EVENT_PLAYER_UNIT_SUMMON)
      default:AddKeyValue(860, EVENT_PLAYER_UNIT_USE_ITEM)
      playerUnitEventNativesById = default
      local default = DictInt32Delegate()
      default:AddKeyValue(101, function ()
        return GetUnitTypeId(GetRevivableUnit())
      end)
      default:AddKeyValue(102, function ()
        return GetUnitTypeId(GetRevivingUnit())
      end)
      default:AddKeyValue(103, function ()
        return GetUnitTypeId(GetRevivingUnit())
      end)
      default:AddKeyValue(104, function ()
        return GetUnitTypeId(GetLearningUnit())
      end)
      default:AddKeyValue(105, function ()
        return GetUnitTypeId(GetLevelingUnit())
      end)
      default:AddKeyValue(106, function ()
        return GetUnitTypeId(GetRevivingUnit())
      end)
      default:AddKeyValue(301, function ()
        return GetItemTypeId(BlzGetAbsorbingItem())
      end)
      default:AddKeyValue(302, function ()
        return GetItemTypeId(GetManipulatedItem())
      end)
      default:AddKeyValue(303, function ()
        return GetItemTypeId(GetManipulatedItem())
      end)
      default:AddKeyValue(304, function ()
        return GetItemTypeId(GetManipulatedItem())
      end)
      default:AddKeyValue(305, function ()
        return GetItemTypeId(GetSoldItem())
      end)
      default:AddKeyValue(306, function ()
        return GetItemTypeId(GetManipulatedItem())
      end)
      default:AddKeyValue(307, function ()
        return GetItemTypeId(GetManipulatedItem())
      end)
      default:AddKeyValue(401, function ()
        return GetPlayerId(GetTriggerPlayer())
      end)
      default:AddKeyValue(402, function ()
        return GetPlayerId(GetOwningPlayer(GetTriggerUnit()))
      end)
      default:AddKeyValue(403, function ()
        return GetPlayerId(GetChangingUnitPrevOwner())
      end)
      default:AddKeyValue(404, function ()
        return GetPlayerId(GetTriggerPlayer())
      end)
      default:AddKeyValue(501, function ()
        return GetResearched()
      end)
      default:AddKeyValue(502, function ()
        return GetResearched()
      end)
      default:AddKeyValue(503, function ()
        return GetResearched()
      end)
      default:AddKeyValue(601, function ()
        return GetSpellAbilityId()
      end)
      default:AddKeyValue(602, function ()
        return GetSpellAbilityId()
      end)
      default:AddKeyValue(603, function ()
        return GetSpellAbilityId()
      end)
      default:AddKeyValue(604, function ()
        return GetSpellAbilityId()
      end)
      default:AddKeyValue(605, function ()
        return GetSpellAbilityId()
      end)
      default:AddKeyValue(606, function ()
        return GetLearnedSkill()
      end)
      default:AddKeyValue(801, function ()
        return GetUnitTypeId(GetAttacker())
      end)
      default:AddKeyValue(802, function ()
        return GetUnitTypeId(GetBuyingUnit())
      end)
      default:AddKeyValue(803, function ()
        return GetUnitTypeId(GetCancelledStructure())
      end)
      default:AddKeyValue(804, function ()
        return GetTrainedUnitType()
      end)
      default:AddKeyValue(805, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(806, function ()
        return GetUnitTypeId(GetResearchingUnit())
      end)
      default:AddKeyValue(807, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(808, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(809, function ()
        return GetUnitTypeId(GetChangingUnit())
      end)
      default:AddKeyValue(810, function ()
        return GetUnitTypeId(GetEventDamageSource())
      end)
      default:AddKeyValue(811, function ()
        return GetUnitTypeId(GetDecayingUnit())
      end)
      default:AddKeyValue(812, function ()
        return GetUnitTypeId(GetDyingUnit())
      end)
      default:AddKeyValue(813, function ()
        return GetUnitTypeId(GetManipulatingUnit())
      end)
      default:AddKeyValue(814, function ()
        return GetUnitTypeId(GetConstructedStructure())
      end)
      default:AddKeyValue(815, function ()
        return GetUnitTypeId(GetTrainedUnit())
      end)
      default:AddKeyValue(816, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(817, function ()
        return GetUnitTypeId(GetResearchingUnit())
      end)
      default:AddKeyValue(818, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(819, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(820, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(821, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(822, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(823, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(824, function ()
        return GetUnitTypeId(GetDetectedUnit())
      end)
      default:AddKeyValue(825, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(826, function ()
        return GetUnitTypeId(GetLoadedUnit())
      end)
      default:AddKeyValue(827, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(828, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(829, function ()
        return GetUnitTypeId(GetSoldUnit())
      end)
      default:AddKeyValue(830, function ()
        return GetUnitTypeId(GetSummonedUnit())
      end)
      default:AddKeyValue(831, function ()
        return GetUnitTypeId(GetKillingUnit())
      end)
      default:AddKeyValue(832, function ()
        return GetUnitTypeId(GetTransportUnit())
      end)
      default:AddKeyValue(833, function ()
        return GetUnitTypeId(GetManipulatingUnit())
      end)
      default:AddKeyValue(834, function ()
        return GetUnitTypeId(GetManipulatingUnit())
      end)
      default:AddKeyValue(835, function ()
        return GetUnitTypeId(GetOrderedUnit())
      end)
      default:AddKeyValue(836, function ()
        return GetUnitTypeId(GetOrderedUnit())
      end)
      default:AddKeyValue(837, function ()
        return GetUnitTypeId(GetOrderedUnit())
      end)
      default:AddKeyValue(838, function ()
        return GetUnitTypeId(GetOrderedUnit())
      end)
      default:AddKeyValue(839, function ()
        return GetUnitTypeId(GetRescuer())
      end)
      default:AddKeyValue(840, function ()
        return GetUnitTypeId(GetSellingUnit())
      end)
      default:AddKeyValue(841, function ()
        return GetUnitTypeId(GetSellingUnit())
      end)
      default:AddKeyValue(842, function ()
        return GetUnitTypeId(GetSpellAbilityUnit())
      end)
      default:AddKeyValue(843, function ()
        return GetUnitTypeId(GetSpellAbilityUnit())
      end)
      default:AddKeyValue(844, function ()
        return GetUnitTypeId(GetSpellAbilityUnit())
      end)
      default:AddKeyValue(845, function ()
        return GetUnitTypeId(GetSpellAbilityUnit())
      end)
      default:AddKeyValue(846, function ()
        return GetUnitTypeId(GetSpellAbilityUnit())
      end)
      default:AddKeyValue(847, function ()
        return GetUnitTypeId(GetSpellAbilityUnit())
      end)
      default:AddKeyValue(848, function ()
        return GetUnitTypeId(GetSpellAbilityUnit())
      end)
      default:AddKeyValue(849, function ()
        return GetUnitTypeId(GetSpellAbilityUnit())
      end)
      default:AddKeyValue(850, function ()
        return GetUnitTypeId(GetSpellAbilityUnit())
      end)
      default:AddKeyValue(851, function ()
        return GetUnitTypeId(GetSpellAbilityUnit())
      end)
      default:AddKeyValue(852, function ()
        return GetUnitTypeId(GetManipulatingUnit())
      end)
      default:AddKeyValue(853, function ()
        return GetUnitTypeId(GetConstructingStructure())
      end)
      default:AddKeyValue(854, function ()
        return GetTrainedUnitType()
      end)
      default:AddKeyValue(855, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(856, function ()
        return GetUnitTypeId(GetResearchingUnit())
      end)
      default:AddKeyValue(857, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(858, function ()
        return GetUnitTypeId(GetTriggerUnit())
      end)
      default:AddKeyValue(859, function ()
        return GetUnitTypeId(GetSummoningUnit())
      end)
      default:AddKeyValue(860, function ()
        return GetUnitTypeId(GetManipulatingUnit())
      end)
      filterFuncIdsByEvent = default
      local default = DictInt32Delegate()
      default:AddKeyValue(1, function ()
        return GetRevivableUnit()
      end)
      default:AddKeyValue(2, function ()
        return GetRevivingUnit()
      end)
      default:AddKeyValue(3, function ()
        return GetRevivingUnit()
      end)
      default:AddKeyValue(4, function ()
        return GetLearningUnit()
      end)
      default:AddKeyValue(5, function ()
        return GetLevelingUnit()
      end)
      default:AddKeyValue(6, function ()
        return GetRevivingUnit()
      end)
      default:AddKeyValue(201, function ()
        return BlzGetAbsorbingItem()
      end)
      default:AddKeyValue(202, function ()
        return GetManipulatedItem()
      end)
      default:AddKeyValue(203, function ()
        return GetManipulatedItem()
      end)
      default:AddKeyValue(204, function ()
        return GetManipulatedItem()
      end)
      default:AddKeyValue(205, function ()
        return GetSoldItem()
      end)
      default:AddKeyValue(206, function ()
        return GetManipulatedItem()
      end)
      default:AddKeyValue(207, function ()
        return GetManipulatedItem()
      end)
      default:AddKeyValue(701, function ()
        return GetAttacker()
      end)
      default:AddKeyValue(702, function ()
        return GetBuyingUnit()
      end)
      default:AddKeyValue(703, function ()
        return GetCancelledStructure()
      end)
      default:AddKeyValue(704, function ()
        return GetTriggerUnit()
      end)
      default:AddKeyValue(705, function ()
        return GetResearchingUnit()
      end)
      default:AddKeyValue(706, function ()
        return GetTriggerUnit()
      end)
      default:AddKeyValue(707, function ()
        return GetTriggerUnit()
      end)
      default:AddKeyValue(708, function ()
        return GetChangingUnit()
      end)
      default:AddKeyValue(709, function ()
        return GetEventDamageSource()
      end)
      default:AddKeyValue(710, function ()
        return GetDecayingUnit()
      end)
      default:AddKeyValue(711, function ()
        return GetDyingUnit()
      end)
      default:AddKeyValue(712, function ()
        return GetManipulatingUnit()
      end)
      default:AddKeyValue(713, function ()
        return GetConstructedStructure()
      end)
      default:AddKeyValue(714, function ()
        return GetTriggerUnit()
      end)
      default:AddKeyValue(715, function ()
        return GetResearchingUnit()
      end)
      default:AddKeyValue(716, function ()
        return GetTriggerUnit()
      end)
      default:AddKeyValue(717, function ()
        return GetTriggerUnit()
      end)
      default:AddKeyValue(718, function ()
        return GetTriggerUnit()
      end)
      default:AddKeyValue(719, function ()
        return GetTriggerUnit()
      end)
      default:AddKeyValue(720, function ()
        return GetTriggerUnit()
      end)
      default:AddKeyValue(721, function ()
        return GetDetectedUnit()
      end)
      default:AddKeyValue(722, function ()
        return GetTriggerUnit()
      end)
      default:AddKeyValue(723, function ()
        return GetLoadedUnit()
      end)
      default:AddKeyValue(724, function ()
        return GetTriggerUnit()
      end)
      default:AddKeyValue(725, function ()
        return GetTriggerUnit()
      end)
      default:AddKeyValue(726, function ()
        return GetSoldUnit()
      end)
      default:AddKeyValue(727, function ()
        return GetKillingUnit()
      end)
      default:AddKeyValue(728, function ()
        return GetTransportUnit()
      end)
      default:AddKeyValue(729, function ()
        return GetManipulatingUnit()
      end)
      default:AddKeyValue(730, function ()
        return GetManipulatingUnit()
      end)
      default:AddKeyValue(731, function ()
        return GetOrderedUnit()
      end)
      default:AddKeyValue(732, function ()
        return GetOrderedUnit()
      end)
      default:AddKeyValue(733, function ()
        return GetOrderedUnit()
      end)
      default:AddKeyValue(734, function ()
        return GetOrderedUnit()
      end)
      default:AddKeyValue(735, function ()
        return GetRescuer()
      end)
      default:AddKeyValue(736, function ()
        return GetSellingUnit()
      end)
      default:AddKeyValue(737, function ()
        return GetSellingUnit()
      end)
      default:AddKeyValue(738, function ()
        return GetSpellAbilityUnit()
      end)
      default:AddKeyValue(739, function ()
        return GetSpellAbilityUnit()
      end)
      default:AddKeyValue(740, function ()
        return GetSpellAbilityUnit()
      end)
      default:AddKeyValue(741, function ()
        return GetSpellAbilityUnit()
      end)
      default:AddKeyValue(742, function ()
        return GetSpellAbilityUnit()
      end)
      default:AddKeyValue(743, function ()
        return GetSpellAbilityUnit()
      end)
      default:AddKeyValue(744, function ()
        return GetSpellAbilityUnit()
      end)
      default:AddKeyValue(745, function ()
        return GetSpellAbilityUnit()
      end)
      default:AddKeyValue(746, function ()
        return GetSpellAbilityUnit()
      end)
      default:AddKeyValue(747, function ()
        return GetSpellAbilityUnit()
      end)
      default:AddKeyValue(748, function ()
        return GetManipulatingUnit()
      end)
      default:AddKeyValue(749, function ()
        return GetConstructingStructure()
      end)
      default:AddKeyValue(750, function ()
        return GetTriggerUnit()
      end)
      default:AddKeyValue(751, function ()
        return GetResearchingUnit()
      end)
      default:AddKeyValue(752, function ()
        return GetTriggerUnit()
      end)
      default:AddKeyValue(753, function ()
        return GetSummoningUnit()
      end)
      default:AddKeyValue(754, function ()
        return GetManipulatingUnit()
      end)
      filterFuncHandlesByEvent = default
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for <paramref name="unit" />.
    -- </summary>
    Register = function (event, action, unit)
      Register19(event, action, unit)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for any hero.
    -- </summary>
    Register1 = function (event, action)
      Register17(event, action)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for any hero of <paramref name="unitTypeId" />.
    -- </summary>
    Register2 = function (event, action, unitTypeId)
      Register18(event, action, unitTypeId)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for <paramref name="item" />.
    -- </summary>
    Register3 = function (event, action, item)
      Register19(event, action, item)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for any item.
    -- </summary>
    Register4 = function (event, action)
      Register17(event, action)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for any item of <paramref name="itemTypeId" />.
    -- </summary>
    Register5 = function (event, action, itemTypeId)
      Register18(event, action, itemTypeId)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for any player.
    -- </summary>
    Register6 = function (event, action)
      Register17(event, action)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for <paramref name="player" />.
    -- </summary>
    Register7 = function (event, action, player)
      Register18(event, action, GetPlayerId(player))
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for <paramref name="playerId" />.
    -- <para>Note: <paramref name="playerId" /> start at 0. So player 1 (red) is 0.</para>
    -- </summary>
    Register8 = function (event, action, playerId)
      Register18(event, action, playerId)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for any research.
    -- </summary>
    Register9 = function (event, action)
      Register17(event, action)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for any research of <paramref name="researchId" />.
    -- </summary>
    Register10 = function (event, action, researchId)
      Register18(event, action, researchId)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for any spell.
    -- </summary>
    Register11 = function (event, action)
      Register17(event, action)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for any spell of <paramref name="abilityId" />.
    -- </summary>
    Register12 = function (event, action, abilityId)
      Register18(event, action, abilityId)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for <paramref name="unit" />.
    -- </summary>
    Register13 = function (event, action, unit)
      Register19(event, action, unit)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for any unit.
    -- </summary>
    Register14 = function (event, action)
      Register17(event, action)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when <paramref name="event" /> is triggered for any unit.
    -- </summary>
    Register15 = function (event, action, unitTypeId)
      Register18(event, action, unitTypeId)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when the custom event with <paramref name="identifier" /> is triggered for <paramref name="filterId" />.
    -- </summary>
    Register16 = function (identifier, action, filterId)
      local default, value = customEventIdsByIdentifier:TryGetValue(identifier, nil)
      if default then
        Register18(value, action, filterId)
      end
    end
    Register17 = function (event, action)
      local default = GetOrCreateHandler(event)
      if default ~= nil then
        default:Register(action, event)
      end
    end
    Register18 = function (event, action, filterId)
      local filterFunc = filterFuncIdsByEvent:get(event)
      local default = GetOrCreateHandler(event)
      if default ~= nil then
        default:Register1(action, event, filterFunc, filterId)
      end
    end
    Register19 = function (event, action, handle)
      local filterFunc = filterFuncHandlesByEvent:get(event)
      local default = GetOrCreateHandler(event)
      if default ~= nil then
        default:Register2(action, event, filterFunc, handle)
      end
    end
    -- <summary>
    -- Unregisters <paramref name="action" /> from <paramref name="event" /> for <paramref name="unit" />.
    -- </summary>
    Unregister = function (event, action, unit)
      Unregister18(event, action, unit)
    end
    -- <summary>
    -- Unregisters <paramref name="action" /> from <paramref name="event" /> for any hero.
    -- </summary>
    Unregister1 = function (event, action)
      Unregister16(event, action)
    end
    -- <summary>
    -- Unregisters <paramref name="action" /> from <paramref name="event" /> for any hero of <paramref name="unitTypeId" />.
    -- </summary>
    Unregister2 = function (event, action, unitTypeId)
      Unregister17(event, action, unitTypeId)
    end
    -- <summary>
    -- Unregisters <paramref name="action" /> from <paramref name="event" /> for <paramref name="item" />.
    -- </summary>
    Unregister3 = function (event, action, item)
      Unregister18(event, action, item)
    end
    -- <summary>
    -- Unregisters <paramref name="action" /> from <paramref name="event" /> for any item.
    -- </summary>
    Unregister4 = function (event, action)
      Unregister16(event, action)
    end
    -- <summary>
    -- Unregisters <paramref name="action" /> from <paramref name="event" /> for any item of <paramref name="itemTypeId" />.
    -- </summary>
    Unregister5 = function (event, action, itemTypeId)
      Unregister17(event, action, itemTypeId)
    end
    -- <summary>
    -- Unregisters <paramref name="action" /> from <paramref name="event" /> for any player.
    -- </summary>
    Unregister6 = function (event, action)
      Unregister16(event, action)
    end
    -- <summary>
    -- Unregisters <paramref name="action" /> from <paramref name="event" /> for <paramref name="playerId" />.
    -- </summary>
    Unregister7 = function (event, action, playerId)
      Unregister17(event, action, playerId)
    end
    -- <summary>
    -- Unregisters <paramref name="action" /> from <paramref name="event" /> for any research.
    -- </summary>
    Unregister8 = function (event, action)
      Unregister16(event, action)
    end
    -- <summary>
    -- Unregisters <paramref name="action" /> from <paramref name="event" /> for any research of <paramref name="researchId" />.
    -- </summary>
    Unregister9 = function (event, action, researchId)
      Unregister17(event, action, researchId)
    end
    -- <summary>
    -- Unregisters <paramref name="action" /> from <paramref name="event" /> for any spell.
    -- </summary>
    Unregister10 = function (event, action)
      Unregister16(event, action)
    end
    -- <summary>
    -- Unregisters <paramref name="action" /> from <paramref name="event" /> for any spell of <paramref name="abilityId" />.
    -- </summary>
    Unregister11 = function (event, action, abilityId)
      Unregister17(event, action, abilityId)
    end
    -- <summary>
    -- Unregisters <paramref name="action" /> from <paramref name="event" /> for <paramref name="unit" />.
    -- </summary>
    Unregister12 = function (event, action, unit)
      Unregister18(event, action, unit)
    end
    -- <summary>
    -- Unregisters <paramref name="action" /> from <paramref name="event" /> for any unit.
    -- </summary>
    Unregister13 = function (event, action)
      Unregister16(event, action)
    end
    -- <summary>
    -- Unregisters <paramref name="action" /> from <paramref name="event" /> for any unit of <paramref name="unitTypeId" />.
    -- </summary>
    Unregister14 = function (event, action, unitTypeId)
      Unregister17(event, action, unitTypeId)
    end
    -- <summary>
    -- Registers <paramref name="action" /> to fire when the custom event with <paramref name="identifier" /> is triggered for <paramref name="filterId" />.
    -- </summary>
    Unregister15 = function (identifier, action, filterId)
      local default, value = customEventIdsByIdentifier:TryGetValue(identifier, nil)
      if default then
        Unregister17(value, action, filterId)
      end
    end
    Unregister16 = function (event, action)
      local default = GetOrCreateHandler(event)
      if default ~= nil then
        default:Unregister(action, event)
      end
    end
    Unregister17 = function (event, action, filterId)
      local filterFunc = filterFuncIdsByEvent:get(event)
      local default = GetOrCreateHandler(event)
      if default ~= nil then
        default:Unregister1(action, event, filterFunc, filterId)
      end
    end
    Unregister18 = function (event, action, handle)
      local filterFunc = filterFuncHandlesByEvent:get(event)
      local default = GetOrCreateHandler(event)
      if default ~= nil then
        default:Unregister2(action, event, filterFunc, handle)
      end
    end
    GetOrCreateHandler = function (event)
      local default, value = customPlayerUnitEventHandlers:TryGetValue(event, nil)
      if default then
        if value == nil then
          return CreateCustomHandler(event)
        end
        return value
      end
      local extern, value2 = playerUnitEventNativesById:TryGetValue(event, nil)
      if extern then
        local ref, value3 = playerUnitEventHandlers:TryGetValue(value2, nil)
        if not ref then
          value3 = PlayerUnitEventHandlers.PlayerUnitEventHandler(value2)
          playerUnitEventHandlers:AddKeyValue(value2, value3)
        end
        return value3
      end
      return nil
    end
    -- <summary>
    -- Defines a custom event with the given <paramref name="identifier" /> and <paramref name="filter" /> that responds to events of
    -- the given <paramref name="nativeEvent" />.
    -- </summary>
    AddCustomEvent = function (identifier, filter, nativeEvent)
      local num = customEventIdsByIdentifier:getCount() + 1001
      customEventIdsByIdentifier:AddKeyValue(identifier, num)
      playerUnitEventNativesById:AddKeyValue(num, nativeEvent)
      filterFuncIdsByEvent:AddKeyValue(num, filter)
    end
    CreateCustomHandler = function (event)
      if event == 821 then
        local unitCreatedHandler = PlayerUnitEventHandlers.UnitCreatedHandler()
        local unitCreatedHandler2 = unitCreatedHandler
        customPlayerUnitEventHandlers:set(event, unitCreatedHandler2)
        return unitCreatedHandler2
      end
      System.throw(System.NotImplementedException("Unexpected custom handler: " .. event))
    end
    -- <summary>
    -- Call this method to automatically wrap your actions in a try/catch, so that exceptions that lead back to <see cref="T:WCSharp.Events.PeriodicEvents" /> will automatically output
    -- information.
    -- <para>It is recommended to use compilation time conditions to not call this on release mode.</para>
    -- </summary>
    EnableDebug = function ()
      class.Debug = true
    end
    class = {
      Debug = false,
      Register = Register,
      Register1 = Register1,
      Register2 = Register2,
      Register3 = Register3,
      Register4 = Register4,
      Register5 = Register5,
      Register6 = Register6,
      Register7 = Register7,
      Register8 = Register8,
      Register9 = Register9,
      Register10 = Register10,
      Register11 = Register11,
      Register12 = Register12,
      Register13 = Register13,
      Register14 = Register14,
      Register15 = Register15,
      Register16 = Register16,
      Unregister = Unregister,
      Unregister1 = Unregister1,
      Unregister2 = Unregister2,
      Unregister3 = Unregister3,
      Unregister4 = Unregister4,
      Unregister5 = Unregister5,
      Unregister6 = Unregister6,
      Unregister7 = Unregister7,
      Unregister8 = Unregister8,
      Unregister9 = Unregister9,
      Unregister10 = Unregister10,
      Unregister11 = Unregister11,
      Unregister12 = Unregister12,
      Unregister13 = Unregister13,
      Unregister14 = Unregister14,
      Unregister15 = Unregister15,
      AddCustomEvent = AddCustomEvent,
      EnableDebug = EnableDebug,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "customEventIdsByIdentifier", 0x9, System.Dictionary(System.String, System.Int32) },
            { "customPlayerUnitEventHandlers", 0x9, System.Dictionary(System.Int32, out.WCSharp.Events.EventHandlers.PlayerUnitEventHandlers.IPlayerUnitEventHandler) },
            { "filterFuncHandlesByEvent", 0x9, System.Dictionary(System.Int32, System.Delegate(out.WCSharp.Api.handle)) },
            { "filterFuncIdsByEvent", 0x9, System.Dictionary(System.Int32, System.Delegate(System.Int32)) },
            { "playerUnitEventHandlers", 0x9, System.Dictionary(out.WCSharp.Api.playerunitevent, out.WCSharp.Events.EventHandlers.PlayerUnitEventHandlers.IPlayerUnitEventHandler) },
            { "playerUnitEventNativesById", 0x9, System.Dictionary(System.Int32, out.WCSharp.Api.playerunitevent) }
          },
          properties = {
            { "Debug", 0xC, System.Boolean }
          },
          methods = {
            { "AddCustomEvent", 0x30E, AddCustomEvent, System.String, System.Delegate(System.Int32), out.WCSharp.Api.playerunitevent },
            { "CreateCustomHandler", 0x189, CreateCustomHandler, System.Int32, out.WCSharp.Events.EventHandlers.PlayerUnitEventHandlers.IPlayerUnitEventHandler },
            { "EnableDebug", 0xE, EnableDebug },
            { "GetOrCreateHandler", 0x189, GetOrCreateHandler, System.Int32, out.WCSharp.Events.EventHandlers.PlayerUnitEventHandlers.IPlayerUnitEventHandler },
            { "Register", 0x309, Register19, System.Int32, System.Delegate, out.WCSharp.Api.handle },
            { "Register", 0x309, Register18, System.Int32, System.Delegate, System.Int32 },
            { "Register", 0x209, Register17, System.Int32, System.Delegate },
            { "Register", 0x30E, Register16, System.String, System.Delegate, System.Int32 },
            { "Register", 0x30E, Register15, System.Int32, System.Delegate, System.Int32 },
            { "Register", 0x20E, Register14, System.Int32, System.Delegate },
            { "Register", 0x30E, Register13, System.Int32, System.Delegate, out.WCSharp.Api.unit },
            { "Register", 0x30E, Register12, System.Int32, System.Delegate, System.Int32 },
            { "Register", 0x30E, Register, System.Int32, System.Delegate, out.WCSharp.Api.unit },
            { "Register", 0x30E, Register10, System.Int32, System.Delegate, System.Int32 },
            { "Register", 0x20E, Register11, System.Int32, System.Delegate },
            { "Register", 0x30E, Register2, System.Int32, System.Delegate, System.Int32 },
            { "Register", 0x20E, Register1, System.Int32, System.Delegate },
            { "Register", 0x20E, Register4, System.Int32, System.Delegate },
            { "Register", 0x30E, Register3, System.Int32, System.Delegate, out.WCSharp.Api.item },
            { "Register", 0x20E, Register6, System.Int32, System.Delegate },
            { "Register", 0x30E, Register7, System.Int32, System.Delegate, out.WCSharp.Api.player },
            { "Register", 0x30E, Register8, System.Int32, System.Delegate, System.Int32 },
            { "Register", 0x20E, Register9, System.Int32, System.Delegate },
            { "Register", 0x30E, Register5, System.Int32, System.Delegate, System.Int32 },
            { "Unregister", 0x20E, Unregister13, System.Int32, System.Delegate },
            { "Unregister", 0x309, Unregister18, System.Int32, System.Delegate, out.WCSharp.Api.handle },
            { "Unregister", 0x309, Unregister17, System.Int32, System.Delegate, System.Int32 },
            { "Unregister", 0x209, Unregister16, System.Int32, System.Delegate },
            { "Unregister", 0x30E, Unregister15, System.String, System.Delegate, System.Int32 },
            { "Unregister", 0x30E, Unregister14, System.Int32, System.Delegate, System.Int32 },
            { "Unregister", 0x30E, Unregister12, System.Int32, System.Delegate, out.WCSharp.Api.unit },
            { "Unregister", 0x30E, Unregister7, System.Int32, System.Delegate, System.Int32 },
            { "Unregister", 0x20E, Unregister10, System.Int32, System.Delegate },
            { "Unregister", 0x30E, Unregister9, System.Int32, System.Delegate, System.Int32 },
            { "Unregister", 0x20E, Unregister8, System.Int32, System.Delegate },
            { "Unregister", 0x20E, Unregister6, System.Int32, System.Delegate },
            { "Unregister", 0x30E, Unregister5, System.Int32, System.Delegate, System.Int32 },
            { "Unregister", 0x20E, Unregister4, System.Int32, System.Delegate },
            { "Unregister", 0x30E, Unregister3, System.Int32, System.Delegate, out.WCSharp.Api.item },
            { "Unregister", 0x30E, Unregister2, System.Int32, System.Delegate, System.Int32 },
            { "Unregister", 0x30E, Unregister, System.Int32, System.Delegate, out.WCSharp.Api.unit },
            { "Unregister", 0x30E, Unregister11, System.Int32, System.Delegate, System.Int32 },
            { "Unregister", 0x20E, Unregister1, System.Int32, System.Delegate }
          },
          class = { "PlayerUnitEvents", 0x3E }
        }
      end
    }
    return class
  end)
  -- <summary>
  -- Defines all built-in ResearchEvents supported by <see cref="T:WCSharp.Events.PlayerUnitEvents" />.
  -- <para>All of these events fire based on a research id filter.</para>
  -- <para>Custom events can also be specified via <see cref="M:WCSharp.Events.PlayerUnitEvents.AddCustomEvent(System.String,System.Func{System.Int32},WCSharp.Api.playerunitevent)" />.</para>
  -- </summary>
  namespace.enum("ResearchEvent", function ()
    return {
      IsCancelled = 501,
      IsFinished = 502,
      IsStarted = 503,
      __metadata__ = function (out)
        return {
          fields = {
            { "IsCancelled", 0xE, System.Int32 },
            { "IsFinished", 0xE, System.Int32 },
            { "IsStarted", 0xE, System.Int32 }
          },
          class = { "ResearchEvent", 0x26 }
        }
      end
    }
  end)
  -- <summary>
  -- Defines all built-in SpellEvents supported by <see cref="T:WCSharp.Events.PlayerUnitEvents" />.
  -- <para>All of these events fire based on a ability id filter.</para>
  -- <para>Custom events can also be specified via <see cref="M:WCSharp.Events.PlayerUnitEvents.AddCustomEvent(System.String,System.Func{System.Int32},WCSharp.Api.playerunitevent)" />.</para>
  -- </summary>
  namespace.enum("SpellEvent", function ()
    return {
      Cast = 601,
      Channel = 602,
      Effect = 603,
      EndCast = 604,
      Finish = 605,
      Learned = 606,
      __metadata__ = function (out)
        return {
          fields = {
            { "Cast", 0xE, System.Int32 },
            { "Channel", 0xE, System.Int32 },
            { "Effect", 0xE, System.Int32 },
            { "EndCast", 0xE, System.Int32 },
            { "Finish", 0xE, System.Int32 },
            { "Learned", 0xE, System.Int32 }
          },
          class = { "SpellEvent", 0x26 }
        }
      end
    }
  end)
  -- <summary>
  -- Defines all built-in UnitEvents supported by <see cref="T:WCSharp.Events.PlayerUnitEvents" />.
  -- <para>All of these events fire based on a unit handle filter.</para>
  -- <para>Custom events can also be specified via <see cref="M:WCSharp.Events.PlayerUnitEvents.AddCustomEvent(System.String,System.Func{System.Int32},WCSharp.Api.playerunitevent)" />.</para>
  -- </summary>
  namespace.enum("UnitEvent", function ()
    return {
      Attacks = 701,
      BuysUnit = 702,
      CancelsBeingConstructed = 703,
      CancelsConstruction = 704,
      CancelsResearch = 705,
      CancelsTraining = 706,
      CancelsUpgrade = 707,
      ChangesOwner = 708,
      Damaging = 709,
      Decays = 710,
      Dies = 711,
      DropsItem = 712,
      FinishesBeingConstructed = 713,
      FinishesConstruction = 714,
      FinishesResearch = 715,
      FinishesTraining = 716,
      FinishesUpgrade = 717,
      IsAttacked = 718,
      IsDamaged = 719,
      IsDeselected = 720,
      IsDetected = 721,
      IsHidden = 722,
      IsLoaded = 723,
      IsRescued = 724,
      IsSelected = 725,
      IsSold = 726,
      Kills = 727,
      Loads = 728,
      PawnsItem = 729,
      PicksUpItem = 730,
      ReceivesOrder = 731,
      ReceivesPointOrder = 732,
      ReceivesTargetOrder = 733,
      ReceivesUnitTypeOrder = 734,
      Rescues = 735,
      SellsItem = 736,
      SellsUnit = 737,
      SpellCast = 738,
      SpellCastOn = 739,
      SpellChannel = 740,
      SpellChannelOn = 741,
      SpellEffect = 742,
      SpellEffectOn = 743,
      SpellEndCast = 744,
      SpellEndCastOn = 745,
      SpellFinish = 746,
      SpellFinishOn = 747,
      StacksItem = 748,
      StartsConstruction = 749,
      StartsResearch = 750,
      StartsTraining = 751,
      StartsUpgrade = 752,
      Summons = 753,
      UsesItem = 754,
      __metadata__ = function (out)
        return {
          fields = {
            { "Attacks", 0xE, System.Int32 },
            { "BuysUnit", 0xE, System.Int32 },
            { "CancelsBeingConstructed", 0xE, System.Int32 },
            { "CancelsConstruction", 0xE, System.Int32 },
            { "CancelsResearch", 0xE, System.Int32 },
            { "CancelsTraining", 0xE, System.Int32 },
            { "CancelsUpgrade", 0xE, System.Int32 },
            { "ChangesOwner", 0xE, System.Int32 },
            { "Damaging", 0xE, System.Int32 },
            { "Decays", 0xE, System.Int32 },
            { "Dies", 0xE, System.Int32 },
            { "DropsItem", 0xE, System.Int32 },
            { "FinishesBeingConstructed", 0xE, System.Int32 },
            { "FinishesConstruction", 0xE, System.Int32 },
            { "FinishesResearch", 0xE, System.Int32 },
            { "FinishesTraining", 0xE, System.Int32 },
            { "FinishesUpgrade", 0xE, System.Int32 },
            { "IsAttacked", 0xE, System.Int32 },
            { "IsDamaged", 0xE, System.Int32 },
            { "IsDeselected", 0xE, System.Int32 },
            { "IsDetected", 0xE, System.Int32 },
            { "IsHidden", 0xE, System.Int32 },
            { "IsLoaded", 0xE, System.Int32 },
            { "IsRescued", 0xE, System.Int32 },
            { "IsSelected", 0xE, System.Int32 },
            { "IsSold", 0xE, System.Int32 },
            { "Kills", 0xE, System.Int32 },
            { "Loads", 0xE, System.Int32 },
            { "PawnsItem", 0xE, System.Int32 },
            { "PicksUpItem", 0xE, System.Int32 },
            { "ReceivesOrder", 0xE, System.Int32 },
            { "ReceivesPointOrder", 0xE, System.Int32 },
            { "ReceivesTargetOrder", 0xE, System.Int32 },
            { "ReceivesUnitTypeOrder", 0xE, System.Int32 },
            { "Rescues", 0xE, System.Int32 },
            { "SellsItem", 0xE, System.Int32 },
            { "SellsUnit", 0xE, System.Int32 },
            { "SpellCast", 0xE, System.Int32 },
            { "SpellCastOn", 0xE, System.Int32 },
            { "SpellChannel", 0xE, System.Int32 },
            { "SpellChannelOn", 0xE, System.Int32 },
            { "SpellEffect", 0xE, System.Int32 },
            { "SpellEffectOn", 0xE, System.Int32 },
            { "SpellEndCast", 0xE, System.Int32 },
            { "SpellEndCastOn", 0xE, System.Int32 },
            { "SpellFinish", 0xE, System.Int32 },
            { "SpellFinishOn", 0xE, System.Int32 },
            { "StacksItem", 0xE, System.Int32 },
            { "StartsConstruction", 0xE, System.Int32 },
            { "StartsResearch", 0xE, System.Int32 },
            { "StartsTraining", 0xE, System.Int32 },
            { "StartsUpgrade", 0xE, System.Int32 },
            { "Summons", 0xE, System.Int32 },
            { "UsesItem", 0xE, System.Int32 }
          },
          class = { "UnitEvent", 0x26 }
        }
      end
    }
  end)
  -- <summary>
  -- Defines all built-in UnitTypeEvents supported by <see cref="T:WCSharp.Events.PlayerUnitEvents" />.
  -- <para>All of these events fire based on an unit type id filter.</para>
  -- <para>Custom events can also be specified via <see cref="M:WCSharp.Events.PlayerUnitEvents.AddCustomEvent(System.String,System.Func{System.Int32},WCSharp.Api.playerunitevent)" />.</para>
  -- </summary>
  namespace.enum("UnitTypeEvent", function ()
    return {
      Attacks = 801,
      BuysUnit = 802,
      CancelsBeingConstructed = 803,
      CancelsBeingTrained = 804,
      CancelsConstruction = 805,
      CancelsResearch = 806,
      CancelsTraining = 807,
      CancelsUpgrade = 808,
      ChangesOwner = 809,
      Damaging = 810,
      Decays = 811,
      Dies = 812,
      DropsItem = 813,
      FinishesBeingConstructed = 814,
      FinishesBeingTrained = 815,
      FinishesConstruction = 816,
      FinishesResearch = 817,
      FinishesTraining = 818,
      FinishesUpgrade = 819,
      IsAttacked = 820,
      IsCreated = 821,
      IsDamaged = 822,
      IsDeselected = 823,
      IsDetected = 824,
      IsHidden = 825,
      IsLoaded = 826,
      IsRescued = 827,
      IsSelected = 828,
      IsSold = 829,
      IsSummoned = 830,
      Kills = 831,
      Loads = 832,
      PawnsItem = 833,
      PicksUpItem = 834,
      ReceivesOrder = 835,
      ReceivesPointOrder = 836,
      ReceivesTargetOrder = 837,
      ReceivesUnitTypeOrder = 838,
      Rescues = 839,
      SellsItem = 840,
      SellsUnit = 841,
      SpellCast = 842,
      SpellCastOn = 843,
      SpellChannel = 844,
      SpellChannelOn = 845,
      SpellEffect = 846,
      SpellEffectOn = 847,
      SpellEndCast = 848,
      SpellEndCastOn = 849,
      SpellFinish = 850,
      SpellFinishOn = 851,
      StacksItem = 852,
      StartsBeingConstructed = 853,
      StartsBeingTrained = 854,
      StartsConstruction = 855,
      StartsResearch = 856,
      StartsTraining = 857,
      StartsUpgrade = 858,
      Summons = 859,
      UsesItem = 860,
      __metadata__ = function (out)
        return {
          fields = {
            { "Attacks", 0xE, System.Int32 },
            { "BuysUnit", 0xE, System.Int32 },
            { "CancelsBeingConstructed", 0xE, System.Int32 },
            { "CancelsBeingTrained", 0xE, System.Int32 },
            { "CancelsConstruction", 0xE, System.Int32 },
            { "CancelsResearch", 0xE, System.Int32 },
            { "CancelsTraining", 0xE, System.Int32 },
            { "CancelsUpgrade", 0xE, System.Int32 },
            { "ChangesOwner", 0xE, System.Int32 },
            { "Damaging", 0xE, System.Int32 },
            { "Decays", 0xE, System.Int32 },
            { "Dies", 0xE, System.Int32 },
            { "DropsItem", 0xE, System.Int32 },
            { "FinishesBeingConstructed", 0xE, System.Int32 },
            { "FinishesBeingTrained", 0xE, System.Int32 },
            { "FinishesConstruction", 0xE, System.Int32 },
            { "FinishesResearch", 0xE, System.Int32 },
            { "FinishesTraining", 0xE, System.Int32 },
            { "FinishesUpgrade", 0xE, System.Int32 },
            { "IsAttacked", 0xE, System.Int32 },
            { "IsCreated", 0xE, System.Int32 },
            { "IsDamaged", 0xE, System.Int32 },
            { "IsDeselected", 0xE, System.Int32 },
            { "IsDetected", 0xE, System.Int32 },
            { "IsHidden", 0xE, System.Int32 },
            { "IsLoaded", 0xE, System.Int32 },
            { "IsRescued", 0xE, System.Int32 },
            { "IsSelected", 0xE, System.Int32 },
            { "IsSold", 0xE, System.Int32 },
            { "IsSummoned", 0xE, System.Int32 },
            { "Kills", 0xE, System.Int32 },
            { "Loads", 0xE, System.Int32 },
            { "PawnsItem", 0xE, System.Int32 },
            { "PicksUpItem", 0xE, System.Int32 },
            { "ReceivesOrder", 0xE, System.Int32 },
            { "ReceivesPointOrder", 0xE, System.Int32 },
            { "ReceivesTargetOrder", 0xE, System.Int32 },
            { "ReceivesUnitTypeOrder", 0xE, System.Int32 },
            { "Rescues", 0xE, System.Int32 },
            { "SellsItem", 0xE, System.Int32 },
            { "SellsUnit", 0xE, System.Int32 },
            { "SpellCast", 0xE, System.Int32 },
            { "SpellCastOn", 0xE, System.Int32 },
            { "SpellChannel", 0xE, System.Int32 },
            { "SpellChannelOn", 0xE, System.Int32 },
            { "SpellEffect", 0xE, System.Int32 },
            { "SpellEffectOn", 0xE, System.Int32 },
            { "SpellEndCast", 0xE, System.Int32 },
            { "SpellEndCastOn", 0xE, System.Int32 },
            { "SpellFinish", 0xE, System.Int32 },
            { "SpellFinishOn", 0xE, System.Int32 },
            { "StacksItem", 0xE, System.Int32 },
            { "StartsBeingConstructed", 0xE, System.Int32 },
            { "StartsBeingTrained", 0xE, System.Int32 },
            { "StartsConstruction", 0xE, System.Int32 },
            { "StartsResearch", 0xE, System.Int32 },
            { "StartsTraining", 0xE, System.Int32 },
            { "StartsUpgrade", 0xE, System.Int32 },
            { "Summons", 0xE, System.Int32 },
            { "UsesItem", 0xE, System.Int32 }
          },
          class = { "UnitTypeEvent", 0x26 }
        }
      end
    }
  end)
end)
System.namespace("WCSharp.Events.EventHandlers", function (namespace)
  namespace.class("EventSet", function (namespace)
    local getFilterId, getCount, Add, Remove, Run, __ctor__
    __ctor__ = function (this)
      this.actions = ListDelegate()
    end
    getFilterId = function (this)
      return -1
    end
    getCount = function (this)
      return #this.actions
    end
    Add = function (this, action, filterObj)
      this.actions:Add(action)
    end
    Remove = function (this, action, filterObj)
      local num = this.actions:IndexOf(action)
      if num == -1 then
        return false
      end
      if num < this.size then
        if num <= this.index then
          this.actions:RemoveAt(num)
          this.index = this.index - 1
          this.size = this.size - 1
        else
          local count = #this.actions
          this.actions:set(num, this.actions:get(this.size - 1))
          this.actions:set(this.size - 1, this.actions:get(count - 1))
          this.actions:RemoveAt(num)
          this.size = this.size - 1
        end
      else
        local count2 = #this.actions
        this.actions:set(num, this.actions:get(count2 - 1))
        this.actions:RemoveAt(count2 - 1)
      end
      return true
    end
    Run = function (this)
      this.index = 0
      do
        this.size = #this.actions
        while this.index < this.size do
          this.actions:get(this.index)()
          this.index = this.index + 1
        end
      end
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Events.EventHandlers.IEventSet
        }
      end,
      index = 0,
      size = 0,
      getFilterId = getFilterId,
      getCount = getCount,
      Add = Add,
      Remove = Remove,
      Run = Run,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "actions", 0x3, System.List(System.Delegate) },
            { "index", 0x3, System.Int32 },
            { "size", 0x3, System.Int32 }
          },
          properties = {
            { "Count", 0x206, System.Int32, getCount },
            { "FilterId", 0x206, System.Int32, getFilterId }
          },
          methods = {
            { ".ctor", 0x6, nil },
            { "Add", 0x206, Add, System.Delegate, System.Object },
            { "Remove", 0x286, Remove, System.Delegate, System.Object, System.Boolean },
            { "Run", 0x6, Run }
          },
          class = { "EventSet", 0x4 }
        }
      end
    }
  end)
  namespace.class("EventSetHandleFilter", function (namespace)
    local getFilterId, getCount, Add, Remove, Run, __ctor__
    __ctor__ = function (this, filterId, filterFunc)
      this.FilterId = filterId
      this.filterFunc = filterFunc or System.throw(System.ArgumentNullException("filterFunc"))
      this.actionsByFilterId = DicthandleDelegate()
      this.eventSetsByFilterId = DicthandleEventSet()
    end
    getFilterId = System.property("FilterId", true)
    getCount = function (this)
      return this.actionsByFilterId:getCount()
    end
    Add = function (this, action, filterObj)
      local value = ((System.as(filterObj, TypeWrapper_1handle)) or System.throw(System.ArgumentException("Unable to cast event filter to required type " .. System.toString(System.typeof(WCSharpApi.handle)), "filterObj"))).Value
      local value3
      local extern, value2 = this.eventSetsByFilterId:TryGetValue(value, nil)
      if extern then
        value2:Add(action, value)
      else
        local ref
        ref, value3 = this.actionsByFilterId:TryGetValue(value, nil)
        if ref then
          this.actionsByFilterId:RemoveKey(value)
          value2 = WCSharpEventHandlers.EventSet()
          value2:Add(value3, value)
          value2:Add(action, value)
          this.actionsByFilterId:AddKeyValue(value, System.fn(value2, value2.Run))
          this.eventSetsByFilterId:AddKeyValue(value, value2)
        else
          this.actionsByFilterId:AddKeyValue(value, action)
        end
      end
    end
    Remove = function (this, action, filterObj)
      local value = ((System.as(filterObj, TypeWrapper_1handle)) or System.throw(System.ArgumentException("Unable to cast event filter to required type " .. System.toString(System.typeof(WCSharpApi.handle)), "filterObj"))).Value
      local extern, value2 = this.eventSetsByFilterId:TryGetValue(value, nil)
      if extern then
        if value2:Remove(action, value) then
          if value2:getCount() == 0 then
            this.actionsByFilterId:RemoveKey(value)
            this.eventSetsByFilterId:RemoveKey(value)
          end
          return true
        end
        return false
      end
      return this.actionsByFilterId:RemoveKey(value)
    end
    Run = function (this)
      local value
      local handle = this.filterFunc()
      local default
      if handle ~= nil then
        local extern
        extern, value = this.actionsByFilterId:TryGetValue(handle, nil)
        if extern then
          default = true
        end
      end
      if default then
        value()
      end
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Events.EventHandlers.IEventSet
        }
      end,
      FilterId = 0,
      getFilterId = getFilterId,
      getCount = getCount,
      Add = Add,
      Remove = Remove,
      Run = Run,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "actionsByFilterId", 0x1, System.Dictionary(out.WCSharp.Api.handle, System.Delegate) },
            { "eventSetsByFilterId", 0x1, System.Dictionary(out.WCSharp.Api.handle, out.WCSharp.Events.EventHandlers.EventSet) },
            { "filterFunc", 0x1, System.Delegate(out.WCSharp.Api.handle) }
          },
          properties = {
            { "Count", 0x206, System.Int32, getCount },
            { "FilterId", 0x206, System.Int32, getFilterId }
          },
          methods = {
            { ".ctor", 0x206, nil, System.Int32, System.Delegate(out.WCSharp.Api.handle) },
            { "Add", 0x206, Add, System.Delegate, System.Object },
            { "Remove", 0x286, Remove, System.Delegate, System.Object, System.Boolean },
            { "Run", 0x6, Run }
          },
          class = { "EventSetHandleFilter", 0x4 }
        }
      end
    }
  end)
  namespace.class("EventSetIntFilter", function (namespace)
    local getFilterId, getCount, Add, Remove, Run, __ctor__
    __ctor__ = function (this, filterId, filterFunc)
      this.FilterId = filterId
      this.filterFunc = filterFunc or System.throw(System.ArgumentNullException("filterFunc"))
      this.actionsByFilterId = DictInt32Delegate()
      this.eventSetsByFilterId = DictInt32EventSet()
    end
    getFilterId = System.property("FilterId", true)
    getCount = function (this)
      return this.actionsByFilterId:getCount()
    end
    Add = function (this, action, filterObj)
      local num = filterObj
      if not (System.is(num, System.Int32)) then
        System.throw(System.ArgumentException("Unable to cast event filter to required type " .. System.toString(System.typeof(System.Int32)), "filterObj"))
      end
      local value2
      local default, value = this.eventSetsByFilterId:TryGetValue(num, nil)
      if default then
        value:Add(action, num)
      else
        local extern
        extern, value2 = this.actionsByFilterId:TryGetValue(num, nil)
        if extern then
          this.actionsByFilterId:RemoveKey(num)
          value = WCSharpEventHandlers.EventSet()
          value:Add(value2, num)
          value:Add(action, num)
          this.actionsByFilterId:AddKeyValue(num, System.fn(value, value.Run))
          this.eventSetsByFilterId:AddKeyValue(num, value)
        else
          this.actionsByFilterId:AddKeyValue(num, action)
        end
      end
    end
    Remove = function (this, action, filterObj)
      local num = filterObj
      if not (System.is(num, System.Int32)) then
        System.throw(System.ArgumentException("Unable to cast event filter to required type " .. System.toString(System.typeof(System.Int32)), "filterObj"))
      end
      local default, value = this.eventSetsByFilterId:TryGetValue(num, nil)
      if default then
        if value:Remove(action, num) then
          if value:getCount() == 0 then
            this.actionsByFilterId:RemoveKey(num)
            this.eventSetsByFilterId:RemoveKey(num)
          end
          return true
        end
        return false
      end
      return this.actionsByFilterId:RemoveKey(num)
    end
    Run = function (this)
      local default, value = this.actionsByFilterId:TryGetValue(this.filterFunc(), nil)
      if default then
        value()
      end
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Events.EventHandlers.IEventSet
        }
      end,
      FilterId = 0,
      getFilterId = getFilterId,
      getCount = getCount,
      Add = Add,
      Remove = Remove,
      Run = Run,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "actionsByFilterId", 0x1, System.Dictionary(System.Int32, System.Delegate) },
            { "eventSetsByFilterId", 0x1, System.Dictionary(System.Int32, out.WCSharp.Events.EventHandlers.EventSet) },
            { "filterFunc", 0x1, System.Delegate(System.Int32) }
          },
          properties = {
            { "Count", 0x206, System.Int32, getCount },
            { "FilterId", 0x206, System.Int32, getFilterId }
          },
          methods = {
            { ".ctor", 0x206, nil, System.Int32, System.Delegate(System.Int32) },
            { "Add", 0x206, Add, System.Delegate, System.Object },
            { "Remove", 0x286, Remove, System.Delegate, System.Object, System.Boolean },
            { "Run", 0x6, Run }
          },
          class = { "EventSetIntFilter", 0x4 }
        }
      end
    }
  end)
  namespace.interface("IEventSet", function ()
    return {
      __metadata__ = function (out)
        return {
          class = { "IEventSet", 0x14 }
        }
      end
    }
  end)
end)
System.namespace("WCSharp.Events.EventHandlers.PlayerUnitEventHandlers", function (namespace)
  namespace.class("AbstractPlayerUnitEventHandler", function (namespace)
    local Run, Register, Register1, Register2, Unregister, Unregister1, Unregister2, TryGetEventSet, 
    AddEventSet, RemoveEvent, __ctor__
    __ctor__ = function (this)
      this.eventSets = ListIEventSet()
      this.trigger = CreateTrigger()
      local func = System.fn(this, Run)
      if WCSharpEvents.PlayerUnitEvents.Debug then
        func = function ()
          System.try(function ()
            Run(this)
          end, function (default)
            local ex = default
            System.Console.WriteLine(ex:getMessage())
            System.Console.WriteLine(ex:getStackTrace())
          end)
          return false
        end
      end
      local condition = Condition(func)
      TriggerAddCondition(this.trigger, condition)
      DisableTrigger(this.trigger)
    end
    Run = function (this)
      this.index = 0
      do
        this.size = #this.eventSets
        while this.index < this.size do
          this.eventSets:get(this.index):Run()
          this.index = this.index + 1
        end
      end
      return false
    end
    Register = function (this, action, filterId)
      local default, eventSet = TryGetEventSet(this, filterId)
      if not default then
        eventSet = AddEventSet(this, WCSharpEventHandlers.EventSet())
      end
      eventSet:Add(action)
    end
    Register1 = function (this, action, filterId, filterFunc, filterValue)
      local default, eventSet = TryGetEventSet(this, filterId)
      if not default then
        eventSet = AddEventSet(this, WCSharpEventHandlers.EventSetIntFilter(filterId, filterFunc))
      end
      eventSet:Add(action, filterValue)
    end
    Register2 = function (this, action, filterId, filterFunc, filterValue)
      local default, eventSet = TryGetEventSet(this, filterId)
      if not default then
        eventSet = AddEventSet(this, WCSharpEventHandlers.EventSetHandleFilter(filterId, filterFunc))
      end
      eventSet:Add(action, TypeWrapper_1handle(filterValue))
    end
    Unregister = function (this, action, filterId)
      local ref, eventSet = TryGetEventSet(this, filterId)
      if ref and eventSet:Remove(action) and eventSet:getCount() == 0 then
        RemoveEvent(this, eventSet)
      end
    end
    Unregister1 = function (this, action, filterId, filterFunc, filterValue)
      local ref, eventSet = TryGetEventSet(this, filterId)
      if ref and eventSet:Remove(action, filterValue) and eventSet:getCount() == 0 then
        RemoveEvent(this, eventSet)
      end
    end
    Unregister2 = function (this, action, filterId, filterFunc, filterValue)
      local ref, eventSet = TryGetEventSet(this, filterId)
      if ref and eventSet:Remove(action, TypeWrapper_1handle(filterValue)) and eventSet:getCount() == 0 then
        RemoveEvent(this, eventSet)
      end
    end
    TryGetEventSet = function (this, filterId, eventSet)
      for i = 0, #this.eventSets - 1 do
        if this.eventSets:get(i):getFilterId() == filterId then
          eventSet = this.eventSets:get(i)
          return true, eventSet
        end
      end
      eventSet = nil
      return false, eventSet
    end
    AddEventSet = function (this, eventSet)
      this.eventSets:Add(eventSet)
      if #this.eventSets == 1 then
        EnableTrigger(this.trigger)
      end
      return eventSet
    end
    RemoveEvent = function (this, eventSet)
      local num = -1
      for i = 0, #this.eventSets - 1 do
        if this.eventSets:get(i) == eventSet then
          num = i
          break
        end
      end
      if num == -1 then
        System.throw(System.Exception("Attempting to remove an event that does not exist."))
      end
      if num < this.size then
        if num <= this.index then
          this.eventSets:RemoveAt(num)
          this.index = this.index - 1
          this.size = this.size - 1
        else
          this.size = this.size - 1
          local num2 = #this.eventSets - 1
          this.eventSets:set(num, this.eventSets:get(this.size))
          this.eventSets:set(this.size, this.eventSets:get(num2))
          this.eventSets:RemoveAt(num2)
        end
      else
        local num3 = #this.eventSets - 1
        this.eventSets:set(num, this.eventSets:get(num3))
        this.eventSets:RemoveAt(num3)
      end
      if #this.eventSets == 0 then
        DisableTrigger(this.trigger)
      end
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Events.EventHandlers.PlayerUnitEventHandlers.IPlayerUnitEventHandler
        }
      end,
      index = 0,
      size = 0,
      Run = Run,
      Register = Register,
      Register1 = Register1,
      Register2 = Register2,
      Unregister = Unregister,
      Unregister1 = Unregister1,
      Unregister2 = Unregister2,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "eventSets", 0x3, System.List(out.WCSharp.Events.EventHandlers.IEventSet) },
            { "index", 0x3, System.Int32 },
            { "size", 0x3, System.Int32 },
            { "trigger", 0x3, out.WCSharp.Api.trigger }
          },
          methods = {
            { ".ctor", 0x6, nil },
            { "AddEventSet", 0x181, AddEventSet, out.WCSharp.Events.EventHandlers.IEventSet, out.WCSharp.Events.EventHandlers.IEventSet },
            { "Register", 0x206, Register, System.Delegate, System.Int32 },
            { "Register", 0x406, Register1, System.Delegate, System.Int32, System.Delegate(System.Int32), System.Int32 },
            { "Register", 0x406, Register2, System.Delegate, System.Int32, System.Delegate(out.WCSharp.Api.handle), out.WCSharp.Api.handle },
            { "RemoveEvent", 0x101, RemoveEvent, out.WCSharp.Events.EventHandlers.IEventSet },
            { "Run", 0x83, Run, System.Boolean },
            { "TryGetEventSet", 0x281, TryGetEventSet, System.Int32, out.WCSharp.Events.EventHandlers.IEventSet, System.Boolean },
            { "Unregister", 0x206, Unregister, System.Delegate, System.Int32 },
            { "Unregister", 0x406, Unregister1, System.Delegate, System.Int32, System.Delegate(System.Int32), System.Int32 },
            { "Unregister", 0x406, Unregister2, System.Delegate, System.Int32, System.Delegate(out.WCSharp.Api.handle), out.WCSharp.Api.handle }
          },
          class = { "AbstractPlayerUnitEventHandler", 0x14 }
        }
      end
    }
  end)
  namespace.interface("IPlayerUnitEventHandler", function ()
    return {
      __metadata__ = function (out)
        return {
          class = { "IPlayerUnitEventHandler", 0x14 }
        }
      end
    }
  end)
  namespace.class("PlayerUnitEventHandler", function (namespace)
    local __ctor__
    __ctor__ = function (this, event)
      System.base(this).__ctor__(this)
      local bJMaxPlayerSlots = GetBJMaxPlayerSlots()
      for i = 0, bJMaxPlayerSlots - 1 do
        TriggerRegisterPlayerUnitEvent(this.trigger, Player(i), event, nil)
      end
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Events.EventHandlers.PlayerUnitEventHandlers.AbstractPlayerUnitEventHandler
        }
      end,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          methods = {
            { ".ctor", 0x106, nil, out.WCSharp.Api.playerunitevent }
          },
          class = { "PlayerUnitEventHandler", 0x4 }
        }
      end
    }
  end)
  namespace.class("UnitCreatedHandler", function (namespace)
    local __ctor__
    __ctor__ = function (this)
      System.base(this).__ctor__(this)
      TriggerRegisterEnterRegion(this.trigger, WCSharpSharedData.Rectangle.WorldBounds:getRegion(), nil)
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Events.EventHandlers.PlayerUnitEventHandlers.AbstractPlayerUnitEventHandler
        }
      end,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          methods = {
            { ".ctor", 0x6, nil }
          },
          class = { "UnitCreatedHandler", 0x4 }
        }
      end
    }
  end)
end)

end
do
local System = System
local Linq = System.Linq.Enumerable
local ArrayType = System.Array(System.Type)
local ListObject = System.List(System.Object)
local ArrayObject = System.Array(System.Object)
local DictStringObject = System.Dictionary(System.String, System.Object)
local ListDictStringObject = System.List(DictStringObject)
local WCSharpJson
local WCSharpShared
System.import(function (out)
  WCSharpJson = WCSharp.Json
  WCSharpShared = WCSharp.Shared
end)
System.namespace("WCSharp.Json", function (namespace)
  namespace.class("Deserialization", function (namespace)
    local DeserializeLuaTable, DeserializeClass, DeserializeArray, DeserializeCollection, DeserializeDictionary, DeserializeLuaString, DeserializeLuaValue
    DeserializeLuaTable = function (table, type)
      if type:getIsArray() then
        return DeserializeArray(type, table)
      end
      local obj = System.Activator.CreateInstance(type)
      local list = Linq.ToList((Linq.Select(Linq.Where(type:GetInterfaces(), function (x)
        return x:getIsGenericType()
      end), function (x)
        return x:GetGenericTypeDefinition()
      end, System.Type)))
      if list:Contains(System.typeof(System.IDictionary_2)) then
        return DeserializeDictionary(type, obj, table)
      end
      if list:Contains(System.typeof(System.ICollection_1)) then
        return DeserializeCollection(type, obj, table)
      end
      local properties = type:GetProperties()
      for _, propertyInfo in System.each(properties) do
        local default, value = table:TryGetValue(propertyInfo:getName())
        if default then
          local obj2 = DeserializeLuaValue(value, propertyInfo:getPropertyType())
          if obj2 ~= nil then
            propertyInfo:SetValue(obj, obj2)
          end
        end
      end
      return obj
    end
    DeserializeClass = function (value, type)
      if value == nil then
        return nil
      end
      local method = type:GetMethod("Deserialize")
      if method ~= nil and System.is(value, System.String) then
        return method:Invoke(nil, ArrayObject(1, { value }))
      end
      return DeserializeLuaTable(WCSharpShared.LuaTable(value), type)
    end
    DeserializeArray = function (type, table)
      local elementType = type:GetElementType()
      local array = System.Array.CreateInstance(elementType, table:getCount())
      local num = 0
      for _, item in System.each(table) do
        local default = num
        num = default + 1
        array:SetValue(DeserializeLuaValue(item[2], elementType), default)
      end
      return array
    end
    DeserializeCollection = function (type, instance, table)
      local type2 = type:GetGenericArguments():get(0)
      local method = type:GetMethod("Add", ArrayType(1, { type2 }))
      if method == nil then
        return nil
      end
      for _, value in System.each(table:getValues()) do
        method:Invoke(instance, ArrayObject(1, {
          DeserializeLuaValue(value, type2)
        }))
      end
      return instance
    end
    DeserializeDictionary = function (type, instance, table)
      local genericArguments = type:GetGenericArguments()
      local method = type:GetMethod("Add", genericArguments)
      if method == nil then
        return nil
      end
      for _, item in System.each(table) do
        local obj = DeserializeLuaString(item[1], genericArguments:get(0))
        local obj2 = DeserializeLuaValue(item[2], genericArguments:get(1))
        method:Invoke(instance, ArrayObject(2, { obj, obj2 }))
      end
      return instance
    end
    DeserializeLuaString = function (stringObject, type)
      local text = stringObject
      if System.is(text, System.String) then
        if type == System.typeof(System.Boolean) then
          local default, result = System.Boolean.TryParse(text, nil)
          if default then
            return result
          end
        elseif type == System.typeof(System.Byte) then
          local default, result2 = System.Byte.TryParse(text, nil)
          if default then
            return result2
          end
        elseif type == System.typeof(System.SByte) then
          local default, result3 = System.SByte.TryParse(text, nil)
          if default then
            return result3
          end
        elseif type == System.typeof(System.Char) then
          local default, result4 = System.Char.TryParse(text, nil)
          if default then
            return result4
          end
        elseif type == System.typeof(System.Double) then
          local default, result5 = System.Double.TryParse(text, nil)
          if default then
            return result5
          end
        elseif type == System.typeof(System.Double) then
          local default, result6 = System.Double.TryParse(text, nil)
          if default then
            return result6
          end
        elseif type == System.typeof(System.Single) then
          local default, result7 = System.Single.TryParse(text, nil)
          if default then
            return result7
          end
        elseif type == System.typeof(System.Int32) then
          local default, result8 = System.Int32.TryParse(text, nil)
          if default then
            return result8
          end
        elseif type == System.typeof(System.UInt32) then
          local default, result9 = System.UInt32.TryParse(text, nil)
          if default then
            return result9
          end
        elseif type == System.typeof(System.Int64) then
          local default, result10 = System.Int64.TryParse(text, nil)
          if default then
            return result10
          end
        elseif type == System.typeof(System.UInt64) then
          local default, result11 = System.UInt64.TryParse(text, nil)
          if default then
            return result11
          end
        elseif type == System.typeof(System.Int16) then
          local default, result12 = System.Int16.TryParse(text, nil)
          if default then
            return result12
          end
        else
          if not (type == System.typeof(System.UInt16)) then
            if type == System.typeof(System.String) then
              return text
            end
            System.throw(System.Exception("Cannot deserialize dictionaries with non-primitive key types."))
          end
          local default, result13 = System.UInt16.TryParse(text, nil)
          if default then
            return result13
          end
        end
      end
      System.throw(System.Exception("Serialized dictionary keys should always be strings."))
    end
    DeserializeLuaValue = function (value, type)
      if not type:getIsClass() or type == System.typeof(System.String) then
        return value
      end
      return DeserializeClass(value, type)
    end
    return {
      DeserializeLuaTable = DeserializeLuaTable,
      __metadata__ = function (out)
        return {
          methods = {
            { "DeserializeArray", 0x289, DeserializeArray, System.Type, out.WCSharp.Shared.LuaTable, System.Object },
            { "DeserializeClass", 0x289, DeserializeClass, System.Object, System.Type, System.Object },
            { "DeserializeCollection", 0x389, DeserializeCollection, System.Type, System.Object, out.WCSharp.Shared.LuaTable, System.Object },
            { "DeserializeDictionary", 0x389, DeserializeDictionary, System.Type, System.Object, out.WCSharp.Shared.LuaTable, System.Object },
            { "DeserializeLuaString", 0x289, DeserializeLuaString, System.Object, System.Type, System.Object },
            { "DeserializeLuaTable", 0x28E, DeserializeLuaTable, out.WCSharp.Shared.LuaTable, System.Type, System.Object },
            { "DeserializeLuaValue", 0x289, DeserializeLuaValue, System.Object, System.Type, System.Object }
          },
          class = { "Deserialization", 0x3C }
        }
      end
    }
  end)
  -- <summary>
  -- Entry point for converting classes to and from JSON files.
  -- </summary>
  namespace.class("JsonConvert", function (namespace)
    local parser, TryDeserialize, TryDeserialize1, Deserialize, Deserialize1, Serialize, static
    static = function (this)
      parser = load("\r\n--\r\n-- json.lua\r\n--\r\n-- Copyright (c) 2020 rxi\r\n--\r\n-- Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n-- this software and associated documentation files (the \"Software\"), to deal in\r\n-- the Software without restriction, including without limitation the rights to\r\n-- use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n-- of the Software, and to permit persons to whom the Software is furnished to do\r\n-- so, subject to the following conditions:\r\n--\r\n-- The above copyright notice and this permission notice shall be included in all\r\n-- copies or substantial portions of the Software.\r\n--\r\n-- THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n-- SOFTWARE.\r\n--\r\n\r\nlocal json = { _version = \"0.1.2\" }\r\n\r\n-------------------------------------------------------------------------------\r\n-- Encode\r\n-------------------------------------------------------------------------------\r\n\r\nlocal encode\r\n\r\nlocal escape_char_map = {\r\n  [ \"\\\\\" ] = \"\\\\\",\r\n  [ \"\\\"\" ] = \"\\\"\",\r\n  [ \"\\b\" ] = \"b\",\r\n  [ \"\\f\" ] = \"f\",\r\n  [ \"\\n\" ] = \"n\",\r\n  [ \"\\r\" ] = \"r\",\r\n  [ \"\\t\" ] = \"t\",\r\n}\r\n\r\nlocal escape_char_map_inv = { [ \"/\" ] = \"/\" }\r\nfor k, v in pairs(escape_char_map) do\r\n  escape_char_map_inv[v] = k\r\nend\r\n\r\n\r\nlocal function escape_char(c)\r\n  return \"\\\\\" .. (escape_char_map[c] or string.format(\"u%04x\", c:byte()))\r\nend\r\n\r\n\r\nlocal function encode_nil(val)\r\n  return \"null\"\r\nend\r\n\r\n\r\nlocal function encode_table(val, stack)\r\n  local res = {}\r\n  stack = stack or {}\r\n\r\n  -- Circular reference?\r\n  if stack[val] then error(\"circular reference\") end\r\n\r\n  stack[val] = true\r\n\r\n  if rawget(val, 1) ~= nil or next(val) == nil then\r\n    -- Treat as array -- check keys are valid and it is not sparse\r\n    local n = 0\r\n    for k in pairs(val) do\r\n      if type(k) ~= \"number\" then\r\n        error(\"invalid table: mixed or invalid key types\")\r\n      end\r\n      n = n + 1\r\n    end\r\n    if n ~= #val then\r\n      error(\"invalid table: sparse array\")\r\n    end\r\n    -- Encode\r\n    for i, v in ipairs(val) do\r\n      table.insert(res, encode(v, stack))\r\n    end\r\n    stack[val] = nil\r\n    return \"[\" .. table.concat(res, \",\") .. \"]\"\r\n\r\n  else\r\n    -- Treat as an object\r\n    for k, v in pairs(val) do\r\n      if type(k) ~= \"string\" then\r\n        error(\"invalid table: mixed or invalid key types\")\r\n      end\r\n      table.insert(res, encode(k, stack) .. \":\" .. encode(v, stack))\r\n    end\r\n    stack[val] = nil\r\n    return \"{\" .. table.concat(res, \",\") .. \"}\"\r\n  end\r\nend\r\n\r\n\r\nlocal function encode_string(val)\r\n  return '\"' .. val:gsub('[%z\\1-\\31\\\\\"]', escape_char) .. '\"'\r\nend\r\n\r\n\r\nlocal function encode_number(val)\r\n  -- Check for NaN, -inf and inf\r\n  if val ~= val or val <= -math.huge or val >= math.huge then\r\n    error(\"unexpected number value '\" .. tostring(val) .. \"'\")\r\n  end\r\n  return tostring(val)\r\nend\r\n\r\n\r\nlocal type_func_map = {\r\n  [ \"nil\"     ] = encode_nil,\r\n  [ \"table\"   ] = encode_table,\r\n  [ \"string\"  ] = encode_string,\r\n  [ \"number\"  ] = encode_number,\r\n  [ \"boolean\" ] = tostring,\r\n}\r\n\r\n\r\nencode = function(val, stack)\r\n  local t = type(val)\r\n  local f = type_func_map[t]\r\n  if f then\r\n    return f(val, stack)\r\n  end\r\n  error(\"unexpected type '\" .. t .. \"'\")\r\nend\r\n\r\n\r\nfunction json.encode(val)\r\n  return ( encode(val) )\r\nend\r\n\r\n\r\n-------------------------------------------------------------------------------\r\n-- Decode\r\n-------------------------------------------------------------------------------\r\n\r\nlocal parse\r\n\r\nlocal function create_set(...)\r\n  local res = {}\r\n  for i = 1, select(\"#\", ...) do\r\n    res[ select(i, ...) ] = true\r\n  end\r\n  return res\r\nend\r\n\r\nlocal space_chars   = create_set(\" \", \"\\t\", \"\\r\", \"\\n\")\r\nlocal delim_chars   = create_set(\" \", \"\\t\", \"\\r\", \"\\n\", \"]\", \"}\", \",\")\r\nlocal escape_chars  = create_set(\"\\\\\", \"/\", '\"', \"b\", \"f\", \"n\", \"r\", \"t\", \"u\")\r\nlocal literals      = create_set(\"true\", \"false\", \"null\")\r\n\r\nlocal literal_map = {\r\n  [ \"true\"  ] = true,\r\n  [ \"false\" ] = false,\r\n  [ \"null\"  ] = nil,\r\n}\r\n\r\n\r\nlocal function next_char(str, idx, set, negate)\r\n  for i = idx, #str do\r\n    if set[str:sub(i, i)] ~= negate then\r\n      return i\r\n    end\r\n  end\r\n  return #str + 1\r\nend\r\n\r\n\r\nlocal function decode_error(str, idx, msg)\r\n  local line_count = 1\r\n  local col_count = 1\r\n  for i = 1, idx - 1 do\r\n    col_count = col_count + 1\r\n    if str:sub(i, i) == \"\\n\" then\r\n      line_count = line_count + 1\r\n      col_count = 1\r\n    end\r\n  end\r\n  error( string.format(\"%s at line %d col %d\", msg, line_count, col_count) )\r\nend\r\n\r\n\r\nlocal function codepoint_to_utf8(n)\r\n  -- http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=iws-appendixa\r\n  local f = math.floor\r\n  if n <= 0x7f then\r\n    return string.char(n)\r\n  elseif n <= 0x7ff then\r\n    return string.char(f(n / 64) + 192, n % 64 + 128)\r\n  elseif n <= 0xffff then\r\n    return string.char(f(n / 4096) + 224, f(n % 4096 / 64) + 128, n % 64 + 128)\r\n  elseif n <= 0x10ffff then\r\n    return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128,\r\n                       f(n % 4096 / 64) + 128, n % 64 + 128)\r\n  end\r\n  error( string.format(\"invalid unicode codepoint '%x'\", n) )\r\nend\r\n\r\n\r\nlocal function parse_unicode_escape(s)\r\n  local n1 = tonumber( s:sub(1, 4),  16 )\r\n  local n2 = tonumber( s:sub(7, 10), 16 )\r\n   -- Surrogate pair?\r\n  if n2 then\r\n    return codepoint_to_utf8((n1 - 0xd800) * 0x400 + (n2 - 0xdc00) + 0x10000)\r\n  else\r\n    return codepoint_to_utf8(n1)\r\n  end\r\nend\r\n\r\n\r\nlocal function parse_string(str, i)\r\n  local res = \"\"\r\n  local j = i + 1\r\n  local k = j\r\n\r\n  while j <= #str do\r\n    local x = str:byte(j)\r\n\r\n    if x < 32 then\r\n      decode_error(str, j, \"control character in string\")\r\n\r\n    elseif x == 92 then -- `\\`: Escape\r\n      res = res .. str:sub(k, j - 1)\r\n      j = j + 1\r\n      local c = str:sub(j, j)\r\n      if c == \"u\" then\r\n        local hex = str:match(\"^[dD][89aAbB]%x%x\\\\u%x%x%x%x\", j + 1)\r\n                 or str:match(\"^%x%x%x%x\", j + 1)\r\n                 or decode_error(str, j - 1, \"invalid unicode escape in string\")\r\n        res = res .. parse_unicode_escape(hex)\r\n        j = j + #hex\r\n      else\r\n        if not escape_chars[c] then\r\n          decode_error(str, j - 1, \"invalid escape char '\" .. c .. \"' in string\")\r\n        end\r\n        res = res .. escape_char_map_inv[c]\r\n      end\r\n      k = j + 1\r\n\r\n    elseif x == 34 then -- `\"`: End of string\r\n      res = res .. str:sub(k, j - 1)\r\n      return res, j + 1\r\n    end\r\n\r\n    j = j + 1\r\n  end\r\n\r\n  decode_error(str, i, \"expected closing quote for string\")\r\nend\r\n\r\n\r\nlocal function parse_number(str, i)\r\n  local x = next_char(str, i, delim_chars)\r\n  local s = str:sub(i, x - 1)\r\n  local n = tonumber(s)\r\n  if not n then\r\n    decode_error(str, i, \"invalid number '\" .. s .. \"'\")\r\n  end\r\n  return n, x\r\nend\r\n\r\n\r\nlocal function parse_literal(str, i)\r\n  local x = next_char(str, i, delim_chars)\r\n  local word = str:sub(i, x - 1)\r\n  if not literals[word] then\r\n    decode_error(str, i, \"invalid literal '\" .. word .. \"'\")\r\n  end\r\n  return literal_map[word], x\r\nend\r\n\r\n\r\nlocal function parse_array(str, i)\r\n  local res = {}\r\n  local n = 1\r\n  i = i + 1\r\n  while 1 do\r\n    local x\r\n    i = next_char(str, i, space_chars, true)\r\n    -- Empty / end of array?\r\n    if str:sub(i, i) == \"]\" then\r\n      i = i + 1\r\n      break\r\n    end\r\n    -- Read token\r\n    x, i = parse(str, i)\r\n    res[n] = x\r\n    n = n + 1\r\n    -- Next token\r\n    i = next_char(str, i, space_chars, true)\r\n    local chr = str:sub(i, i)\r\n    i = i + 1\r\n    if chr == \"]\" then break end\r\n    if chr ~= \",\" then decode_error(str, i, \"expected ']' or ','\") end\r\n  end\r\n  return res, i\r\nend\r\n\r\n\r\nlocal function parse_object(str, i)\r\n  local res = {}\r\n  i = i + 1\r\n  while 1 do\r\n    local key, val\r\n    i = next_char(str, i, space_chars, true)\r\n    -- Empty / end of object?\r\n    if str:sub(i, i) == \"}\" then\r\n      i = i + 1\r\n      break\r\n    end\r\n    -- Read key\r\n    if str:sub(i, i) ~= '\"' then\r\n      decode_error(str, i, \"expected string for key\")\r\n    end\r\n    key, i = parse(str, i)\r\n    -- Read ':' delimiter\r\n    i = next_char(str, i, space_chars, true)\r\n    if str:sub(i, i) ~= \":\" then\r\n      decode_error(str, i, \"expected ':' after key\")\r\n    end\r\n    i = next_char(str, i + 1, space_chars, true)\r\n    -- Read value\r\n    val, i = parse(str, i)\r\n    -- Set\r\n    res[key] = val\r\n    -- Next token\r\n    i = next_char(str, i, space_chars, true)\r\n    local chr = str:sub(i, i)\r\n    i = i + 1\r\n    if chr == \"}\" then break end\r\n    if chr ~= \",\" then decode_error(str, i, \"expected '}' or ','\") end\r\n  end\r\n  return res, i\r\nend\r\n\r\n\r\nlocal char_func_map = {\r\n  [ '\"' ] = parse_string,\r\n  [ \"0\" ] = parse_number,\r\n  [ \"1\" ] = parse_number,\r\n  [ \"2\" ] = parse_number,\r\n  [ \"3\" ] = parse_number,\r\n  [ \"4\" ] = parse_number,\r\n  [ \"5\" ] = parse_number,\r\n  [ \"6\" ] = parse_number,\r\n  [ \"7\" ] = parse_number,\r\n  [ \"8\" ] = parse_number,\r\n  [ \"9\" ] = parse_number,\r\n  [ \"-\" ] = parse_number,\r\n  [ \"t\" ] = parse_literal,\r\n  [ \"f\" ] = parse_literal,\r\n  [ \"n\" ] = parse_literal,\r\n  [ \"[\" ] = parse_array,\r\n  [ \"{\" ] = parse_object,\r\n}\r\n\r\n\r\nparse = function(str, idx)\r\n  local chr = str:sub(idx, idx)\r\n  local f = char_func_map[chr]\r\n  if f then\r\n    return f(str, idx)\r\n  end\r\n  decode_error(str, idx, \"unexpected character '\" .. chr .. \"'\")\r\nend\r\n\r\n\r\nfunction json.decode(str)\r\n  if type(str) ~= \"string\" then\r\n    error(\"expected argument of type string, got \" .. type(str))\r\n  end\r\n  local res, idx = parse(str, next_char(str, 1, space_chars, true))\r\n  idx = next_char(str, idx, space_chars, true)\r\n  if idx <= #str then\r\n    decode_error(str, idx, \"trailing garbage\")\r\n  end\r\n  return res\r\nend\r\n\r\n\r\nreturn json\r\n")()
    end
    -- <summary>
    -- Attempts to convert the given JSON string into the specified generic class.
    -- <para>Please read the documentation for details on what can and cannot be (de)serialized.</para>
    -- </summary>
    TryDeserialize = function (input, data, T)
      local default, data2 = TryDeserialize1(input, System.typeof(T))
      if default then
        data = System.cast(T, data2)
        return true, data
      end
      data = System.default(T)
      return false, data
    end
    -- <summary>
    -- Attempts to convert the given JSON string into the specified generic class.
    -- <para>Please read the documentation for details on what can and cannot be (de)serialized.</para>
    -- </summary>
    TryDeserialize1 = function (input, deserializeType, data)
      local default, extern = System.try(function ()
        data = Deserialize1(input, deserializeType)
        return true, true
      end, function (default)
        data = nil
        return true, false
      end)
      if default then
        return extern, data
      end
    end
    -- <summary>
    -- Converts the given JSON string into the specified generic class.
    -- <para>Please read the documentation for details on what can and cannot be (de)serialized.</para>
    -- </summary>
    Deserialize = function (input, T)
      return System.cast(T, Deserialize1(input, System.typeof(T)))
    end
    -- <summary>
    -- Converts the given JSON string into the specified generic class.
    -- <para>Please read the documentation for details on what can and cannot be (de)serialized.</para>
    -- </summary>
    Deserialize1 = function (input, deserializeType)
      return WCSharpJson.Deserialization.DeserializeLuaTable(WCSharpShared.LuaTable(parser.decode(input)), deserializeType)
    end
    -- <summary>
    -- Converts the given generic class into a JSON string.
    -- <para>Please read the documentation for details on what can and cannot be (de)serialized.</para>
    -- </summary>
    Serialize = function (input, T)
      return parser.encode(WCSharpJson.Serialization.SerializeClass(input, System.typeof(T)))
    end
    return {
      TryDeserialize = TryDeserialize,
      TryDeserialize1 = TryDeserialize1,
      Deserialize = Deserialize,
      Deserialize1 = Deserialize1,
      Serialize = Serialize,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "parser", 0x9, System.Object }
          },
          methods = {
            { "Deserialize", 0x1018E, Deserialize, function (T) return System.String, T end },
            { "Deserialize", 0x28E, Deserialize1, System.String, System.Type, System.Object },
            { "Serialize", 0x1018E, Serialize, function (T) return T, System.String end },
            { "TryDeserialize", 0x1028E, TryDeserialize, function (T) return System.String, T, System.Boolean end },
            { "TryDeserialize", 0x38E, TryDeserialize1, System.String, System.Type, System.Object, System.Boolean }
          },
          class = { "JsonConvert", 0x3E }
        }
      end
    }
  end)
  namespace.class("Serialization", function (namespace)
    local ConvertInputToDictionary, SerializeClass, SerializeArray, SerializeCollection, SerializeHashSet, SerializeDictionary
    ConvertInputToDictionary = function (input, type)
      local dictionary = DictStringObject()
      local properties = type:GetProperties()
      for _, propertyInfo in System.each(properties) do
        local propertyType = propertyInfo:getPropertyType()
        local value = propertyInfo:GetValue(input)
        if not propertyType:getIsClass() then
          dictionary:AddKeyValue(propertyInfo:getName(), value)
        elseif propertyType == System.typeof(System.String) then
          if value ~= nil then
            dictionary:AddKeyValue(propertyInfo:getName(), value)
          end
        elseif value ~= nil then
          dictionary:AddKeyValue(propertyInfo:getName(), SerializeClass(value, propertyType))
        end
      end
      return dictionary
    end
    SerializeClass = function (value, type)
      local method = type:GetMethod("Serialize")
      if method ~= nil then
        return System.cast(System.String, method:Invoke(nil, ArrayObject(1, { value })))
      end
      if type:getIsArray() then
        return SerializeArray(value, type)
      end
      local list = Linq.ToList((Linq.Select(Linq.Where(type:GetInterfaces(), function (x)
        return x:getIsGenericType()
      end), function (x)
        return x:GetGenericTypeDefinition()
      end, System.Type)))
      if list:Contains(System.typeof(System.IDictionary_2)) then
        return SerializeDictionary(value, type)
      end
      if list:Contains(System.typeof(System.ICollection_1)) then
        return SerializeCollection(value, type)
      end
      return ConvertInputToDictionary(value, type)
    end
    SerializeArray = function (value, type)
      local elementType = type:GetElementType()
      if not elementType:getIsClass() or elementType == System.typeof(System.String) then
        return value
      end
      local list = ListDictStringObject()
      for _, item in System.each(System.cast(System.IEnumerable, value)) do
        list:Add(ConvertInputToDictionary(item, elementType))
      end
      return list
    end
    SerializeCollection = function (value, type)
      local type2 = type:GetGenericArguments():get(0)
      if not type2:getIsClass() or type2 == System.typeof(System.String) then
        if type:GetGenericTypeDefinition() == System.typeof(System.HashSet) then
          return SerializeHashSet(value)
        end
        return value
      end
      local list = ListDictStringObject()
      for _, item in System.each(System.cast(System.IEnumerable, value)) do
        list:Add(ConvertInputToDictionary(item, type2))
      end
      return list
    end
    SerializeHashSet = function (value)
      local list = ListObject()
      for _, item in System.each(System.cast(System.IEnumerable, value)) do
        list:Add(item)
      end
      return list
    end
    SerializeDictionary = function (value, type)
      local genericArguments = type:GetGenericArguments()
      if genericArguments:get(0):getIsClass() and genericArguments:get(0) ~= System.typeof(System.String) then
        System.throw(System.ArgumentException("ERROR: Cannot serialize dictionaries with keys that are not primitives, enums or strings."))
      end
      local flag = genericArguments:get(1):getIsClass() and genericArguments:get(1) ~= System.typeof(System.String)
      local dictionary = DictStringObject()
      for _, item in System.each(System.cast(System.IEnumerable, value)) do
        local key = item[1]
        local value2 = item[2]
        local default
        if flag then
          default = ConvertInputToDictionary(value2, genericArguments:get(1))
        else
          default = value2
        end
        local value3 = default
        dictionary:AddKeyValue(System.ObjectToString(key), value3)
      end
      return dictionary
    end
    return {
      ConvertInputToDictionary = ConvertInputToDictionary,
      SerializeClass = SerializeClass,
      __metadata__ = function (out)
        return {
          methods = {
            { "ConvertInputToDictionary", 0x28E, ConvertInputToDictionary, System.Object, System.Type, System.Dictionary(System.String, System.Object) },
            { "SerializeArray", 0x289, SerializeArray, System.Object, System.Type, System.Object },
            { "SerializeClass", 0x28E, SerializeClass, System.Object, System.Type, System.Object },
            { "SerializeCollection", 0x289, SerializeCollection, System.Object, System.Type, System.Object },
            { "SerializeDictionary", 0x289, SerializeDictionary, System.Object, System.Type, System.Object },
            { "SerializeHashSet", 0x189, SerializeHashSet, System.Object, System.Object }
          },
          class = { "Serialization", 0x3C }
        }
      end
    }
  end)
end)

end
do
local System = System
local WCSharpEvents
local WCSharpKnockbacks
local PeriodicTrigger_1Knockback
System.import(function (out)
  WCSharpEvents = WCSharp.Events
  WCSharpKnockbacks = WCSharp.Knockbacks
  PeriodicTrigger_1Knockback = WCSharpEvents.PeriodicTrigger_1(WCSharpKnockbacks.Knockback)
end)
System.namespace("WCSharp.Knockbacks", function (namespace)
  -- <summary>
  -- Represents a single knockback instance. Add to <see cref="T:WCSharp.Knockbacks.KnockbackSystem" /> to activate.
  -- </summary>
  namespace.class("Knockback", function (namespace)
    local getActive, setActive, Action, Merge, class, __ctor1__, __ctor2__, __ctor3__
    __ctor1__ = function (this, target, distance, duration)
      this.Target = target
      this.Speed = distance / duration * (0.03125 --[[1f / 32f]])
      this.SpeedDropoff = this.Speed / duration * (0.03125 --[[1f / 32f]])
    end
    -- <summary>
    -- Knocks the target the given distance towards the given angle (in degrees) over the given duration.
    -- </summary>
    -- <param name="target">The target to perform the knockback on</param>
    -- <param name="distance">The distance in units to knock the target back</param>
    -- <param name="duration">The duration in seconds over which the target should be knocked back</param>
    -- <param name="angle">In degrees.</param>
    __ctor2__ = function (this, target, distance, duration, angle)
      __ctor1__(this, target, distance, duration)
      this.Angle = angle * (0.0174532924 --[[(float)Math.PI / 180f]])
    end
    -- <summary>
    -- Knocks the target the given distance towards the given location over the given duration.
    -- </summary>
    __ctor3__ = function (this, target, distance, duration, targetX, targetY)
      __ctor1__(this, target, distance, duration)
      local unitX = GetUnitX(this.Target)
      local unitY = GetUnitY(this.Target)
      this.Angle = (180 + (57.2957764 * Atan2(unitY - targetY, unitX - targetX)))
    end
    getActive, setActive = System.property("Active")
    -- <summary>
    -- Called by the system. Do not call yourself.
    -- </summary>
    Action = function (this)
      local newX = GetUnitX(this.Target) + this.Speed * Cos(this.Angle)
      local newY = GetUnitY(this.Target) + this.Speed * Sin(this.Angle)
      SetUnitPosition(this.Target, newX, newY)
      this.Speed = this.Speed - this.SpeedDropoff
      if this.Speed <= 0 then
        this.Active = false
        return
      end
      if this.Effect1 ~= nil then
        this.effect1Interval = this.effect1Interval - (0.03125 --[[1f / 32f]])
        if this.effect1Interval <= 0 then
          this.effect1Interval = 1
          DestroyEffect(AddSpecialEffectTarget(this.Effect1, this.Target, this.Effect1AttachmentPoint))
        end
      end
      if this.Effect2 ~= nil then
        this.effect2Interval = this.effect2Interval - (0.03125 --[[1f / 32f]])
        if this.effect2Interval <= 0 then
          this.effect2Interval = 0.125
          DestroyEffect(AddSpecialEffectTarget(this.Effect1, this.Target, this.Effect1AttachmentPoint))
        end
      end
    end
    -- <summary>
    -- Merges the force of the given knockback into this knockback. Typically though, you can also just have both knockbacks active simultaneously and achieve the same effect.
    -- </summary>
    Merge = function (this, knockback)
      local num = this.Speed * Cos(this.Angle) + knockback.Speed * Cos(knockback.Angle)
      local num2 = this.Speed * Sin(this.Angle) + knockback.Speed * Sin(knockback.Angle)
      this.Angle = Atan2(num2, num)
      this.Speed = SquareRoot(num * num + num2 * num2)
    end
    class = {
      base = function (out)
        return {
          out.WCSharp.Events.IPeriodicAction
        }
      end,
      effect1Interval = 0,
      effect2Interval = 0,
      Active = false,
      getActive = getActive,
      setActive = setActive,
      Angle = 0,
      Speed = 0,
      SpeedDropoff = 0,
      Action = Action,
      Merge = Merge,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "effect1Interval", 0x1, System.Single },
            { "effect2Interval", 0x1, System.Single }
          },
          properties = {
            { "Active", 0x106, System.Boolean, getActive, setActive },
            { "Angle", 0x6, System.Single },
            { "Effect1", 0x6, System.String },
            { "Effect1AttachmentPoint", 0x6, System.String },
            { "Effect2", 0x6, System.String },
            { "Effect2AttachmentPoint", 0x6, System.String },
            { "Speed", 0x6, System.Single },
            { "SpeedDropoff", 0x6, System.Single },
            { "Target", 0x6, out.WCSharp.Api.unit }
          },
          methods = {
            { ".ctor", 0x301, __ctor1__, out.WCSharp.Api.unit, System.Single, System.Single },
            { ".ctor", 0x406, __ctor2__, out.WCSharp.Api.unit, System.Single, System.Single, System.Single },
            { ".ctor", 0x506, __ctor3__, out.WCSharp.Api.unit, System.Single, System.Single, System.Single, System.Single },
            { "Action", 0x6, Action },
            { "Merge", 0x106, Merge, class }
          },
          class = { "Knockback", 0x6 }
        }
      end
    }
    return class
  end)
  -- <summary>
  -- Keeps track of all active knockbacks.
  -- </summary>
  namespace.class("KnockbackSystem", function (namespace)
    local periodicTrigger, getKnockbacks, Add, static
    static = function (this)
      periodicTrigger = PeriodicTrigger_1Knockback(0.03125 --[[1f / 32f]])
    end
    getKnockbacks = function ()
      return periodicTrigger:getActions()
    end
    -- <summary>
    -- Adds the given knockback to the system. This will also initialise or alter some values according to the knockbacks' properties.
    -- </summary>
    Add = function (knockback)
      periodicTrigger:Add(knockback)
    end
    return {
      getKnockbacks = getKnockbacks,
      Add = Add,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "periodicTrigger", 0x9, out.WCSharp.Events.PeriodicTrigger_1(out.WCSharp.Knockbacks.Knockback) }
          },
          properties = {
            { "Knockbacks", 0x20E, System.IEnumerable_1(out.WCSharp.Knockbacks.Knockback), getKnockbacks }
          },
          methods = {
            { "Add", 0x10E, Add, out.WCSharp.Knockbacks.Knockback }
          },
          class = { "KnockbackSystem", 0x3E }
        }
      end
    }
  end)
end)

end
do
local System = System
local WCSharpEvents
local WCSharpLightnings
local WCSharpShared
local PeriodicDisposableTrigger_1Lightning
System.import(function (out)
  WCSharpEvents = WCSharp.Events
  WCSharpLightnings = WCSharp.Lightnings
  WCSharpShared = WCSharp.Shared
  PeriodicDisposableTrigger_1Lightning = WCSharpEvents.PeriodicDisposableTrigger_1(WCSharpLightnings.Lightning)
end)
System.namespace("WCSharp.Lightnings", function (namespace)
  -- <summary>
  -- Represents a single lightning instance. Add to <see cref="T:WCSharp.Lightnings.LightningSystem" /> to activate.
  -- </summary>
  namespace.class("Lightning", function (namespace)
    local getActive, setActive, Start, Action, StartFade, Dispose, __ctor1__, __ctor2__, 
    __ctor3__, __ctor4__
    -- <summary>
    -- Creates a new <see cref="T:WCSharp.Lightnings.Lightning" /> instance with the given parameters.
    -- <para>Will automatically set <see cref="P:WCSharp.Lightnings.Lightning.CasterX" />, <see cref="P:WCSharp.Lightnings.Lightning.CasterY" />, <see cref="P:WCSharp.Lightnings.Lightning.TargetX" /> and <see cref="P:WCSharp.Lightnings.Lightning.TargetY" />.</para>
    -- </summary>
    -- <param name="name">The name of the lightning effect. See <see href="https://www.hiveworkshop.com/threads/beginners-guide-to-lightning-effects.220370/" />.</param>
    -- <param name="caster">The source of the lightning. Will automatically update the position when <paramref name="caster" /> moves.</param>
    -- <param name="target">The target of the lightning. Will automatically update the position when <paramref name="target" /> moves.</param>
    __ctor1__ = function (this, name, caster, target)
      this.name = name
      this.casterZ = BlzGetUnitZ(caster) + GetUnitFlyHeight(caster)
      this.targetZ = BlzGetUnitZ(target) + GetUnitFlyHeight(target)
      this.Caster = caster
      this.CasterX = GetUnitX(caster)
      this.CasterY = GetUnitY(caster)
      this.Target = target
      this.TargetX = GetUnitX(target)
      this.TargetY = GetUnitY(target)
    end
    -- <summary>
    -- Creates a new <see cref="T:WCSharp.Lightnings.Lightning" /> instance with the given parameters.
    -- <para>Will automatically set <see cref="P:WCSharp.Lightnings.Lightning.CasterX" /> and <see cref="P:WCSharp.Lightnings.Lightning.CasterY" />.</para>
    -- </summary>
    -- <param name="name">The name of the lightning effect. See <see href="https://www.hiveworkshop.com/threads/beginners-guide-to-lightning-effects.220370/" />.</param>
    -- <param name="caster">The source of the lightning. Will automatically update the position when <paramref name="caster" /> moves.</param>
    -- <param name="targetX"></param>
    -- <param name="targetY"></param>
    __ctor2__ = function (this, name, caster, targetX, targetY)
      this.name = name
      this.casterZ = BlzGetUnitZ(caster) + GetUnitFlyHeight(caster)
      this.targetZ = WCSharpShared.Util.GetZ(targetX, targetY)
      this.Caster = caster
      this.CasterX = GetUnitX(caster)
      this.CasterY = GetUnitY(caster)
      this.TargetX = targetX
      this.TargetY = targetY
    end
    -- <summary>
    -- Creates a new <see cref="T:WCSharp.Lightnings.Lightning" /> instance with the given parameters.
    -- <para>Will automatically set <see cref="P:WCSharp.Lightnings.Lightning.TargetX" /> and <see cref="P:WCSharp.Lightnings.Lightning.TargetY" />.</para>
    -- </summary>
    -- <param name="name">The name of the lightning effect. See <see href="https://www.hiveworkshop.com/threads/beginners-guide-to-lightning-effects.220370/" />.</param>
    -- <param name="casterX"></param>
    -- <param name="casterY"></param>
    -- <param name="target">The target of the lightning. Will automatically update the position when <paramref name="target" /> moves.</param>
    __ctor3__ = function (this, name, casterX, casterY, target)
      this.name = name
      this.casterZ = WCSharpShared.Util.GetZ(casterX, casterY)
      this.targetZ = BlzGetUnitZ(target) + GetUnitFlyHeight(target)
      this.CasterX = casterX
      this.CasterY = casterY
      this.Target = target
      this.TargetX = GetUnitX(target)
      this.TargetY = GetUnitY(target)
    end
    -- <summary>
    -- Creates a new <see cref="T:WCSharp.Lightnings.Lightning" /> instance with the given parameters.
    -- </summary>
    -- <param name="name">The name of the lightning effect. See <see href="https://www.hiveworkshop.com/threads/beginners-guide-to-lightning-effects.220370/" />.</param>
    -- <param name="casterX"></param>
    -- <param name="casterY"></param>
    -- <param name="targetX"></param>
    -- <param name="targetY"></param>
    __ctor4__ = function (this, name, casterX, casterY, targetX, targetY)
      this.name = name
      this.casterZ = WCSharpShared.Util.GetZ(casterX, casterY)
      this.targetZ = WCSharpShared.Util.GetZ(targetX, targetY)
      this.CasterX = casterX
      this.CasterY = casterY
      this.TargetX = targetX
      this.TargetY = targetY
    end
    getActive, setActive = System.property("Active")
    Start = function (this)
      this.lightning = AddLightning(this.name, true, this.CasterX, this.CasterY, this.TargetX, this.TargetY)
      MoveLightningEx(this.lightning, true, this.CasterX, this.CasterY, this.casterZ + this.CasterHeightOffset, this.TargetX, this.TargetY, this.casterZ + this.TargetHeightOffset)
      SetLightningColor(this.lightning, this.Red, this.Green, this.Blue, this.Alpha)
      this.transparencyRate = ((this.FadeDuration > 0) and (this.Alpha / this.FadeDuration * (0.03125 --[[1f / 32f]])) or this.Alpha)
      this.age = 0
    end
    -- <summary>
    -- Called by the system. Do not call yourself.
    -- </summary>
    Action = function (this)
      if this.Caster ~= nil then
        if UnitAlive(this.Caster) then
          this.CasterX = GetUnitX(this.Caster)
          this.CasterY = GetUnitY(this.Caster)
          this.casterZ = BlzGetUnitZ(this.Caster) + GetUnitFlyHeight(this.Caster)
        else
          this.Caster = nil
        end
      end
      if this.Target ~= nil then
        if UnitAlive(this.Target) then
          this.TargetX = GetUnitX(this.Target)
          this.TargetY = GetUnitY(this.Target)
          this.targetZ = BlzGetUnitZ(this.Target) + GetUnitFlyHeight(this.Target)
        else
          this.Target = nil
        end
      end
      MoveLightningEx(this.lightning, true, this.CasterX, this.CasterY, this.casterZ + this.CasterHeightOffset, this.TargetX, this.TargetY, this.targetZ + this.TargetHeightOffset)
      this.age = this.age + (0.03125 --[[1f / 32f]])
      if this.age > this.Duration - this.FadeDuration then
        this.Alpha = this.Alpha - this.transparencyRate
        SetLightningColor(this.lightning, this.Red, this.Green, this.Blue, this.Alpha)
      end
      if this.age >= this.Duration then
        this.Active = false
      end
    end
    -- <summary>
    -- For lightnings that last until cancelled (meaning duration is excessively high), this method can be used to start the fade out process when desired.
    -- </summary>
    StartFade = function (this)
      this.age = this.Duration - this.FadeDuration
    end
    -- <inheritdoc />
    Dispose = function (this)
      DestroyLightning(this.lightning)
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Events.IPeriodicDisposableAction
        }
      end,
      targetZ = 0,
      casterZ = 0,
      age = 0,
      transparencyRate = 0,
      Active = false,
      getActive = getActive,
      setActive = setActive,
      CasterX = 0,
      CasterY = 0,
      CasterHeightOffset = 0,
      TargetX = 0,
      TargetY = 0,
      TargetHeightOffset = 0,
      Red = 1,
      Green = 1,
      Blue = 1,
      Alpha = 1,
      Duration = 0,
      FadeDuration = 0,
      Start = Start,
      Action = Action,
      StartFade = StartFade,
      Dispose = Dispose,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__,
        __ctor4__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "age", 0x1, System.Single },
            { "casterZ", 0x1, System.Single },
            { "lightning", 0x3, out.WCSharp.Api.lightning },
            { "name", 0x1, System.String },
            { "targetZ", 0x1, System.Single },
            { "transparencyRate", 0x1, System.Single }
          },
          properties = {
            { "Active", 0x106, System.Boolean, getActive, setActive },
            { "Alpha", 0x6, System.Single },
            { "Blue", 0x6, System.Single },
            { "Caster", 0x6, out.WCSharp.Api.unit },
            { "CasterHeightOffset", 0x6, System.Single },
            { "CasterX", 0x6, System.Single },
            { "CasterY", 0x6, System.Single },
            { "Duration", 0x6, System.Single },
            { "FadeDuration", 0x6, System.Single },
            { "Green", 0x6, System.Single },
            { "Red", 0x6, System.Single },
            { "Target", 0x6, out.WCSharp.Api.unit },
            { "TargetHeightOffset", 0x6, System.Single },
            { "TargetX", 0x6, System.Single },
            { "TargetY", 0x6, System.Single }
          },
          methods = {
            { ".ctor", 0x306, __ctor1__, System.String, out.WCSharp.Api.unit, out.WCSharp.Api.unit },
            { ".ctor", 0x406, __ctor2__, System.String, out.WCSharp.Api.unit, System.Single, System.Single },
            { ".ctor", 0x406, __ctor3__, System.String, System.Single, System.Single, out.WCSharp.Api.unit },
            { ".ctor", 0x506, __ctor4__, System.String, System.Single, System.Single, System.Single, System.Single },
            { "Action", 0x6, Action },
            { "Dispose", 0x6, Dispose },
            { "Start", 0x4, Start },
            { "StartFade", 0x6, StartFade }
          },
          class = { "Lightning", 0x6 }
        }
      end
    }
  end)
  -- <summary>
  -- Tracks and runs all active <see cref="T:WCSharp.Lightnings.Lightning" /> instances.
  -- </summary>
  namespace.class("LightningSystem", function (namespace)
    local periodicTrigger, getMissiles, Add, static
    static = function (this)
      periodicTrigger = PeriodicDisposableTrigger_1Lightning(0.03125 --[[1f / 32f]])
    end
    getMissiles = function ()
      return periodicTrigger:getActions()
    end
    -- <summary>
    -- Adds the given <paramref name="lightning" /> to the system. This will also initialise or alter some values according to the lightnings' properties.
    -- </summary>
    Add = function (lightning)
      lightning:Start()
      periodicTrigger:Add(lightning)
    end
    return {
      getMissiles = getMissiles,
      Add = Add,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "periodicTrigger", 0x9, out.WCSharp.Events.PeriodicDisposableTrigger_1(out.WCSharp.Lightnings.Lightning) }
          },
          properties = {
            { "Missiles", 0x20E, System.IEnumerable_1(out.WCSharp.Lightnings.Lightning), getMissiles }
          },
          methods = {
            { "Add", 0x10E, Add, out.WCSharp.Lightnings.Lightning }
          },
          class = { "LightningSystem", 0x3E }
        }
      end
    }
  end)
end)

end
do
local System = System
local WCSharpApi = WCSharp.Api
local HashSetunit = System.HashSet(WCSharpApi.unit)
local WCSharpEvents
local WCSharpMissiles
local WCSharpShared
local WCSharpSharedData
local WCSharpSharedExtensions
local PeriodicDisposableTrigger_1Missile
System.import(function (out)
  WCSharpEvents = WCSharp.Events
  WCSharpMissiles = WCSharp.Missiles
  WCSharpShared = WCSharp.Shared
  WCSharpSharedData = WCSharp.Shared.Data
  WCSharpSharedExtensions = WCSharp.Shared.Extensions
  PeriodicDisposableTrigger_1Missile = WCSharpEvents.PeriodicDisposableTrigger_1(WCSharpMissiles.Missile)
end)
System.namespace("WCSharp.Missiles", function (namespace)
  -- <summary>
  -- Basic missile that will go from unit/location A to unit/location B.
  -- <para>The main feature for this missile is that missiles can arc.</para>
  -- </summary>
  namespace.class("BasicMissile", function (namespace)
    local getCasterZ, setCasterZ, getTargetZ, setTargetZ, getMissileZ, setMissileZ, getSpeedPerTick, setSpeedPerTick, 
    getSpeed, setSpeed, getMode, setMode, getIsArcing, setIsArcing, SetFlightMode, Launch, 
    Action, __ctor1__, __ctor2__, __ctor3__, __ctor4__
    -- <summary>
    -- The flight modes of this missile type.
    -- </summary>
    namespace.enum("FlightMode", function ()
      return {
        Default = 0,
        FollowTerrain = 1,
        Direct = 2,
        __metadata__ = function (out)
          return {
            fields = {
              { "Default", 0xE, System.Int32 },
              { "Direct", 0xE, System.Int32 },
              { "FollowTerrain", 0xE, System.Int32 }
            },
            class = { "FlightMode", 0x26 }
          }
        end
      }
    end)
    -- <inheritdoc />
    __ctor1__ = function (this, caster, target)
      System.base(this).__ctor__[3](this, caster, target)
    end
    -- <inheritdoc />
    __ctor2__ = function (this, caster, targetX, targetY)
      System.base(this).__ctor__[4](this, caster, targetX, targetY)
    end
    -- <inheritdoc />
    __ctor3__ = function (this, castingPlayer, casterX, casterY, target)
      System.base(this).__ctor__[5](this, castingPlayer, casterX, casterY, target)
    end
    -- <inheritdoc />
    __ctor4__ = function (this, castingPlayer, casterX, casterY, targetX, targetY)
      System.base(this).__ctor__[6](this, castingPlayer, casterX, casterY, targetX, targetY)
    end
    getCasterZ = function (this)
      if this.mode ~= 1 --[[FlightMode.FollowTerrain]] then
        return this.InternalCasterZ
      end
      return this.InternalCasterZ + WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
    end
    setCasterZ = function (this, value)
      this.InternalCasterZ = ((this.mode == 1 --[[FlightMode.FollowTerrain]]) and (value - WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)) or value)
    end
    getTargetZ = function (this)
      if this.mode ~= 1 --[[FlightMode.FollowTerrain]] then
        return this.InternalTargetZ
      end
      return this.InternalTargetZ + WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
    end
    setTargetZ = function (this, value)
      this.InternalTargetZ = ((this.mode == 1 --[[FlightMode.FollowTerrain]]) and (value - WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)) or value)
    end
    getMissileZ = function (this)
      if this.mode ~= 1 --[[FlightMode.FollowTerrain]] then
        return this.InternalMissileZ
      end
      return this.InternalMissileZ + WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)
    end
    setMissileZ = function (this, value)
      this.InternalMissileZ = ((this.mode == 1 --[[FlightMode.FollowTerrain]]) and (value - WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)) or value)
    end
    getSpeedPerTick = function (this)
      return this.speed
    end
    setSpeedPerTick = function (this, value)
      this.speed = value
    end
    getSpeed = function (this)
      return this.speed / (0.03125 --[[1f / 32f]])
    end
    setSpeed = function (this, value)
      this.speed = value * (0.03125 --[[1f / 32f]])
    end
    getMode = function (this)
      return this.mode
    end
    setMode = function (this, value)
      if this:getActive() then
        SetFlightMode(this, value)
      else
        this.mode = value
      end
    end
    getIsArcing = function (this)
      return this.isArcing
    end
    setIsArcing = function (this, value)
      if not this.isArcing and value then
        this.CasterLaunchZ = 0
        this.CasterX = this.MissileX
        this.CasterY = this.MissileY
        this.InternalCasterZ = this.InternalMissileZ
        this.totalDistanceToTarget = SquareRoot(((this.CasterX - this.TargetX) * (this.CasterX - this.TargetX)) + ((this.CasterY - this.TargetY) * (this.CasterY - this.TargetY)))
      end
      this.isArcing = value
    end
    SetFlightMode = function (this, value)
      if value == 0 --[[FlightMode.Default]] then
        value = ((this.Arc == 0 and not (GetUnitFlyHeight(this.Caster) + this.CasterLaunchZ >= 300)) and 1 --[[FlightMode.FollowTerrain]] or 2 --[[FlightMode.Direct]])
      end
      if this.mode == 2 --[[FlightMode.Direct]] then
        if value == 1 --[[FlightMode.FollowTerrain]] then
          this.InternalCasterZ = this.InternalCasterZ - WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
          this.InternalMissileZ = this.InternalMissileZ - WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)
          this.InternalTargetZ = this.InternalTargetZ - WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
        end
      elseif value == 2 --[[FlightMode.Direct]] then
        this.InternalCasterZ = this.InternalCasterZ + WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
        this.InternalMissileZ = this.InternalMissileZ + WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)
        this.InternalTargetZ = this.InternalTargetZ + WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
      end
      this.mode = value
    end
    -- <inheritdoc />
    Launch = function (this)
      this.InternalCasterZ = this.InternalCasterZ + this.CasterLaunchZ
      this.InternalTargetZ = this.InternalTargetZ + this.TargetImpactZ
      this.InternalMissileZ = this.InternalCasterZ
      this.IntervalLeft = this.Interval
      this.MissileX = this.CasterX
      this.MissileY = this.CasterY
      this.isArcing = this.Arc ~= 0
      this.totalDistanceToTarget = SquareRoot(((this.CasterX - this.TargetX) * (this.CasterX - this.TargetX)) + ((this.CasterY - this.TargetY) * (this.CasterY - this.TargetY)))
      if this.mode == 0 --[[FlightMode.Default]] then
        SetFlightMode(this, 0)
      else
        local flightMode = this.mode
        this.mode = 0 --[[FlightMode.Default]]
        SetFlightMode(this, 0)
        SetFlightMode(this, flightMode)
      end
      if not System.String.IsNullOrEmpty(this.effectString) then
        this.Effect = AddSpecialEffect(this.effectString, this.MissileX, this.MissileY)
        BlzSetSpecialEffectZ(this.Effect, getMissileZ(this))
        if this.effectScale ~= 1 then
          BlzSetSpecialEffectScale(this.Effect, this.effectScale)
        end
      end
    end
    -- <inheritdoc />
    Action = function (this)
      if this.Target ~= nil then
        if UnitAlive(this.Target) then
          this.TargetX = GetUnitX(this.Target)
          this.TargetY = GetUnitY(this.Target)
          this.InternalTargetZ = GetUnitFlyHeight(this.Target) + this.TargetImpactZ
          if this.mode ~= 1 --[[FlightMode.FollowTerrain]] then
            this.InternalTargetZ = this.InternalTargetZ + WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
          end
        else
          this.Target = nil
        end
      end
      local num = SquareRoot(((this.MissileX - this.TargetX) * (this.MissileX - this.TargetX)) + ((this.MissileY - this.TargetY) * (this.MissileY - this.TargetY)))
      if num < this.speed + this.ImpactLeeway then
        this:Impact()
        return
      end
      local missileZ = getMissileZ(this)
      if this.isArcing then
        local num2 = SquareRoot(((this.CasterX - this.TargetX) * (this.CasterX - this.TargetX)) + ((this.CasterY - this.TargetY) * (this.CasterY - this.TargetY)))
        if math.Abs(this.totalDistanceToTarget - num2) > 50 then
          this.isArcing = false
        else
          this.totalDistanceToTarget = num2
          local num3 = SquareRoot(((this.CasterX - this.MissileX) * (this.CasterX - this.MissileX)) + ((this.CasterY - this.MissileY) * (this.CasterY - this.MissileY))) / num2
          this.InternalMissileZ = this.InternalCasterZ + num3 * (this.InternalTargetZ - this.InternalCasterZ) + num2 * this.Arc * Sin(num3 * 3.14159274 --[[(float)Math.PI]])
        end
      else
        this.InternalMissileZ = this.InternalMissileZ + ((this.InternalTargetZ - this.InternalMissileZ) * (this.speed / num))
      end
      this.YawRad = (3.14159274 + Atan2(this.MissileY - this.TargetY, this.MissileX - this.TargetX))
      local num4 = this.speed * Cos(this.YawRad)
      this.MissileX = this.MissileX + num4
      local num5 = this.speed * Sin(this.YawRad)
      this.MissileY = this.MissileY + num5
      if not WCSharpSharedData.Rectangle.WorldBounds:Contains(this.MissileX, this.MissileY) then
        this:ExitWorldBounds()
        return
      end
      if this.Effect ~= nil then
        this.RollRad = this.RollRad + this.SpinVelocityRad
        local missileZ2 = getMissileZ(this)
        this.PitchRad = Atan2(missileZ - missileZ2, SquareRoot(num4 * num4 + num5 * num5))
        BlzSetSpecialEffectPosition(this.Effect, this.MissileX, this.MissileY, missileZ2)
        BlzSetSpecialEffectOrientation(this.Effect, this.YawRad, this.PitchRad, this.RollRad)
      end
      if this.Interval > 0 then
        this:RunInterval()
      end
      if this.collisionRadius > 0 then
        this:RunCollisions()
      end
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Missiles.Missile
        }
      end,
      speed = 0,
      mode = 0,
      isArcing = false,
      totalDistanceToTarget = 0,
      getCasterZ = getCasterZ,
      setCasterZ = setCasterZ,
      getTargetZ = getTargetZ,
      setTargetZ = setTargetZ,
      getMissileZ = getMissileZ,
      setMissileZ = setMissileZ,
      getSpeedPerTick = getSpeedPerTick,
      setSpeedPerTick = setSpeedPerTick,
      getSpeed = getSpeed,
      setSpeed = setSpeed,
      Arc = 0,
      getMode = getMode,
      setMode = setMode,
      getIsArcing = getIsArcing,
      setIsArcing = setIsArcing,
      Launch = Launch,
      Action = Action,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__,
        __ctor4__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "isArcing", 0x1, System.Boolean },
            { "mode", 0x1, System.Int32 },
            { "speed", 0x1, System.Single },
            { "totalDistanceToTarget", 0x1, System.Single }
          },
          properties = {
            { "Arc", 0x6, System.Single },
            { "CasterZ", 0x106, System.Single, getCasterZ, setCasterZ },
            { "IsArcing", 0x106, System.Boolean, getIsArcing, setIsArcing },
            { "MissileZ", 0x106, System.Single, getMissileZ, setMissileZ },
            { "Mode", 0x106, System.Int32, getMode, setMode },
            { "Speed", 0x106, System.Single, getSpeed, setSpeed },
            { "SpeedPerTick", 0x106, System.Single, getSpeedPerTick, setSpeedPerTick },
            { "TargetZ", 0x106, System.Single, getTargetZ, setTargetZ }
          },
          methods = {
            { ".ctor", 0x206, __ctor1__, out.WCSharp.Api.unit, out.WCSharp.Api.unit },
            { ".ctor", 0x306, __ctor2__, out.WCSharp.Api.unit, System.Single, System.Single },
            { ".ctor", 0x406, __ctor3__, out.WCSharp.Api.player, System.Single, System.Single, out.WCSharp.Api.unit },
            { ".ctor", 0x506, __ctor4__, out.WCSharp.Api.player, System.Single, System.Single, System.Single, System.Single },
            { "Action", 0x6, Action },
            { "Launch", 0x6, Launch },
            { "SetFlightMode", 0x101, SetFlightMode, System.Int32 }
          },
          class = { "BasicMissile", 0x16 }
        }
      end
    }
  end)
  -- <summary>
  -- Advanced missile that allows for arcing/curving motions, i.e. a boomerang motion.
  -- <para>If you do not use the <see cref="P:WCSharp.Missiles.CurveMissile.Curve" /> property, you should use <see cref="T:WCSharp.Missiles.BasicMissile" /> instead for greater performance and
  -- identical features.</para>
  -- </summary>
  namespace.class("CurveMissile", function (namespace)
    local getCasterZ, setCasterZ, getTargetZ, setTargetZ, getMissileZ, setMissileZ, getSpeedPerTick, setSpeedPerTick, 
    getSpeed, setSpeed, getCurve, setCurve, getMode, setMode, getIsArcingOrCurving, setIsArcingOrCurving, 
    SetFlightMode, Launch, Action, DirectAction, ArcAction, __ctor1__, __ctor2__, __ctor3__, 
    __ctor4__
    -- <summary>
    -- The flight modes of this missile type.
    -- </summary>
    namespace.enum("FlightMode", function ()
      return {
        Default = 0,
        FollowTerrain = 1,
        Direct = 2,
        __metadata__ = function (out)
          return {
            fields = {
              { "Default", 0xE, System.Int32 },
              { "Direct", 0xE, System.Int32 },
              { "FollowTerrain", 0xE, System.Int32 }
            },
            class = { "FlightMode", 0x26 }
          }
        end
      }
    end)
    -- <inheritdoc />
    __ctor1__ = function (this, caster, target)
      System.base(this).__ctor__[3](this, caster, target)
    end
    -- <inheritdoc />
    __ctor2__ = function (this, caster, targetX, targetY)
      System.base(this).__ctor__[4](this, caster, targetX, targetY)
    end
    -- <inheritdoc />
    __ctor3__ = function (this, castingPlayer, casterX, casterY, target)
      System.base(this).__ctor__[5](this, castingPlayer, casterX, casterY, target)
    end
    -- <inheritdoc />
    __ctor4__ = function (this, castingPlayer, casterX, casterY, targetX, targetY)
      System.base(this).__ctor__[6](this, castingPlayer, casterX, casterY, targetX, targetY)
    end
    getCasterZ = function (this)
      if this.mode ~= 1 --[[FlightMode.FollowTerrain]] then
        return this.InternalCasterZ
      end
      return this.InternalCasterZ + WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
    end
    setCasterZ = function (this, value)
      this.InternalCasterZ = ((this.mode == 1 --[[FlightMode.FollowTerrain]]) and (value - WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)) or value)
    end
    getTargetZ = function (this)
      if this.mode ~= 1 --[[FlightMode.FollowTerrain]] then
        return this.InternalTargetZ
      end
      return this.InternalTargetZ + WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
    end
    setTargetZ = function (this, value)
      this.InternalTargetZ = ((this.mode == 1 --[[FlightMode.FollowTerrain]]) and (value - WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)) or value)
    end
    getMissileZ = function (this)
      if this.mode ~= 1 --[[FlightMode.FollowTerrain]] then
        return this.InternalMissileZ
      end
      return this.InternalMissileZ + WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)
    end
    setMissileZ = function (this, value)
      this.InternalMissileZ = ((this.mode == 1 --[[FlightMode.FollowTerrain]]) and (value - WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)) or value)
    end
    getSpeedPerTick = function (this)
      return this.speed
    end
    setSpeedPerTick = function (this, value)
      this.speed = value
    end
    getSpeed = function (this)
      return this.speed / (0.03125 --[[1f / 32f]])
    end
    setSpeed = function (this, value)
      this.speed = value * (0.03125 --[[1f / 32f]])
    end
    getCurve = function (this)
      return this.CurveRad * (57.2957764 --[[180f / (float)Math.PI]])
    end
    setCurve = function (this, value)
      this.CurveRad = value * (0.0174532924 --[[(float)Math.PI / 180f]])
    end
    getMode = function (this)
      return this.mode
    end
    setMode = function (this, value)
      if this:getActive() then
        SetFlightMode(this, value)
      else
        this.mode = value
      end
    end
    getIsArcingOrCurving = function (this)
      return this.isArcingOrCurving
    end
    setIsArcingOrCurving = function (this, value)
      if not this.isArcingOrCurving and value then
        this.OriginX = this.MissileX
        this.OriginY = this.MissileY
        this.OriginZ = getMissileZ(this)
        this.CasterX = this.OriginX
        this.CasterY = this.OriginY
        this.CasterLaunchZ = 0
        this.InternalCasterZ = this.OriginZ
        this.totalDistanceToTarget = SquareRoot(((this.CasterX - this.TargetX) * (this.CasterX - this.TargetX)) + ((this.CasterY - this.TargetY) * (this.CasterY - this.TargetY)))
      end
      this.isArcingOrCurving = value
    end
    SetFlightMode = function (this, value)
      if value == 0 --[[FlightMode.Default]] then
        value = ((this.Arc == 0 and not (GetUnitFlyHeight(this.Caster) + this.CasterLaunchZ >= 300)) and 1 --[[FlightMode.FollowTerrain]] or 2 --[[FlightMode.Direct]])
      end
      if this.mode == 2 --[[FlightMode.Direct]] then
        if value == 1 --[[FlightMode.FollowTerrain]] then
          this.InternalCasterZ = this.InternalCasterZ - WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
          this.InternalMissileZ = this.InternalMissileZ - WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)
          this.InternalTargetZ = this.InternalTargetZ - WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
        end
      elseif value == 2 --[[FlightMode.Direct]] then
        this.InternalCasterZ = this.InternalCasterZ + WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
        this.InternalMissileZ = this.InternalMissileZ + WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)
        this.InternalTargetZ = this.InternalTargetZ + WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
      end
      this.mode = value
    end
    -- <inheritdoc />
    Launch = function (this)
      this.InternalCasterZ = this.InternalCasterZ + this.CasterLaunchZ
      this.InternalTargetZ = this.InternalTargetZ + this.TargetImpactZ
      this.InternalMissileZ = this.InternalCasterZ
      this.IntervalLeft = this.Interval
      this.MissileX = this.CasterX
      this.MissileY = this.CasterY
      this.OriginX = this.CasterX
      this.OriginY = this.CasterY
      this.OriginZ = this.InternalCasterZ
      this.RollRad = this.CurveRad
      this.isArcingOrCurving = this.Arc ~= 0 or getCurve(this) ~= 0
      this.totalDistanceToTarget = SquareRoot(((this.CasterX - this.TargetX) * (this.CasterX - this.TargetX)) + ((this.CasterY - this.TargetY) * (this.CasterY - this.TargetY)))
      if this.mode == 0 --[[FlightMode.Default]] then
        SetFlightMode(this, 0)
      else
        local flightMode = this.mode
        this.mode = 0 --[[FlightMode.Default]]
        SetFlightMode(this, 0)
        SetFlightMode(this, flightMode)
      end
      if not System.String.IsNullOrEmpty(this.effectString) then
        this.Effect = AddSpecialEffect(this.effectString, this.MissileX, this.MissileY)
        BlzSetSpecialEffectZ(this.Effect, getMissileZ(this))
        if this.effectScale ~= 1 then
          BlzSetSpecialEffectScale(this.Effect, this.effectScale)
        end
      end
    end
    -- <inheritdoc />
    Action = function (this)
      if this.Target ~= nil then
        if UnitAlive(this.Target) then
          this.TargetX = GetUnitX(this.Target)
          this.TargetY = GetUnitY(this.Target)
          this.InternalTargetZ = GetUnitFlyHeight(this.Target) + this.TargetImpactZ
        else
          this.Target = nil
        end
      end
      local default
      if this.isArcingOrCurving then
        default = ArcAction(this)
      else
        default = DirectAction(this)
      end
      if default then
        if this.Interval > 0 then
          this:RunInterval()
        end
        if this.collisionRadius > 0 then
          this:RunCollisions()
        end
      end
    end
    DirectAction = function (this)
      local num = SquareRoot(((this.MissileX - this.TargetX) * (this.MissileX - this.TargetX)) + ((this.MissileY - this.TargetY) * (this.MissileY - this.TargetY)))
      if num < this.speed + this.ImpactLeeway then
        this:Impact()
        return false
      end
      local missileZ = getMissileZ(this)
      this.InternalMissileZ = this.InternalMissileZ + ((this.InternalTargetZ - this.InternalMissileZ) * (this.speed / num))
      this.YawRad = (3.14159274 + Atan2(this.MissileY - this.TargetY, this.MissileX - this.TargetX))
      local num2 = this.speed * Cos(this.YawRad)
      this.MissileX = this.MissileX + num2
      local num3 = this.speed * Sin(this.YawRad)
      this.MissileY = this.MissileY + num3
      if not WCSharpSharedData.Rectangle.WorldBounds:Contains(this.MissileX, this.MissileY) then
        this:ExitWorldBounds()
        return false
      end
      if this.Effect ~= nil then
        this.RollRad = this.RollRad + this.SpinVelocityRad
        local missileZ2 = getMissileZ(this)
        this.PitchRad = Atan2(missileZ - missileZ2, SquareRoot(num2 * num2 + num3 * num3))
        BlzSetSpecialEffectPosition(this.Effect, this.MissileX, this.MissileY, missileZ2)
        BlzSetSpecialEffectOrientation(this.Effect, this.YawRad, this.PitchRad, this.RollRad)
      end
      return true
    end
    ArcAction = function (this)
      if SquareRoot(((this.OriginX - this.TargetX) * (this.OriginX - this.TargetX)) + ((this.OriginY - this.TargetY) * (this.OriginY - this.TargetY))) < this.speed + this.ImpactLeeway then
        this:Impact()
        return false
      end
      local num = SquareRoot(((this.CasterX - this.TargetX) * (this.CasterX - this.TargetX)) + ((this.CasterY - this.TargetY) * (this.CasterY - this.TargetY)))
      if math.Abs(this.totalDistanceToTarget - num) > 50 then
        this.isArcingOrCurving = false
        DirectAction(this)
        return true
      end
      this.totalDistanceToTarget = num
      local num2 = SquareRoot(((this.CasterX - this.OriginX) * (this.CasterX - this.OriginX)) + ((this.CasterY - this.OriginY) * (this.CasterY - this.OriginY)))
      local radians = (3.14159274 + Atan2(this.OriginY - this.TargetY, this.OriginX - this.TargetX))
      local num3 = this.speed * Cos(radians)
      this.OriginX = this.OriginX + num3
      local num4 = this.speed * Sin(radians)
      this.OriginY = this.OriginY + num4
      local originZ = this.OriginZ
      this.OriginZ = this.InternalCasterZ + num2 / num * (this.InternalTargetZ - this.InternalCasterZ)
      local radians2 = Atan2(originZ - this.OriginZ, SquareRoot(num3 * num3 + num4 * num4))
      local missileX = this.MissileX
      local missileY = this.MissileY
      local missileZ = getMissileZ(this)
      local num5 = num * this.Arc * Sin(num2 / num * 3.14159274 --[[(float)Math.PI]])
      local num6 = Cos(radians)
      local num7 = Sin(radians)
      local num8 = Cos(this.CurveRad)
      local num9 = Sin(this.CurveRad)
      local num10 = Sin(radians2) * num8
      this.MissileX = this.OriginX + num5 * (num6 * num10 + num7 * num9)
      this.MissileY = this.OriginY + num5 * (num7 * num10 - num6 * num9)
      this.InternalMissileZ = this.OriginZ + num5 * Cos(radians2) * num8
      if not WCSharpSharedData.Rectangle.WorldBounds:Contains(this.MissileX, this.MissileY) then
        this:ExitWorldBounds()
        return false
      end
      if this.Effect ~= nil then
        num3 = missileX - this.MissileX
        num4 = missileY - this.MissileY
        local missileZ2 = getMissileZ(this)
        this.YawRad = (3.14159274 + Atan2(missileY - this.MissileY, missileX - this.MissileX))
        this.PitchRad = Atan2(missileZ - missileZ2, SquareRoot(num3 * num3 + num4 * num4))
        this.RollRad = this.RollRad + this.SpinVelocityRad
        BlzSetSpecialEffectPosition(this.Effect, this.MissileX, this.MissileY, missileZ2)
        BlzSetSpecialEffectOrientation(this.Effect, this.YawRad, this.PitchRad, this.RollRad)
      end
      return true
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Missiles.Missile
        }
      end,
      speed = 0,
      mode = 0,
      isArcingOrCurving = false,
      totalDistanceToTarget = 0,
      getCasterZ = getCasterZ,
      setCasterZ = setCasterZ,
      getTargetZ = getTargetZ,
      setTargetZ = setTargetZ,
      getMissileZ = getMissileZ,
      setMissileZ = setMissileZ,
      getSpeedPerTick = getSpeedPerTick,
      setSpeedPerTick = setSpeedPerTick,
      getSpeed = getSpeed,
      setSpeed = setSpeed,
      Arc = 0,
      CurveRad = 0,
      getCurve = getCurve,
      setCurve = setCurve,
      OriginX = 0,
      OriginY = 0,
      OriginZ = 0,
      getMode = getMode,
      setMode = setMode,
      getIsArcingOrCurving = getIsArcingOrCurving,
      setIsArcingOrCurving = setIsArcingOrCurving,
      Launch = Launch,
      Action = Action,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__,
        __ctor4__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "isArcingOrCurving", 0x1, System.Boolean },
            { "mode", 0x1, System.Int32 },
            { "speed", 0x1, System.Single },
            { "totalDistanceToTarget", 0x1, System.Single }
          },
          properties = {
            { "Arc", 0x6, System.Single },
            { "CasterZ", 0x106, System.Single, getCasterZ, setCasterZ },
            { "Curve", 0x106, System.Single, getCurve, setCurve },
            { "CurveRad", 0x6, System.Single },
            { "IsArcingOrCurving", 0x106, System.Boolean, getIsArcingOrCurving, setIsArcingOrCurving },
            { "MissileZ", 0x106, System.Single, getMissileZ, setMissileZ },
            { "Mode", 0x106, System.Int32, getMode, setMode },
            { "OriginX", 0x6, System.Single },
            { "OriginY", 0x6, System.Single },
            { "OriginZ", 0x6, System.Single },
            { "Speed", 0x106, System.Single, getSpeed, setSpeed },
            { "SpeedPerTick", 0x106, System.Single, getSpeedPerTick, setSpeedPerTick },
            { "TargetZ", 0x106, System.Single, getTargetZ, setTargetZ }
          },
          methods = {
            { ".ctor", 0x206, __ctor1__, out.WCSharp.Api.unit, out.WCSharp.Api.unit },
            { ".ctor", 0x306, __ctor2__, out.WCSharp.Api.unit, System.Single, System.Single },
            { ".ctor", 0x406, __ctor3__, out.WCSharp.Api.player, System.Single, System.Single, out.WCSharp.Api.unit },
            { ".ctor", 0x506, __ctor4__, out.WCSharp.Api.player, System.Single, System.Single, System.Single, System.Single },
            { "Action", 0x6, Action },
            { "ArcAction", 0x81, ArcAction, System.Boolean },
            { "DirectAction", 0x81, DirectAction, System.Boolean },
            { "Launch", 0x6, Launch },
            { "SetFlightMode", 0x101, SetFlightMode, System.Int32 }
          },
          class = { "CurveMissile", 0x16 }
        }
      end
    }
  end)
  -- <summary>
  -- Homing missile with a fixed speed that will attempt to aim itself at the target, restricted by turn speed.
  -- <para>Note: Does not have any behaviour to avoid endlessly circling the enemy.
  -- I recommend using it with a collision radius or such so that exact collisions aren't required.</para>
  -- </summary>
  namespace.class("HomingMissile", function (namespace)
    local getCasterZ, setCasterZ, getTargetZ, setTargetZ, getMissileZ, setMissileZ, getSpeedPerTick, setSpeedPerTick, 
    getSpeed, setSpeed, getTurnRate, setTurnRate, getTurnPeriod, setTurnPeriod, getMode, setMode, 
    SetFlightMode, Launch, Action, __ctor1__, __ctor2__, __ctor3__, __ctor4__
    -- <summary>
    -- The flight modes of this missile type.
    -- </summary>
    namespace.enum("FlightMode", function ()
      return {
        Default = 0,
        FollowTerrain = 1,
        Direct = 2,
        __metadata__ = function (out)
          return {
            fields = {
              { "Default", 0xE, System.Int32 },
              { "Direct", 0xE, System.Int32 },
              { "FollowTerrain", 0xE, System.Int32 }
            },
            class = { "FlightMode", 0x26 }
          }
        end
      }
    end)
    -- <inheritdoc />
    __ctor1__ = function (this, caster, target)
      System.base(this).__ctor__[3](this, caster, target)
    end
    -- <inheritdoc />
    __ctor2__ = function (this, caster, targetX, targetY)
      System.base(this).__ctor__[4](this, caster, targetX, targetY)
    end
    -- <inheritdoc />
    __ctor3__ = function (this, castingPlayer, casterX, casterY, target)
      System.base(this).__ctor__[5](this, castingPlayer, casterX, casterY, target)
    end
    -- <inheritdoc />
    __ctor4__ = function (this, castingPlayer, casterX, casterY, targetX, targetY)
      System.base(this).__ctor__[6](this, castingPlayer, casterX, casterY, targetX, targetY)
    end
    getCasterZ = function (this)
      if this.mode ~= 1 --[[FlightMode.FollowTerrain]] then
        return this.InternalCasterZ
      end
      return this.InternalCasterZ + WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
    end
    setCasterZ = function (this, value)
      this.InternalCasterZ = ((this.mode == 1 --[[FlightMode.FollowTerrain]]) and (value - WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)) or value)
    end
    getTargetZ = function (this)
      if this.mode ~= 1 --[[FlightMode.FollowTerrain]] then
        return this.InternalTargetZ
      end
      return this.InternalTargetZ + WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
    end
    setTargetZ = function (this, value)
      this.InternalTargetZ = ((this.mode == 1 --[[FlightMode.FollowTerrain]]) and (value - WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)) or value)
    end
    getMissileZ = function (this)
      if this.mode ~= 1 --[[FlightMode.FollowTerrain]] then
        return this.InternalMissileZ
      end
      return this.InternalMissileZ + WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)
    end
    setMissileZ = function (this, value)
      this.InternalMissileZ = ((this.mode == 1 --[[FlightMode.FollowTerrain]]) and (value - WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)) or value)
    end
    getSpeedPerTick = function (this)
      return this.speed
    end
    setSpeedPerTick = function (this, value)
      this.speed = value
    end
    getSpeed = function (this)
      return this.speed / (0.03125 --[[1f / 32f]])
    end
    setSpeed = function (this, value)
      this.speed = value * (0.03125 --[[1f / 32f]])
    end
    getTurnRate = function (this)
      return this.TurnVelocityRad * (57.2957764 --[[180f / (float)Math.PI]]) / (0.03125 --[[1f / 32f]])
    end
    setTurnRate = function (this, value)
      this.TurnVelocityRad = value * (0.0174532924 --[[(float)Math.PI / 180f]]) * (0.03125 --[[1f / 32f]])
    end
    getTurnPeriod = function (this)
      if this.TurnVelocityRad ~= 0 then
        return 0.196349546 --[[(float)Math.PI / 16f]] / this.TurnVelocityRad
      end
      return 0
    end
    setTurnPeriod = function (this, value)
      this.TurnVelocityRad = ((value == 0) and 0 or (0.196349546 --[[(float)Math.PI / 16f]] / value))
    end
    getMode = function (this)
      return this.mode
    end
    setMode = function (this, value)
      if this:getActive() then
        SetFlightMode(this, value)
      else
        this.mode = value
      end
    end
    SetFlightMode = function (this, value)
      if value == 0 --[[FlightMode.Default]] then
        value = 1 --[[FlightMode.FollowTerrain]]
      end
      if this.mode == 2 --[[FlightMode.Direct]] then
        if value == 1 --[[FlightMode.FollowTerrain]] then
          this.InternalCasterZ = this.InternalCasterZ - WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
          this.InternalMissileZ = this.InternalMissileZ - WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)
          this.InternalTargetZ = this.InternalTargetZ - WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
        end
      elseif value == 2 --[[FlightMode.Direct]] then
        this.InternalCasterZ = this.InternalCasterZ + WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
        this.InternalMissileZ = this.InternalMissileZ + WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)
        this.InternalTargetZ = this.InternalTargetZ + WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
      end
      this.mode = value
    end
    -- <inheritdoc />
    Launch = function (this)
      this.InternalCasterZ = this.InternalCasterZ + this.CasterLaunchZ
      this.InternalTargetZ = this.InternalTargetZ + this.TargetImpactZ
      this.InternalMissileZ = this.InternalCasterZ
      this.IntervalLeft = this.Interval
      this.MissileX = this.CasterX
      this.MissileY = this.CasterY
      if this.mode == 0 --[[FlightMode.Default]] then
        SetFlightMode(this, 0)
      else
        local flightMode = this.mode
        this.mode = 0 --[[FlightMode.Default]]
        SetFlightMode(this, 0)
        SetFlightMode(this, flightMode)
      end
      if (this.InitialAngle ~= nil) then
        this.YawRad = System.Nullable.Value(this.InitialAngle) * (0.0174532924 --[[(float)Math.PI / 180f]])
        if this.YawRad < 0 then
          this.YawRad = this.YawRad + (6.28318548 --[[(float)Math.PI * 2f]])
        elseif this.YawRad > 6.28318548 --[[(float)Math.PI * 2f]] then
          this.YawRad = this.YawRad - (6.28318548 --[[(float)Math.PI * 2f]])
        end
      else
        this.YawRad = (3.14159274 + Atan2(this.CasterY - this.TargetY, this.CasterX - this.TargetX))
      end
      if not System.String.IsNullOrEmpty(this.effectString) then
        this.Effect = AddSpecialEffect(this.effectString, this.MissileX, this.MissileY)
        BlzSetSpecialEffectZ(this.Effect, getMissileZ(this))
        if this.effectScale ~= 1 then
          BlzSetSpecialEffectScale(this.Effect, this.effectScale)
        end
      end
    end
    -- <inheritdoc />
    Action = function (this)
      if this.Target ~= nil then
        if UnitAlive(this.Target) then
          this.TargetX = GetUnitX(this.Target)
          this.TargetY = GetUnitY(this.Target)
          this.InternalTargetZ = GetUnitFlyHeight(this.Target) + this.TargetImpactZ
        else
          this.Target = nil
        end
      end
      if SquareRoot(((this.MissileX - this.TargetX) * (this.MissileX - this.TargetX)) + ((this.MissileY - this.TargetY) * (this.MissileY - this.TargetY))) < this.speed + this.ImpactLeeway then
        this:Impact()
        return
      end
      local missileZ = getMissileZ(this)
      local num = (3.14159274 + Atan2(this.MissileY - this.TargetY, this.MissileX - this.TargetX))
      if math.Abs(num - this.YawRad) < this.TurnVelocityRad then
        this.YawRad = num
      elseif (this.YawRad < num and num < this.YawRad + 3.14159274 --[[(float)Math.PI]]) or num < this.YawRad - 3.14159274 --[[(float)Math.PI]] then
        this.YawRad = this.YawRad + this.TurnVelocityRad
      else
        this.YawRad = this.YawRad - this.TurnVelocityRad
      end
      if this.YawRad < 0 then
        this.YawRad = this.YawRad + (6.28318548 --[[(float)Math.PI * 2f]])
      elseif this.YawRad > 6.28318548 --[[(float)Math.PI * 2f]] then
        this.YawRad = this.YawRad - (6.28318548 --[[(float)Math.PI * 2f]])
      end
      local num2 = this.speed * Cos(this.YawRad)
      this.MissileX = this.MissileX + num2
      local num3 = this.speed * Sin(this.YawRad)
      this.MissileY = this.MissileY + num3
      this.InternalMissileZ = this.InternalMissileZ + ((this.InternalTargetZ - this.InternalMissileZ) * (this.speed / SquareRoot(((this.MissileX - this.TargetX) * (this.MissileX - this.TargetX)) + ((this.MissileY - this.TargetY) * (this.MissileY - this.TargetY)))))
      if not WCSharpSharedData.Rectangle.WorldBounds:Contains(this.MissileX, this.MissileY) then
        this:ExitWorldBounds()
        return
      end
      if this.Effect ~= nil then
        this.RollRad = this.RollRad + this.SpinVelocityRad
        local missileZ2 = getMissileZ(this)
        this.PitchRad = Atan2(missileZ - missileZ2, SquareRoot(num2 * num2 + num3 * num3))
        BlzSetSpecialEffectPosition(this.Effect, this.MissileX, this.MissileY, missileZ2)
        BlzSetSpecialEffectOrientation(this.Effect, this.YawRad, this.PitchRad, this.RollRad)
      end
      if this.Interval > 0 then
        this:RunInterval()
      end
      if this.collisionRadius > 0 then
        this:RunCollisions()
      end
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Missiles.Missile
        }
      end,
      speed = 0,
      mode = 0,
      getCasterZ = getCasterZ,
      setCasterZ = setCasterZ,
      getTargetZ = getTargetZ,
      setTargetZ = setTargetZ,
      getMissileZ = getMissileZ,
      setMissileZ = setMissileZ,
      getSpeedPerTick = getSpeedPerTick,
      setSpeedPerTick = setSpeedPerTick,
      getSpeed = getSpeed,
      setSpeed = setSpeed,
      TurnVelocityRad = 0,
      getTurnRate = getTurnRate,
      setTurnRate = setTurnRate,
      getTurnPeriod = getTurnPeriod,
      setTurnPeriod = setTurnPeriod,
      getMode = getMode,
      setMode = setMode,
      Launch = Launch,
      Action = Action,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__,
        __ctor4__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "mode", 0x1, System.Int32 },
            { "speed", 0x1, System.Single }
          },
          properties = {
            { "CasterZ", 0x106, System.Single, getCasterZ, setCasterZ },
            { "InitialAngle", 0x6, System.Nullable(System.Single) },
            { "MissileZ", 0x106, System.Single, getMissileZ, setMissileZ },
            { "Mode", 0x106, System.Int32, getMode, setMode },
            { "Speed", 0x106, System.Single, getSpeed, setSpeed },
            { "SpeedPerTick", 0x106, System.Single, getSpeedPerTick, setSpeedPerTick },
            { "TargetZ", 0x106, System.Single, getTargetZ, setTargetZ },
            { "TurnPeriod", 0x106, System.Single, getTurnPeriod, setTurnPeriod },
            { "TurnRate", 0x106, System.Single, getTurnRate, setTurnRate },
            { "TurnVelocityRad", 0x6, System.Single }
          },
          methods = {
            { ".ctor", 0x206, __ctor1__, out.WCSharp.Api.unit, out.WCSharp.Api.unit },
            { ".ctor", 0x306, __ctor2__, out.WCSharp.Api.unit, System.Single, System.Single },
            { ".ctor", 0x406, __ctor3__, out.WCSharp.Api.player, System.Single, System.Single, out.WCSharp.Api.unit },
            { ".ctor", 0x506, __ctor4__, out.WCSharp.Api.player, System.Single, System.Single, System.Single, System.Single },
            { "Action", 0x6, Action },
            { "Launch", 0x6, Launch },
            { "SetFlightMode", 0x101, SetFlightMode, System.Int32 }
          },
          class = { "HomingMissile", 0x16 }
        }
      end
    }
  end)
  -- <summary>
  -- Fundamental missile class that provides the properties and methods that are shared by (virtually) all missiles.
  -- <para>Unless you wish to define a new movement pattern for missiles, you should use one of the derived classes instead.</para>
  -- </summary>
  namespace.class("Missile", function (namespace)
    local group, getActive, setActive, getCasterZ, setCasterZ, getTargetZ, setTargetZ, getMissileZ, 
    setMissileZ, getCollisionRadius, setCollisionRadius, getSpinPeriod, setSpinPeriod, getYaw, setYaw, getPitch, 
    setPitch, getRoll, setRoll, getCurrentAngle, setCurrentAngle, getEffectString, setEffectString, getEffectScale, 
    setEffectScale, ExitWorldBounds, RunInterval, RunCollisions, Impact, OnCollision, OnDispose, OnImpact, 
    OnPeriodic, Dispose, static, __ctor1__, __ctor2__, __ctor3__, __ctor4__, __ctor5__, 
    __ctor6__
    static = function (this)
      group = CreateGroup()
    end
    __ctor1__ = function (this, caster)
      this.Caster = caster
      this.CastingPlayer = GetOwningPlayer(caster)
      this.CasterX = GetUnitX(caster)
      this.CasterY = GetUnitY(caster)
      this.InternalCasterZ = GetUnitFlyHeight(caster)
    end
    __ctor2__ = function (this, castingPlayer, casterX, casterY)
      this.CastingPlayer = castingPlayer
      this.CasterX = casterX
      this.CasterY = casterY
    end
    -- <summary>
    -- Creates a new missile instance with the given parameters.
    -- <para>Will automatically set <see cref="P:WCSharp.Missiles.Missile.CastingPlayer" />, <see cref="P:WCSharp.Missiles.Missile.CasterX" />, <see cref="P:WCSharp.Missiles.Missile.CasterY" />,
    -- <see cref="P:WCSharp.Missiles.Missile.TargetPlayer" />, <see cref="P:WCSharp.Missiles.Missile.TargetX" /> and <see cref="P:WCSharp.Missiles.Missile.TargetY" />.</para>
    -- </summary>
    __ctor3__ = function (this, caster, target)
      __ctor1__(this, caster)
      this.Target = target
      this.TargetPlayer = GetOwningPlayer(target)
      this.TargetX = GetUnitX(target)
      this.TargetY = GetUnitY(target)
      this.InternalTargetZ = GetUnitFlyHeight(target)
    end
    -- <summary>
    -- Creates a new missile instance with the given parameters.
    -- <para>Will automatically set <see cref="P:WCSharp.Missiles.Missile.CastingPlayer" />, <see cref="P:WCSharp.Missiles.Missile.CasterX" /> and <see cref="P:WCSharp.Missiles.Missile.CasterY" />.</para>
    -- </summary>
    __ctor4__ = function (this, caster, targetX, targetY)
      __ctor1__(this, caster)
      this.TargetX = targetX
      this.TargetY = targetY
    end
    -- <summary>
    -- Creates a new missile instance with the given parameters.
    -- <para>Will automatically set <see cref="P:WCSharp.Missiles.Missile.TargetPlayer" />, <see cref="P:WCSharp.Missiles.Missile.TargetX" /> and <see cref="P:WCSharp.Missiles.Missile.TargetY" />.</para>
    -- </summary>
    __ctor5__ = function (this, castingPlayer, casterX, casterY, target)
      __ctor2__(this, castingPlayer, casterX, casterY)
      this.Target = target
      this.TargetPlayer = GetOwningPlayer(target)
      this.TargetX = GetUnitX(target)
      this.TargetY = GetUnitY(target)
      this.InternalTargetZ = GetUnitFlyHeight(target)
    end
    -- <summary>
    -- Creates a new missile instance with the given parameters.
    -- </summary>
    __ctor6__ = function (this, castingPlayer, casterX, casterY, targetX, targetY)
      __ctor2__(this, castingPlayer, casterX, casterY)
      this.TargetX = targetX
      this.TargetY = targetY
    end
    getActive, setActive = System.property("Active")
    getCasterZ = function (this)
      return this.InternalCasterZ + WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
    end
    setCasterZ = function (this, value)
      this.InternalCasterZ = value - WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
    end
    getTargetZ = function (this)
      return this.InternalTargetZ + WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
    end
    setTargetZ = function (this, value)
      this.InternalTargetZ = value - WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
    end
    getMissileZ = function (this)
      return this.InternalMissileZ + WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)
    end
    setMissileZ = function (this, value)
      this.InternalMissileZ = value - WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)
    end
    getCollisionRadius = function (this)
      return this.collisionRadius
    end
    setCollisionRadius = function (this, value)
      this.collisionRadius = math.Max(0, value)
      if this.collisionRadius > 0 and this.TargetsHit == nil then
        this.TargetsHit = HashSetunit()
      end
    end
    getSpinPeriod = function (this)
      if this.SpinVelocityRad ~= 0 then
        return 0.196349546 --[[(float)Math.PI / 16f]] / this.SpinVelocityRad
      end
      return 0
    end
    setSpinPeriod = function (this, value)
      this.SpinVelocityRad = ((value == 0) and 0 or (0.196349546 --[[(float)Math.PI / 16f]] / value))
    end
    getYaw = function (this)
      return this.YawRad * (57.2957764 --[[180f / (float)Math.PI]])
    end
    setYaw = function (this, value)
      this.YawRad = value * (0.0174532924 --[[(float)Math.PI / 180f]])
    end
    getPitch = function (this)
      return this.PitchRad * (57.2957764 --[[180f / (float)Math.PI]])
    end
    setPitch = function (this, value)
      this.PitchRad = value * (0.0174532924 --[[(float)Math.PI / 180f]])
    end
    getRoll = function (this)
      return this.RollRad * (57.2957764 --[[180f / (float)Math.PI]])
    end
    setRoll = function (this, value)
      this.RollRad = value * (0.0174532924 --[[(float)Math.PI / 180f]])
    end
    getCurrentAngle = function (this)
      return this.YawRad * (57.2957764 --[[180f / (float)Math.PI]])
    end
    setCurrentAngle = function (this, value)
      this.YawRad = value * (0.0174532924 --[[(float)Math.PI / 180f]])
    end
    getEffectString = function (this)
      return this.effectString
    end
    setEffectString = function (this, value)
      if not (this.effectString ~= value) then
        return
      end
      if this.Active then
        if this.Effect ~= nil then
          DestroyEffect(this.Effect)
        end
        if not System.String.IsNullOrEmpty(value) then
          this.Effect = AddSpecialEffect(value, this.MissileX, this.MissileY)
          BlzSetSpecialEffectZ(this.Effect, this:getMissileZ())
          BlzSetSpecialEffectOrientation(this.Effect, this.YawRad, this.PitchRad, this.RollRad)
          if this.effectScale ~= 1 then
            BlzSetSpecialEffectScale(this.Effect, this.effectScale)
          end
        end
      end
      this.effectString = value
    end
    getEffectScale = function (this)
      if this.Effect ~= nil then
        return BlzGetSpecialEffectScale(this.Effect)
      end
      return this.effectScale
    end
    setEffectScale = function (this, value)
      if this.Effect ~= nil then
        BlzSetSpecialEffectScale(this.Effect, value)
      end
      this.effectScale = value
    end
    -- <summary>
    -- Should be called when the missile would exit world bounds.
    -- </summary>
    ExitWorldBounds = function (this)
      if this.Effect ~= nil then
        this.MissileX = BlzGetLocalSpecialEffectX(this.Effect)
        this.MissileY = BlzGetLocalSpecialEffectY(this.Effect)
        this:setMissileZ(BlzGetLocalSpecialEffectZ(this.Effect))
      end
      if this.Interval > 0 then
        RunInterval(this)
      end
      if this.collisionRadius > 0 then
        RunCollisions(this)
      end
      this.Active = false
      this:OnImpact()
    end
    -- <summary>
    -- Runs the Interval related code. Do not call if <see cref="P:WCSharp.Missiles.Missile.Interval" /> is 0 (will cause an infinite loop!).
    -- </summary>
    RunInterval = function (this)
      this.IntervalLeft = this.IntervalLeft - (0.03125 --[[1f / 32f]])
      while this.IntervalLeft <= 0 do
        this.IntervalLeft = this.IntervalLeft + this.Interval
        this:OnPeriodic()
      end
    end
    -- <summary>
    -- Runs the Collision related code. Do not call if <see cref="P:WCSharp.Missiles.Missile.CollisionRadius" /> is 0.
    -- </summary>
    RunCollisions = function (this)
      GroupEnumUnitsInRange(group, this.MissileX, this.MissileY, this.collisionRadius, nil)
      for _, item in System.each(WCSharpSharedExtensions.GroupExtensions.ToList(group)) do
        if this.TargetsHit:Add(item) then
          this:OnCollision(item)
        end
      end
    end
    -- <summary>
    -- Sets the missile position to that of the target and runs the interval, collision and impact code.
    -- </summary>
    Impact = function (this)
      this.MissileX = this.TargetX
      this.MissileY = this.TargetY
      this.InternalMissileZ = this.InternalTargetZ
      BlzSetSpecialEffectPosition(this.Effect, this.MissileX, this.MissileY, this:getMissileZ())
      BlzSetSpecialEffectPitch(this.Effect, 0)
      if this.Interval > 0 then
        RunInterval(this)
      end
      if this.collisionRadius > 0 then
        RunCollisions(this)
      end
      this.Active = false
      this:OnImpact()
    end
    -- <summary>
    -- <para>Override this method if your missile has an effect that should trigger when colliding with another unit.</para>
    -- <para>For this to be active, <see cref="P:WCSharp.Missiles.Missile.CollisionRadius" /> must be greater than 0.</para>
    -- <para>Note that there is no filter on this collision. This is called whenever it collides with anything not in <see cref="P:WCSharp.Missiles.Missile.TargetsHit" />.</para>
    -- <para>Before this method is called, the <paramref name="unit" /> is added to <see cref="P:WCSharp.Missiles.Missile.TargetsHit" />.</para>
    -- </summary>
    OnCollision = function (this, unit)
    end
    -- <summary>
    -- Override this method if your missile has an effect that should trigger when it is destroyed for any reason.
    -- </summary>
    OnDispose = function (this)
    end
    -- <summary>
    -- Override this method if your missile has an impact effect.
    -- <para><see cref="P:WCSharp.Missiles.Missile.Active" /> is automatically set to false prior to calling this method. If you do not want the missile to end, you need to set <see cref="P:WCSharp.Missiles.Missile.Active" /> back to true.</para>
    -- </summary>
    OnImpact = function (this)
    end
    -- <summary>
    -- <para>Override this method if your missile has a periodic effect.</para>
    -- <para>For this to be active, <see cref="P:WCSharp.Missiles.Missile.Interval" /> must be greater than 0.</para>
    -- </summary>
    OnPeriodic = function (this)
    end
    -- <inheritdoc />
    Dispose = function (this)
      this:OnDispose()
      if this.Effect ~= nil then
        DestroyEffect(this.Effect)
      end
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Events.IPeriodicDisposableAction
        }
      end,
      collisionRadius = 0,
      effectScale = 1,
      Active = false,
      getActive = getActive,
      setActive = setActive,
      CasterX = 0,
      CasterY = 0,
      getCasterZ = getCasterZ,
      setCasterZ = setCasterZ,
      CasterLaunchZ = 0,
      TargetX = 0,
      TargetY = 0,
      getTargetZ = getTargetZ,
      setTargetZ = setTargetZ,
      TargetImpactZ = 0,
      MissileX = 0,
      MissileY = 0,
      getMissileZ = getMissileZ,
      setMissileZ = setMissileZ,
      ImpactLeeway = 0,
      getCollisionRadius = getCollisionRadius,
      setCollisionRadius = setCollisionRadius,
      Interval = 0,
      IntervalLeft = 0,
      SpinVelocityRad = 0,
      getSpinPeriod = getSpinPeriod,
      setSpinPeriod = setSpinPeriod,
      YawRad = 0,
      getYaw = getYaw,
      setYaw = setYaw,
      PitchRad = 0,
      getPitch = getPitch,
      setPitch = setPitch,
      RollRad = 0,
      getRoll = getRoll,
      setRoll = setRoll,
      getCurrentAngle = getCurrentAngle,
      setCurrentAngle = setCurrentAngle,
      getEffectString = getEffectString,
      setEffectString = setEffectString,
      getEffectScale = getEffectScale,
      setEffectScale = setEffectScale,
      InternalMissileZ = 0,
      InternalCasterZ = 0,
      InternalTargetZ = 0,
      ExitWorldBounds = ExitWorldBounds,
      RunInterval = RunInterval,
      RunCollisions = RunCollisions,
      Impact = Impact,
      OnCollision = OnCollision,
      OnDispose = OnDispose,
      OnImpact = OnImpact,
      OnPeriodic = OnPeriodic,
      Dispose = Dispose,
      static = static,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__,
        __ctor4__,
        __ctor5__,
        __ctor6__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "collisionRadius", 0x2, System.Single },
            { "effectScale", 0x2, System.Single },
            { "effectString", 0x2, System.String },
            { "group", 0x9, out.WCSharp.Api.group }
          },
          properties = {
            { "Active", 0x106, System.Boolean, getActive, setActive },
            { "Caster", 0x6, out.WCSharp.Api.unit },
            { "CasterLaunchZ", 0x6, System.Single },
            { "CasterX", 0x6, System.Single },
            { "CasterY", 0x6, System.Single },
            { "CasterZ", 0x106, System.Single, getCasterZ, setCasterZ },
            { "CastingPlayer", 0x6, out.WCSharp.Api.player },
            { "CollisionRadius", 0x106, System.Single, getCollisionRadius, setCollisionRadius },
            { "CurrentAngle", 0x106, System.Single, getCurrentAngle, setCurrentAngle },
            { "Effect", 0x6, out.WCSharp.Api.effect },
            { "EffectScale", 0x106, System.Single, getEffectScale, setEffectScale },
            { "EffectString", 0x106, System.String, getEffectString, setEffectString },
            { "ImpactLeeway", 0x6, System.Single },
            { "InternalCasterZ", 0x6, System.Single },
            { "InternalMissileZ", 0x6, System.Single },
            { "InternalTargetZ", 0x6, System.Single },
            { "Interval", 0x6, System.Single },
            { "IntervalLeft", 0x6, System.Single },
            { "MissileX", 0x6, System.Single },
            { "MissileY", 0x6, System.Single },
            { "MissileZ", 0x106, System.Single, getMissileZ, setMissileZ },
            { "Pitch", 0x106, System.Single, getPitch, setPitch },
            { "PitchRad", 0x6, System.Single },
            { "Roll", 0x106, System.Single, getRoll, setRoll },
            { "RollRad", 0x6, System.Single },
            { "SpinPeriod", 0x106, System.Single, getSpinPeriod, setSpinPeriod },
            { "SpinVelocityRad", 0x6, System.Single },
            { "Target", 0x6, out.WCSharp.Api.unit },
            { "TargetImpactZ", 0x6, System.Single },
            { "TargetPlayer", 0x6, out.WCSharp.Api.player },
            { "TargetX", 0x6, System.Single },
            { "TargetY", 0x6, System.Single },
            { "TargetZ", 0x106, System.Single, getTargetZ, setTargetZ },
            { "TargetsHit", 0x6, System.HashSet(out.WCSharp.Api.unit) },
            { "Yaw", 0x106, System.Single, getYaw, setYaw },
            { "YawRad", 0x6, System.Single }
          },
          methods = {
            { ".ctor", 0x101, __ctor1__, out.WCSharp.Api.unit },
            { ".ctor", 0x301, __ctor2__, out.WCSharp.Api.player, System.Single, System.Single },
            { ".ctor", 0x206, __ctor3__, out.WCSharp.Api.unit, out.WCSharp.Api.unit },
            { ".ctor", 0x306, __ctor4__, out.WCSharp.Api.unit, System.Single, System.Single },
            { ".ctor", 0x406, __ctor5__, out.WCSharp.Api.player, System.Single, System.Single, out.WCSharp.Api.unit },
            { ".ctor", 0x506, __ctor6__, out.WCSharp.Api.player, System.Single, System.Single, System.Single, System.Single },
            { "Dispose", 0x6, Dispose },
            { "ExitWorldBounds", 0x3, ExitWorldBounds },
            { "Impact", 0x3, Impact },
            { "OnCollision", 0x106, OnCollision, out.WCSharp.Api.unit },
            { "OnDispose", 0x6, OnDispose },
            { "OnImpact", 0x6, OnImpact },
            { "OnPeriodic", 0x6, OnPeriodic },
            { "RunCollisions", 0x3, RunCollisions },
            { "RunInterval", 0x3, RunInterval }
          },
          class = { "Missile", 0x16 }
        }
      end
    }
  end)
  -- <summary>
  -- Tracks and runs all active <see cref="T:WCSharp.Missiles.Missile" /> instances.
  -- </summary>
  namespace.class("MissileSystem", function (namespace)
    local periodicTrigger, getMissiles, Add, RegisterForOwnershipChanges, OnUnitTypeChangesOwner, static
    static = function (this)
      periodicTrigger = PeriodicDisposableTrigger_1Missile(0.03125 --[[1f / 32f]])
    end
    getMissiles = function ()
      return periodicTrigger:getActions()
    end
    -- <summary>
    -- Adds the given <paramref name="missile" /> to the system.
    -- </summary>
    Add = function (missile)
      missile:Launch()
      periodicTrigger:Add(missile)
      missile:Action()
    end
    -- <summary>
    -- By default, <see cref="P:WCSharp.Missiles.Missile.CastingPlayer" /> and <see cref="P:WCSharp.Missiles.Missile.TargetPlayer" /> are not updated when a unit changes owner.
    -- <para>This adds an event to pass over all missiles and update <see cref="P:WCSharp.Missiles.Missile.CastingPlayer" /> and <see cref="P:WCSharp.Missiles.Missile.TargetPlayer" /> on ownership changes.</para>
    -- <para>This will ignore ownership changes of unit type 'xxxx' (WCSharp's dummy unit type).</para>
    -- </summary>
    RegisterForOwnershipChanges = function ()
      WCSharpEvents.PlayerUnitEvents.Register14(809 --[[UnitTypeEvent.ChangesOwner]], OnUnitTypeChangesOwner)
    end
    OnUnitTypeChangesOwner = function ()
      local triggerUnit = GetTriggerUnit()
      if GetUnitTypeId(triggerUnit) == 2021161080 then
        return
      end
      for _, action in System.each(periodicTrigger:getActions()) do
        if action.Caster == triggerUnit then
          action.CastingPlayer = GetOwningPlayer(triggerUnit)
        end
        if action.Target == triggerUnit then
          action.TargetPlayer = GetOwningPlayer(triggerUnit)
        end
      end
    end
    return {
      getMissiles = getMissiles,
      Add = Add,
      RegisterForOwnershipChanges = RegisterForOwnershipChanges,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "periodicTrigger", 0x9, out.WCSharp.Events.PeriodicDisposableTrigger_1(out.WCSharp.Missiles.Missile) }
          },
          properties = {
            { "Missiles", 0x20E, System.IEnumerable_1(out.WCSharp.Missiles.Missile), getMissiles }
          },
          methods = {
            { "Add", 0x10E, Add, out.WCSharp.Missiles.Missile },
            { "OnUnitTypeChangesOwner", 0x9, OnUnitTypeChangesOwner },
            { "RegisterForOwnershipChanges", 0xE, RegisterForOwnershipChanges }
          },
          class = { "MissileSystem", 0x3E }
        }
      end
    }
  end)
  -- <summary>
  -- Homing-type missile that is based on momentum. Every tick, it will accelerate itself towards the target, up to a maximum speed.
  -- <para>Note that the actual acceleration when adjusting its angle towards the target can be significantly less than specified.</para>
  -- <para>It is recommended to use at least a little bit of <see cref="P:WCSharp.Missiles.Missile.ImpactLeeway" /> when using this missile.</para>
  -- </summary>
  namespace.class("MomentumMissile", function (namespace)
    local getCasterZ, setCasterZ, getTargetZ, setTargetZ, getMissileZ, setMissileZ, getSpeedPerTick, setSpeedPerTick, 
    getSpeed, setSpeed, getAcceleration, setAcceleration, getMaximumSpeed, setMaximumSpeed, getMode, setMode, 
    SetFlightMode, Launch, Action, __ctor1__, __ctor2__, __ctor3__, __ctor4__
    -- <summary>
    -- The flight modes of this missile type.
    -- </summary>
    namespace.enum("FlightMode", function ()
      return {
        Default = 0,
        FollowTerrain = 1,
        Direct = 2,
        __metadata__ = function (out)
          return {
            fields = {
              { "Default", 0xE, System.Int32 },
              { "Direct", 0xE, System.Int32 },
              { "FollowTerrain", 0xE, System.Int32 }
            },
            class = { "FlightMode", 0x26 }
          }
        end
      }
    end)
    -- <inheritdoc />
    __ctor1__ = function (this, caster, target)
      System.base(this).__ctor__[3](this, caster, target)
    end
    -- <inheritdoc />
    __ctor2__ = function (this, caster, targetX, targetY)
      System.base(this).__ctor__[4](this, caster, targetX, targetY)
    end
    -- <inheritdoc />
    __ctor3__ = function (this, castingPlayer, casterX, casterY, target)
      System.base(this).__ctor__[5](this, castingPlayer, casterX, casterY, target)
    end
    -- <inheritdoc />
    __ctor4__ = function (this, castingPlayer, casterX, casterY, targetX, targetY)
      System.base(this).__ctor__[6](this, castingPlayer, casterX, casterY, targetX, targetY)
    end
    getCasterZ = function (this)
      if this.mode ~= 1 --[[FlightMode.FollowTerrain]] then
        return this.InternalCasterZ
      end
      return this.InternalCasterZ + WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
    end
    setCasterZ = function (this, value)
      this.InternalCasterZ = ((this.mode == 1 --[[FlightMode.FollowTerrain]]) and (value - WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)) or value)
    end
    getTargetZ = function (this)
      if this.mode ~= 1 --[[FlightMode.FollowTerrain]] then
        return this.InternalTargetZ
      end
      return this.InternalTargetZ + WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
    end
    setTargetZ = function (this, value)
      this.InternalTargetZ = ((this.mode == 1 --[[FlightMode.FollowTerrain]]) and (value - WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)) or value)
    end
    getMissileZ = function (this)
      if this.mode ~= 1 --[[FlightMode.FollowTerrain]] then
        return this.InternalMissileZ
      end
      return this.InternalMissileZ + WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)
    end
    setMissileZ = function (this, value)
      this.InternalMissileZ = ((this.mode == 1 --[[FlightMode.FollowTerrain]]) and (value - WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)) or value)
    end
    getSpeedPerTick = function (this)
      return this.speed
    end
    setSpeedPerTick = function (this, value)
      this.speed = value
    end
    getSpeed = function (this)
      return this.speed / (0.03125 --[[1f / 32f]])
    end
    setSpeed = function (this, value)
      this.speed = value * (0.03125 --[[1f / 32f]])
    end
    getAcceleration = function (this)
      return this.AccelerationPerTick / (0.03125 --[[1f / 32f]])
    end
    setAcceleration = function (this, value)
      this.AccelerationPerTick = value * (0.03125 --[[1f / 32f]])
    end
    getMaximumSpeed = function (this)
      return this.MaximumSpeedPerTick / (0.03125 --[[1f / 32f]])
    end
    setMaximumSpeed = function (this, value)
      this.MaximumSpeedPerTick = value * (0.03125 --[[1f / 32f]])
    end
    getMode = function (this)
      return this.mode
    end
    setMode = function (this, value)
      if this:getActive() then
        SetFlightMode(this, value)
      else
        this.mode = value
      end
    end
    SetFlightMode = function (this, value)
      if value == 0 --[[FlightMode.Default]] then
        value = 1 --[[FlightMode.FollowTerrain]]
      end
      if this.mode == 2 --[[FlightMode.Direct]] then
        if value == 1 --[[FlightMode.FollowTerrain]] then
          this.InternalCasterZ = this.InternalCasterZ - WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
          this.InternalMissileZ = this.InternalMissileZ - WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)
          this.InternalTargetZ = this.InternalTargetZ - WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
        end
      elseif value == 2 --[[FlightMode.Direct]] then
        this.InternalCasterZ = this.InternalCasterZ + WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
        this.InternalMissileZ = this.InternalMissileZ + WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)
        this.InternalTargetZ = this.InternalTargetZ + WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
      end
      this.mode = value
    end
    -- <inheritdoc />
    Launch = function (this)
      this.InternalCasterZ = this.InternalCasterZ + this.CasterLaunchZ
      this.InternalTargetZ = this.InternalTargetZ + this.TargetImpactZ
      this.InternalMissileZ = this.InternalCasterZ
      this.IntervalLeft = this.Interval
      this.MissileX = this.CasterX
      this.MissileY = this.CasterY
      if this.mode == 0 --[[FlightMode.Default]] then
        SetFlightMode(this, 0)
      else
        local flightMode = this.mode
        this.mode = 0 --[[FlightMode.Default]]
        SetFlightMode(this, 0)
        SetFlightMode(this, flightMode)
      end
      if (this.InitialAngle ~= nil) then
        this.YawRad = System.Nullable.Value(this.InitialAngle) * (0.0174532924 --[[(float)Math.PI / 180f]])
      else
        this.YawRad = (3.14159274 + Atan2(this.CasterY - this.TargetY, this.CasterX - this.TargetX))
      end
      if not System.String.IsNullOrEmpty(this.effectString) then
        this.Effect = AddSpecialEffect(this.effectString, this.MissileX, this.MissileY)
        BlzSetSpecialEffectZ(this.Effect, getMissileZ(this))
        if this.effectScale ~= 1 then
          BlzSetSpecialEffectScale(this.Effect, this.effectScale)
        end
      end
    end
    -- <inheritdoc />
    Action = function (this)
      if this.Target ~= nil then
        if UnitAlive(this.Target) then
          this.TargetX = GetUnitX(this.Target)
          this.TargetY = GetUnitY(this.Target)
          this.InternalTargetZ = GetUnitFlyHeight(this.Target) + this.TargetImpactZ
        else
          this.Target = nil
        end
      end
      if SquareRoot(((this.MissileX - this.TargetX) * (this.MissileX - this.TargetX)) + ((this.MissileY - this.TargetY) * (this.MissileY - this.TargetY))) < this.speed + this.ImpactLeeway then
        this:Impact()
        return
      end
      local missileZ = getMissileZ(this)
      local num = (3.14159274 + Atan2(this.MissileY - this.TargetY, this.MissileX - this.TargetX))
      local radians = (((this.YawRad < num and num < this.YawRad + 3.14159274 --[[(float)Math.PI]]) or num < this.YawRad - 3.14159274 --[[(float)Math.PI]]) and math.Min(this.YawRad + 3.14159274 --[[(float)Math.PI]], num + 0.785398185 --[[(float)Math.PI / 4f]]) or math.Max(this.YawRad - 3.14159274 --[[(float)Math.PI]], num - 0.785398185 --[[(float)Math.PI / 4f]]))
      local num2 = this.speed * Cos(this.YawRad) + this.AccelerationPerTick * Cos(radians)
      this.MissileX = this.MissileX + num2
      local num3 = this.speed * Sin(this.YawRad) + this.AccelerationPerTick * Sin(radians)
      this.MissileY = this.MissileY + num3
      local num4 = 3.14159274 --[[(float)Math.PI]] + Atan2(0 - num3, 0 - num2)
      if (num4 < num and num < this.YawRad) or (this.YawRad < num and num < num4) then
        this.YawRad = num
        this.speed = math.Min(this.MaximumSpeedPerTick, this.speed + this.AccelerationPerTick)
      else
        this.YawRad = num4
        this.speed = math.Min(this.MaximumSpeedPerTick, SquareRoot(num2 * num2 + num3 * num3))
      end
      this.InternalMissileZ = this.InternalMissileZ + ((this.InternalTargetZ - this.InternalMissileZ) * (this.speed / SquareRoot(((this.MissileX - this.TargetX) * (this.MissileX - this.TargetX)) + ((this.MissileY - this.TargetY) * (this.MissileY - this.TargetY)))))
      if not WCSharpSharedData.Rectangle.WorldBounds:Contains(this.MissileX, this.MissileY) then
        this:ExitWorldBounds()
        return
      end
      if this.Effect ~= nil then
        this.RollRad = this.RollRad + this.SpinVelocityRad
        local missileZ2 = getMissileZ(this)
        this.PitchRad = Atan2(missileZ - missileZ2, SquareRoot(num2 * num2 + num3 * num3))
        BlzSetSpecialEffectPosition(this.Effect, this.MissileX, this.MissileY, missileZ2)
        BlzSetSpecialEffectOrientation(this.Effect, this.YawRad, this.PitchRad, this.RollRad)
      end
      if this.Interval > 0 then
        this:RunInterval()
      end
      if this.collisionRadius > 0 then
        this:RunCollisions()
      end
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Missiles.Missile
        }
      end,
      speed = 0,
      mode = 0,
      getCasterZ = getCasterZ,
      setCasterZ = setCasterZ,
      getTargetZ = getTargetZ,
      setTargetZ = setTargetZ,
      getMissileZ = getMissileZ,
      setMissileZ = setMissileZ,
      getSpeedPerTick = getSpeedPerTick,
      setSpeedPerTick = setSpeedPerTick,
      getSpeed = getSpeed,
      setSpeed = setSpeed,
      AccelerationPerTick = 0,
      getAcceleration = getAcceleration,
      setAcceleration = setAcceleration,
      MaximumSpeedPerTick = 0,
      getMaximumSpeed = getMaximumSpeed,
      setMaximumSpeed = setMaximumSpeed,
      getMode = getMode,
      setMode = setMode,
      Launch = Launch,
      Action = Action,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__,
        __ctor4__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "mode", 0x1, System.Int32 },
            { "speed", 0x1, System.Single }
          },
          properties = {
            { "Acceleration", 0x106, System.Single, getAcceleration, setAcceleration },
            { "AccelerationPerTick", 0x6, System.Single },
            { "CasterZ", 0x106, System.Single, getCasterZ, setCasterZ },
            { "InitialAngle", 0x6, System.Nullable(System.Single) },
            { "MaximumSpeed", 0x106, System.Single, getMaximumSpeed, setMaximumSpeed },
            { "MaximumSpeedPerTick", 0x6, System.Single },
            { "MissileZ", 0x106, System.Single, getMissileZ, setMissileZ },
            { "Mode", 0x106, System.Int32, getMode, setMode },
            { "Speed", 0x106, System.Single, getSpeed, setSpeed },
            { "SpeedPerTick", 0x106, System.Single, getSpeedPerTick, setSpeedPerTick },
            { "TargetZ", 0x106, System.Single, getTargetZ, setTargetZ }
          },
          methods = {
            { ".ctor", 0x206, __ctor1__, out.WCSharp.Api.unit, out.WCSharp.Api.unit },
            { ".ctor", 0x306, __ctor2__, out.WCSharp.Api.unit, System.Single, System.Single },
            { ".ctor", 0x406, __ctor3__, out.WCSharp.Api.player, System.Single, System.Single, out.WCSharp.Api.unit },
            { ".ctor", 0x506, __ctor4__, out.WCSharp.Api.player, System.Single, System.Single, System.Single, System.Single },
            { "Action", 0x6, Action },
            { "Launch", 0x6, Launch },
            { "SetFlightMode", 0x101, SetFlightMode, System.Int32 }
          },
          class = { "MomentumMissile", 0x16 }
        }
      end
    }
  end)
  -- <summary>
  -- Missile that will orbit the specified target.
  -- <para>Note: this missile calls <see cref="M:WCSharp.Missiles.Missile.OnImpact" /> when the target dies.</para>
  -- </summary>
  namespace.class("OrbitalMissile", function (namespace)
    local getCasterZ, setCasterZ, getTargetZ, setTargetZ, getMissileZ, setMissileZ, getSpeedPerTick, setSpeedPerTick, 
    getSpeed, setSpeed, getRange, setRange, getOrbitalVelocityRad, setOrbitalVelocityRad, getOrbitalPeriod, setOrbitalPeriod, 
    getOrbitalAngle, setOrbitalAngle, getMode, setMode, SetFlightMode, Launch, Action, AdjustMissileZ, 
    internal, __ctor1__, __ctor2__, __ctor3__, __ctor4__
    -- <summary>
    -- The flight modes of this missile type.
    -- </summary>
    namespace.enum("FlightMode", function ()
      return {
        Default = 0,
        MissileBased = 1,
        TargetBased = 2,
        BestFit = 3,
        None = 4,
        __metadata__ = function (out)
          return {
            fields = {
              { "BestFit", 0xE, System.Int32 },
              { "Default", 0xE, System.Int32 },
              { "MissileBased", 0xE, System.Int32 },
              { "None", 0xE, System.Int32 },
              { "TargetBased", 0xE, System.Int32 }
            },
            class = { "FlightMode", 0x26 }
          }
        end
      }
    end)
    internal = function (this)
      this.OrbitalAngleRad = GetRandomReal(0, 6.28318548 --[[(float)Math.PI * 2f]])
    end
    -- <inheritdoc />
    __ctor1__ = function (this, caster, target)
      internal(this)
      System.base(this).__ctor__[3](this, caster, target)
    end
    -- <inheritdoc />
    __ctor2__ = function (this, caster, targetX, targetY)
      internal(this)
      System.base(this).__ctor__[4](this, caster, targetX, targetY)
    end
    -- <inheritdoc />
    __ctor3__ = function (this, castingPlayer, casterX, casterY, target)
      internal(this)
      System.base(this).__ctor__[5](this, castingPlayer, casterX, casterY, target)
    end
    -- <inheritdoc />
    __ctor4__ = function (this, castingPlayer, casterX, casterY, targetX, targetY)
      internal(this)
      System.base(this).__ctor__[6](this, castingPlayer, casterX, casterY, targetX, targetY)
    end
    getCasterZ = function (this)
      return this.InternalCasterZ + WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
    end
    setCasterZ = function (this, value)
      this.InternalCasterZ = value - WCSharpShared.Util.GetZ(this.CasterX, this.CasterY)
    end
    getTargetZ = function (this)
      return this.InternalTargetZ + WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
    end
    setTargetZ = function (this, value)
      this.InternalTargetZ = value - WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
    end
    getMissileZ = function (this)
      return this.InternalMissileZ
    end
    setMissileZ = function (this, value)
      this.InternalMissileZ = value
    end
    getSpeedPerTick = function (this)
      return 2 / this.orbitalVelocity * this.range
    end
    setSpeedPerTick = function (this, value)
      this.speed = value
      if this.range ~= 0 then
        this.orbitalVelocity = 2 * value / this.range
      end
    end
    getSpeed = function (this)
      return 64 * this.orbitalVelocity * this.range
    end
    setSpeed = function (this, value)
      this.speed = value * (0.03125 --[[1f / 32f]])
      if this.range ~= 0 then
        this.orbitalVelocity = 0.0625 * value / this.range
      end
    end
    getRange = function (this)
      return this.range
    end
    setRange = function (this, value)
      if this.speed ~= 0 and value ~= 0 then
        this.orbitalVelocity = 2 * this.speed / value
      end
      this.range = value
    end
    getOrbitalVelocityRad = function (this)
      return this.orbitalVelocity
    end
    setOrbitalVelocityRad = function (this, value)
      this.speed = 0
      this.orbitalVelocity = value
    end
    getOrbitalPeriod = function (this)
      if this.orbitalVelocity ~= 0 then
        return 0.196349546 --[[(float)Math.PI / 16f]] / this.orbitalVelocity
      end
      return 0
    end
    setOrbitalPeriod = function (this, value)
      this.speed = 0
      this.orbitalVelocity = ((value == 0) and 0 or (0.196349546 --[[(float)Math.PI / 16f]] / value))
    end
    getOrbitalAngle = function (this)
      return this.OrbitalAngleRad * (57.2957764 --[[180f / (float)Math.PI]])
    end
    setOrbitalAngle = function (this, value)
      this.OrbitalAngleRad = value * (0.0174532924 --[[(float)Math.PI / 180f]])
    end
    getMode = function (this)
      return this.mode
    end
    setMode = function (this, value)
      if this:getActive() then
        SetFlightMode(this, value)
      else
        this.mode = value
      end
    end
    SetFlightMode = function (this, value)
      if value == 0 --[[FlightMode.Default]] then
        value = 3 --[[FlightMode.BestFit]]
      end
      if this:getActive() then
        AdjustMissileZ(this)
      end
      this.mode = value
    end
    -- <inheritdoc />
    Launch = function (this)
      this.InternalCasterZ = this.InternalCasterZ + this.CasterLaunchZ
      this.InternalTargetZ = this.InternalTargetZ + this.TargetImpactZ
      this.IntervalLeft = this.Interval
      this.MissileX = (this.TargetX + (this.range * Cos(this.OrbitalAngleRad)))
      this.MissileY = (this.TargetY + (this.range * Sin(this.OrbitalAngleRad)))
      SetFlightMode(this, this.mode)
      AdjustMissileZ(this)
      if not System.String.IsNullOrEmpty(this.effectString) then
        this.Effect = AddSpecialEffect(this.effectString, this.MissileX, this.MissileY)
        BlzSetSpecialEffectZ(this.Effect, this.InternalMissileZ)
        if this.effectScale ~= 1 then
          BlzSetSpecialEffectScale(this.Effect, this.effectScale)
        end
      end
    end
    -- <inheritdoc />
    Action = function (this)
      if this.Target ~= nil then
        if UnitAlive(this.Target) then
          this.TargetX = GetUnitX(this.Target)
          this.TargetY = GetUnitY(this.Target)
          this.InternalTargetZ = GetUnitFlyHeight(this.Target) + this.TargetImpactZ
        else
          this:setActive(false)
          this:OnImpact()
          if not this:getActive() then
            if not UnitAlive(this.Target) then
              this.Target = nil
            end
            return
          end
        end
      end
      this.OrbitalAngleRad = this.OrbitalAngleRad + this.orbitalVelocity
      if this.OrbitalAngleRad >= 6.28318548 --[[(float)Math.PI * 2f]] then
        this.OrbitalAngleRad = this.OrbitalAngleRad - (6.28318548 --[[(float)Math.PI * 2f]])
      elseif this.OrbitalAngleRad < 0 then
        this.OrbitalAngleRad = this.OrbitalAngleRad + (6.28318548 --[[(float)Math.PI * 2f]])
      end
      local missileX = this.MissileX
      local missileY = this.MissileY
      this.MissileX = (this.TargetX + (this.range * Cos(this.OrbitalAngleRad)))
      this.MissileY = (this.TargetY + (this.range * Sin(this.OrbitalAngleRad)))
      if not WCSharpSharedData.Rectangle.WorldBounds:Contains(this.MissileX, this.MissileY) then
        this:ExitWorldBounds()
        return
      end
      if this.Effect ~= nil then
        local internalMissileZ = this.InternalMissileZ
        AdjustMissileZ(this)
        this.YawRad = ((this.orbitalVelocity > 0) and (this.OrbitalAngleRad + 1.57079637 --[[(float)Math.PI / 2f]]) or (this.OrbitalAngleRad - 1.57079637 --[[(float)Math.PI / 2f]]))
        this.RollRad = this.RollRad + this.SpinVelocityRad
        local num = missileX - this.MissileX
        local num2 = missileY - this.MissileY
        local internalMissileZ2 = this.InternalMissileZ
        this.PitchRad = Atan2(internalMissileZ - internalMissileZ2, SquareRoot(num * num + num2 * num2))
        BlzSetSpecialEffectPosition(this.Effect, this.MissileX, this.MissileY, this.InternalMissileZ)
        BlzSetSpecialEffectOrientation(this.Effect, this.YawRad, this.PitchRad, this.RollRad)
      end
      if this.Interval > 0 then
        this:RunInterval()
      end
      if this.collisionRadius > 0 then
        this:RunCollisions()
      end
    end
    AdjustMissileZ = function (this)
      if this.mode == 1 --[[FlightMode.MissileBased]] then
        this.InternalMissileZ = this.InternalTargetZ + WCSharpShared.Util.GetZ(this.MissileX, this.MissileY)
      elseif this.mode == 2 --[[FlightMode.TargetBased]] then
        this.InternalMissileZ = this.InternalTargetZ + WCSharpShared.Util.GetZ(this.TargetX, this.TargetY)
      elseif this.mode == 3 --[[FlightMode.BestFit]] then
        this.InternalMissileZ = this.InternalTargetZ + math.Max(WCSharpShared.Util.GetZ(this.MissileX, this.MissileY), WCSharpShared.Util.GetZ(this.TargetX, this.TargetY))
      end
    end
    return {
      base = function (out)
        return {
          out.WCSharp.Missiles.Missile
        }
      end,
      range = 0,
      mode = 0,
      speed = 0,
      orbitalVelocity = 0,
      getCasterZ = getCasterZ,
      setCasterZ = setCasterZ,
      getTargetZ = getTargetZ,
      setTargetZ = setTargetZ,
      getMissileZ = getMissileZ,
      setMissileZ = setMissileZ,
      getSpeedPerTick = getSpeedPerTick,
      setSpeedPerTick = setSpeedPerTick,
      getSpeed = getSpeed,
      setSpeed = setSpeed,
      getRange = getRange,
      setRange = setRange,
      getOrbitalVelocityRad = getOrbitalVelocityRad,
      setOrbitalVelocityRad = setOrbitalVelocityRad,
      getOrbitalPeriod = getOrbitalPeriod,
      setOrbitalPeriod = setOrbitalPeriod,
      getOrbitalAngle = getOrbitalAngle,
      setOrbitalAngle = setOrbitalAngle,
      getMode = getMode,
      setMode = setMode,
      Launch = Launch,
      Action = Action,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__,
        __ctor4__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "mode", 0x1, System.Int32 },
            { "orbitalVelocity", 0x1, System.Single },
            { "range", 0x1, System.Single },
            { "speed", 0x1, System.Single }
          },
          properties = {
            { "CasterZ", 0x106, System.Single, getCasterZ, setCasterZ },
            { "MissileZ", 0x106, System.Single, getMissileZ, setMissileZ },
            { "Mode", 0x106, System.Int32, getMode, setMode },
            { "OrbitalAngle", 0x106, System.Single, getOrbitalAngle, setOrbitalAngle },
            { "OrbitalAngleRad", 0x6, System.Single },
            { "OrbitalPeriod", 0x106, System.Single, getOrbitalPeriod, setOrbitalPeriod },
            { "OrbitalVelocityRad", 0x106, System.Single, getOrbitalVelocityRad, setOrbitalVelocityRad },
            { "Range", 0x106, System.Single, getRange, setRange },
            { "Speed", 0x106, System.Single, getSpeed, setSpeed },
            { "SpeedPerTick", 0x106, System.Single, getSpeedPerTick, setSpeedPerTick },
            { "TargetZ", 0x106, System.Single, getTargetZ, setTargetZ }
          },
          methods = {
            { ".ctor", 0x203, __ctor1__, out.WCSharp.Api.unit, out.WCSharp.Api.unit },
            { ".ctor", 0x303, __ctor2__, out.WCSharp.Api.unit, System.Single, System.Single },
            { ".ctor", 0x403, __ctor3__, out.WCSharp.Api.player, System.Single, System.Single, out.WCSharp.Api.unit },
            { ".ctor", 0x503, __ctor4__, out.WCSharp.Api.player, System.Single, System.Single, System.Single, System.Single },
            { "Action", 0x6, Action },
            { "AdjustMissileZ", 0x1, AdjustMissileZ },
            { "Launch", 0x6, Launch },
            { "SetFlightMode", 0x101, SetFlightMode, System.Int32 }
          },
          class = { "OrbitalMissile", 0x16 }
        }
      end
    }
  end)
end)

end
do
local System = System
local ArrayChar = System.Array(System.Char)
local ListInt32 = System.List(System.Int32)
local ListString = System.List(System.String)
local WCSharpJson
local WCSharpSaveLoad
local WCSharpShared
local WCSharpSync
System.import(function (out)
  WCSharpJson = WCSharp.Json
  WCSharpSaveLoad = WCSharp.SaveLoad
  WCSharpShared = WCSharp.Shared
  WCSharpSync = WCSharp.Sync
end)
System.namespace("WCSharp.SaveLoad", function (namespace)
  -- <summary>
  -- Indicates the state of the loaded save file.
  -- </summary>
  namespace.enum("LoadResult", function ()
    return {
      NewSave = 0,
      FailedDecode = 1,
      FailedDeserialize = 2,
      FailedHash = 3,
      Success = 4,
      __metadata__ = function (out)
        return {
          fields = {
            { "FailedDecode", 0xE, System.Int32 },
            { "FailedDeserialize", 0xE, System.Int32 },
            { "FailedHash", 0xE, System.Int32 },
            { "NewSave", 0xE, System.Int32 },
            { "Success", 0xE, System.Int32 }
          },
          class = { "LoadResult", 0x26 }
        }
      end
    }
  end)
  -- <summary>
  -- Extension class for <see cref="T:WCSharp.SaveLoad.LoadResult" />s.
  -- </summary>
  namespace.class("LoadResultExtensions", function (namespace)
    local Failed
    -- <summary>
    -- Extension method for determining whether the load result is any of the failed states.
    -- </summary>
    Failed = function (r)
      if r ~= 0 then
        return r ~= 4 --[[LoadResult.Success]]
      end
      return false
    end
    return {
      Failed = Failed,
      __metadata__ = function (out)
        return {
          methods = {
            { "Failed", 0x18E, Failed, System.Int32, System.Boolean }
          },
          class = { "LoadResultExtensions", 0x3E }
        }
      end
    }
  end)
  namespace.class("Save_1", function (namespace)
    return function (T)
      return {
        Version = 0,
        HashCode = 0,
        __metadata__ = function (out)
          return {
            properties = {
              { "HashCode", 0x6, System.Int32 },
              { "SaveData", 0x6, T },
              { "SaveString", 0x6, System.String },
              { "Version", 0x6, System.Int32 }
            },
            class = { "Save", 0x104, T }
          }
        end
      }
    end
  end)
  -- <summary>
  -- Abstract class containing the definitions that the SaveSystem needs in order to save and load your custom save data.
  -- </summary>
  namespace.class("Saveable", function (namespace)
    local GetPlayer, GetSaveSlot, SetPlayer, SetSaveSlot
    -- <summary>
    -- Returns the player object that this save is bound to.
    -- </summary>
    GetPlayer = function (this)
      return this.player
    end
    -- <summary>
    -- Returns the save slot that this save is bound to.
    -- </summary>
    GetSaveSlot = function (this)
      return this.saveSlot
    end
    -- <summary>
    -- Sets the player that this save is bound to.
    -- </summary>
    -- <param name="player"></param>
    SetPlayer = function (this, player)
      this.player = player
    end
    -- <summary>
    -- Sets the save slot that this save is bound to.
    -- </summary>
    -- <param name="saveSlot"></param>
    SetSaveSlot = function (this, saveSlot)
      this.saveSlot = saveSlot
    end
    return {
      saveSlot = 0,
      GetPlayer = GetPlayer,
      GetSaveSlot = GetSaveSlot,
      SetPlayer = SetPlayer,
      SetSaveSlot = SetSaveSlot,
      __metadata__ = function (out)
        return {
          fields = {
            { "player", 0x4, out.WCSharp.Api.player },
            { "saveSlot", 0x4, System.Int32 }
          },
          methods = {
            { "GetPlayer", 0x86, GetPlayer, out.WCSharp.Api.player },
            { "GetSaveSlot", 0x86, GetSaveSlot, System.Int32 },
            { "SetPlayer", 0x106, SetPlayer, out.WCSharp.Api.player },
            { "SetSaveSlot", 0x106, SetSaveSlot, System.Int32 }
          },
          class = { "Saveable", 0x16 }
        }
      end
    }
  end)
  -- <summary>
  -- Provides some type-explicit extension methods for <see cref="T:WCSharp.SaveLoad.Saveable" />s.
  -- </summary>
  namespace.class("SaveableExtensions", function (namespace)
    local Clone
    -- <summary>
    -- Creates a clone of the given save by converting it to JSON and back, and re-sets the player and save slot.
    -- <para>Useful for if you want to create a clone to compare save data before and after a game.</para>
    -- </summary>
    Clone = function (saveable, T)
      local val = WCSharpJson.JsonConvert.Deserialize(WCSharpJson.JsonConvert.Serialize(saveable, T), T)
      val:SetPlayer(saveable:GetPlayer())
      val:SetSaveSlot(saveable:GetSaveSlot())
      return val
    end
    return {
      Clone = Clone,
      __metadata__ = function (out)
        return {
          methods = {
            { "Clone", 0x1018E, Clone, function (T) return T, T end }
          },
          class = { "SaveableExtensions", 0x3E }
        }
      end
    }
  end)
  namespace.class("SaveHandler", function (namespace)
    local Create, class
    Create = function (action, T)
      local default = class()
      default.Action = function (x)
        local default = action
        if default ~= nil then
          default(System.cast(T, x), T)
        end
      end
      default.Type = System.typeof(T)
      return default
    end
    class = {
      Create = Create,
      __metadata__ = function (out)
        return {
          properties = {
            { "Action", 0x6, System.Delegate(System.Object, System.Void) },
            { "Type", 0x6, System.Type }
          },
          methods = {
            { "Create", 0x1018E, Create, function (T) return System.Delegate(T, System.Void), class end }
          },
          class = { "SaveHandler", 0x4 }
        }
      end
    }
    return class
  end)
  namespace.class("SaveLoadedMessage_1", function (namespace)
    return function (T)
      return {
        SaveSystemId = 0,
        PlayerId = 0,
        SaveSlot = 0,
        LoadResult = 0,
        __metadata__ = function (out)
          return {
            properties = {
              { "LoadResult", 0x6, System.Int32 },
              { "PlayerId", 0x6, System.Int32 },
              { "SaveData", 0x6, T },
              { "SaveSlot", 0x6, System.Int32 },
              { "SaveSystemId", 0x6, System.Int32 }
            },
            class = { "SaveLoadedMessage", 0x104, T }
          }
        end
      }
    end
  end)
  -- <summary>
  -- Contains logic shared between all different generic <see cref="T:WCSharp.SaveLoad.SaveSystem`1" /> instances.
  -- </summary>
  namespace.class("SaveSystem", function (namespace)
    local NextId, OriginalTooltips, AbilityIds, AddAbilityId, Init, GetNextId, static
    static = function (this)
      OriginalTooltips = ListString()
      this.OriginalTooltips = OriginalTooltips
      local default = ListInt32()
      default:Add(1097690227)
      default:Add(1098018659)
      default:Add(1097689443)
      default:Add(1097689452)
      default:Add(1097034854)
      default:Add(1097035111)
      default:Add(1097098598)
      default:Add(1097099635)
      default:Add(1097228916)
      default:Add(1097228907)
      default:Add(1097231467)
      default:Add(1097231457)
      default:Add(1097300322)
      default:Add(1097233256)
      default:Add(1097360737)
      default:Add(1097428582)
      default:Add(1097430643)
      default:Add(1097688166)
      default:Add(1097102451)
      default:Add(1097889894)
      default:Add(1097886841)
      default:Add(1097364080)
      default:Add(1095267425)
      default:Add(1098083439)
      default:Add(1098084467)
      default:Add(1098085480)
      default:Add(1098085480)
      default:Add(1098085480)
      default:Add(1098085480)
      default:Add(1098085480)
      AbilityIds = default
      this.AbilityIds = AbilityIds
    end
    NextId = 0
    -- <summary>
    -- Adds an additional ability id for use as temporary data storage.
    -- <para>By default, you have 6000 characters to use as storage. If you approach that limit, expand the ability ids used at the start of the game using this method.</para>
    -- <para>This should be done upon map start, before anything attempts to use the SaveSystem.</para>
    -- <para>The default includes most of the Human abilities:</para>
    -- <para>Amls, Ahan, Aroc, Amic, Amil, Aclf, Acmg, Adef, Adis, Afbt, Afbk, Aflk, Afla, Agyb, Afsh,
    -- Ahea, Ahlh, Ainf, Aivs, Ahri, Amdf, Adts, Apxf, Aply, Ahrp, AHta, Aslo, Asps, Asth, Ahsb</para>
    -- </summary>
    -- <param name="abilityId"></param>
    AddAbilityId = function (abilityId)
      if OriginalTooltips == nil then
        if AbilityIds:Contains(abilityId) then
          System.throw(System.ArgumentException("ERROR: Tooltip " .. abilityId .. " is already in use by the save system."))
        end
        AbilityIds:Add(abilityId)
      end
    end
    Init = function ()
      for i = 0, #AbilityIds - 1 do
        local continue
        repeat
          local text = BlzGetAbilityTooltip(AbilityIds:get(i), 0)
          if text ~= "Tool tip missing!" then
            OriginalTooltips:Add(text)
            continue = true
            break
          end
          System.throw(System.ArgumentException("ERROR: Tooltip " .. AbilityIds:get(i) .. " cannot be modified for the SaveLoad system. See the WCSharp wiki for more info on Save/Load storage space."))
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    GetNextId = function ()
      local default = NextId + 1
      NextId = default
      return default
    end
    return {
      AddAbilityId = AddAbilityId,
      Init = Init,
      GetNextId = GetNextId,
      static = static,
      __metadata__ = function (out)
        return {
          properties = {
            { "AbilityIds", 0xC, System.List(System.Int32) },
            { "NextId", 0x9, System.Int32 },
            { "OriginalTooltips", 0xC, System.List(System.String) }
          },
          methods = {
            { "AddAbilityId", 0x10E, AddAbilityId, System.Int32 },
            { "GetNextId", 0x8C, GetNextId, System.Int32 },
            { "Init", 0xC, Init }
          },
          class = { "SaveSystem", 0x6 }
        }
      end
    }
  end)
  -- <summary>
  -- System capable of saving C# data structures on a players local files to create save files that can be loaded at a later date/map.
  -- </summary>
  -- <typeparam name="T">The <see cref="T:WCSharp.SaveLoad.Saveable" /> type that this instance will be saving/loading</typeparam>
  namespace.class("SaveSystem_1", function (namespace)
    return function (T)
      local HandleSaveLoadedMessage, Save, Load, TryDecode, TryDeserialize, GetFileName, GetSaveHash, HashString, 
      Dispose, __ctor__
      local Save_1T = WCSharp.SaveLoad.Save_1(T)
      local SaveLoadedMessage_1T = WCSharp.SaveLoad.SaveLoadedMessage_1(T)
      -- <summary>
      -- Creates a new <see cref="T:WCSharp.SaveLoad.SaveSystem`1" /> instance with the given <paramref name="options" />.
      -- </summary>
      __ctor__ = function (this, options)
        if #WCSharpSaveLoad.SaveSystem.OriginalTooltips == 0 then
          WCSharpSaveLoad.SaveSystem.Init()
        end
        this.id = WCSharpSaveLoad.SaveSystem.GetNextId()
        this.saveFolder = options.SaveFolder
        this.hash1 = options.Hash1
        this.hash2 = options.Hash2
        this.salt = options.Salt
        this.bindSavesToPlayerName = options.BindSavesToPlayerName
        this.suffix = options.Suffix or ""
        this.base64 = options.Base64Provider or WCSharpShared.Base64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")
        if System.String.IsNullOrWhiteSpace(this.saveFolder) then
          System.throw(System.ArgumentException("ERROR: Must define a non-empty save folder for the SaveSystem."))
        end
        if System.String.IsNullOrWhiteSpace(this.salt) then
          System.throw(System.ArgumentException("ERROR: Must define a non-empty save folder for the SaveSystem."))
        end
        if this.hash1 <= 0 then
          System.throw(System.ArgumentException("ERROR: Must define a positive non-zero hash1 for the SaveSystem."))
        end
        if this.hash2 <= 0 then
          System.throw(System.ArgumentException("ERROR: Must define a positive non-zero hash2 for the SaveSystem."))
        end
        local array = ArrayChar { 60 --[['<']], 62 --[['>']], 58 --[[':']], 34 --[['"']], 47 --[['/']], 92 --[['\\']], 124 --[['|']], 63 --[['?']], 42 --[['*']] }
        for _, value in System.each(array) do
          if this.saveFolder:Contains(value) then
            System.throw(System.ArgumentException("ERROR: SaveFolder cannot contain " .. string.char(value) .. " as this is an illegal filename character."))
          end
          if this.suffix:Contains(value) then
            System.throw(System.ArgumentException("ERROR: Suffix cannot contain " .. string.char(value) .. " as this is an illegal filename character."))
          end
        end
        if this.suffix ~= "" and not this.suffix:StartsWith("-") then
          this.suffix = "-" .. System.toString(this.suffix)
        end
        WCSharpSync.SyncSystem.Subscribe(System.fn(this, HandleSaveLoadedMessage), SaveLoadedMessage_1T)
      end
      HandleSaveLoadedMessage = function (this, message)
        if message.SaveSystemId == this.id then
          local val = message.SaveData or System.Activator.CreateInstance(T)
          val.player = Player(message.PlayerId)
          val.saveSlot = message.SaveSlot
          local default = this.OnSaveLoaded
          if default ~= nil then
            default(val, message.LoadResult)
          end
        end
      end
      -- <summary>
      -- Writes the given saveable to file for the player who owns the save.
      -- </summary>
      -- <param name="saveable">The saveable to save.</param>
      Save = function (this, saveable)
        if GetLocalPlayer() ~= saveable.player then
          return
        end
        local text = WCSharpJson.JsonConvert.Serialize(saveable, T)
        local default = Save_1T()
        default.Version = 2
        default.HashCode = GetSaveHash(this, text, saveable.player)
        default.SaveString = text
        local input = default
        local text2 = this.base64:Encode(WCSharpJson.JsonConvert.Serialize(input, Save_1T))
        local fileName = GetFileName(this, saveable.player, saveable.saveSlot)
        if #text2 > 185 * #WCSharpSaveLoad.SaveSystem.AbilityIds then
          System.Console.WriteLine("ERROR: Maximum save file size has been reached. Unable to save file. Please contact the mapmaker to increase storage space.")
          return
        end
        PreloadGenClear()
        PreloadGenStart()
        do
          local i = 0
          while i * 185 < #text2 do
            local value = WCSharpSaveLoad.SaveSystem.AbilityIds:get(i)
            local num = i * 185
            local length = math.Min(#text2 - num, 185)
            Preload("\" )\ncall BlzSetAbilityTooltip(" .. value .. ", \"" .. System.toString(text2:Substring(num, length)) .. "\", 0)//")
            i = i + 1
          end
        end
        Preload("\" )\nendfunction\nfunction a takes nothing returns nothing\n //")
        PreloadGenEnd(fileName)
      end
      -- <summary>
      -- Loads a save for the given player on the given save slot.
      -- <para>If no save exists on the given slot, or if loading failed for any reason, a new, empty save will be returned.</para>
      -- <para>Use <see cref="E:WCSharp.SaveLoad.SaveSystem`1.OnSaveLoaded" /> to receive the save.</para>
      -- </summary>
      -- <param name="player">The player to create the save for.</param>
      -- <param name="saveSlot">The slot to save to.</param>
      Load = function (this, player, saveSlot)
        if GetLocalPlayer() ~= player then
          return
        end
        Preloader(GetFileName(this, player, saveSlot))
        local stringBuilder = System.StringBuilder()
        for i = 0, #WCSharpSaveLoad.SaveSystem.AbilityIds - 1 do
          local abilCode = WCSharpSaveLoad.SaveSystem.AbilityIds:get(i)
          local text = WCSharpSaveLoad.SaveSystem.OriginalTooltips:get(i)
          local text2 = BlzGetAbilityTooltip(abilCode, 0)
          if text2 == text then
            if System.div(i * 3, 4) > #WCSharpSaveLoad.SaveSystem.AbilityIds then
              System.Console.WriteLine("WARNING: 75% or more of the save file storage space is in use. Please contact the mapmaker to increase storage space.")
            end
            break
          end
          BlzSetAbilityTooltip(abilCode, text, 0)
          stringBuilder:Append(text2)
        end
        local save
        local default
        default, save = TryDecode(this, stringBuilder)
        local loadResult = default
        local extern = SaveLoadedMessage_1T()
        extern.SaveSystemId = this.id
        extern.PlayerId = GetPlayerId(player)
        extern.SaveSlot = saveSlot
        extern.LoadResult = loadResult
        local saveLoadedMessage = extern
        if save ~= nil then
          if save.Version == 1 then
            if save.SaveData ~= nil then
              if save.HashCode == GetSaveHash(this, WCSharpJson.JsonConvert.Serialize(save.SaveData, T), player) then
                saveLoadedMessage.SaveData = save.SaveData
              else
                saveLoadedMessage.LoadResult = 3 --[[LoadResult.FailedHash]]
              end
            end
          elseif save.Version == 2 and not System.String.IsNullOrEmpty(save.SaveString) then
            local extern, saveDataObject = TryDeserialize(save.SaveString)
            if extern then
              saveLoadedMessage.SaveData = saveDataObject
            else
              saveLoadedMessage.LoadResult = 2 --[[LoadResult.FailedDeserialize]]
            end
          end
        end
        WCSharpSync.SyncSystem.Send(saveLoadedMessage, SaveLoadedMessage_1T)
      end
      TryDecode = function (this, sb, save)
        local text = sb:ToString()
        if System.String.IsNullOrEmpty(text) then
          save = nil
          return 0 --[[LoadResult.NewSave]], save
        end
        local result = 1 --[[LoadResult.FailedDecode]]
        local default, extern = System.try(function ()
          local input = this.base64:Decode(text)
          result = 2 --[[LoadResult.FailedDeserialize]]
          save = WCSharpJson.JsonConvert.Deserialize(input, Save_1T)
          return true, 4 --[[LoadResult.Success]]
        end, function (default)
          save = nil
          return true, result
        end)
        if default then
          return extern, save
        end
      end
      TryDeserialize = function (saveData, saveDataObject)
        local default, extern = System.try(function ()
          saveDataObject = WCSharpJson.JsonConvert.Deserialize(saveData, T)
          return true, true
        end, function (default)
          saveDataObject = nil
          return true, false
        end)
        if default then
          return extern, saveDataObject
        end
      end
      GetFileName = function (this, player, saveSlot)
        if this.bindSavesToPlayerName then
          return System.toString(this.saveFolder) .. "\\" .. System.toString(GetPlayerName(player)) .. "-save-" .. saveSlot .. System.toString(this.suffix) .. ".pld"
        end
        return System.toString(this.saveFolder) .. "\\save-" .. saveSlot .. System.toString(this.suffix) .. ".pld"
      end
      GetSaveHash = function (this, saveData, player)
        local hash = HashString(this, this.hash1, saveData)
        if this.bindSavesToPlayerName then
          hash = HashString(this, hash, GetPlayerName(player))
        end
        return HashString(this, hash, this.salt)
      end
      HashString = function (this, hash, string)
        for i = 0, #string - 1 do
          hash = (hash * this.hash2) ~ string:get(i)
        end
        return hash
      end
      -- <inheritdoc />
      Dispose = function (this)
        WCSharpSync.SyncSystem.Unsubscribe(System.fn(this, HandleSaveLoadedMessage), SaveLoadedMessage_1T)
      end
      return {
        base = function (out)
          return {
            System.IDisposable
          }
        end,
        id = 0,
        hash1 = 0,
        hash2 = 0,
        bindSavesToPlayerName = false,
        Save = Save,
        Load = Load,
        Dispose = Dispose,
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            fields = {
              { "base64", 0x1, out.WCSharp.Shared.Base64 },
              { "bindSavesToPlayerName", 0x1, System.Boolean },
              { "hash1", 0x1, System.Int32 },
              { "hash2", 0x1, System.Int32 },
              { "id", 0x1, System.Int32 },
              { "salt", 0x1, System.String },
              { "saveFolder", 0x1, System.String },
              { "suffix", 0x1, System.String }
            },
            events = {
              { "OnSaveLoaded", 0x6, System.Delegate(T, System.Int32, System.Void) }
            },
            methods = {
              { ".ctor", 0x106, nil, out.WCSharp.SaveLoad.SaveSystemOptions },
              { "Dispose", 0x6, Dispose },
              { "GetFileName", 0x281, GetFileName, out.WCSharp.Api.player, System.Int32, System.String },
              { "GetSaveHash", 0x281, GetSaveHash, System.String, out.WCSharp.Api.player, System.Int32 },
              { "HandleSaveLoadedMessage", 0x101, HandleSaveLoadedMessage, out.WCSharp.SaveLoad.SaveLoadedMessage_1(T) },
              { "HashString", 0x281, HashString, System.Int32, System.String, System.Int32 },
              { "Load", 0x206, Load, out.WCSharp.Api.player, System.Int32 },
              { "Save", 0x106, Save, T },
              { "TryDecode", 0x281, TryDecode, System.StringBuilder, out.WCSharp.SaveLoad.Save_1(T), System.Int32 },
              { "TryDeserialize", 0x289, TryDeserialize, System.String, T, System.Boolean }
            },
            class = { "SaveSystem", 0x106, T }
          }
        end
      }
    end
  end)
  -- <summary>
  -- Defines a set of options for a <see cref="T:WCSharp.SaveLoad.SaveSystem`1" />.
  -- <para>The <see cref="P:WCSharp.SaveLoad.SaveSystemOptions.SaveFolder" />, <see cref="P:WCSharp.SaveLoad.SaveSystemOptions.Salt" />, <see cref="P:WCSharp.SaveLoad.SaveSystemOptions.Hash1" /> and <see cref="P:WCSharp.SaveLoad.SaveSystemOptions.Hash2" /> properties are required.</para>
  -- </summary>
  namespace.class("SaveSystemOptions", function (namespace)
    return {
      Hash1 = 0,
      Hash2 = 0,
      BindSavesToPlayerName = false,
      __metadata__ = function (out)
        return {
          properties = {
            { "Base64Provider", 0x6, out.WCSharp.Shared.Base64 },
            { "BindSavesToPlayerName", 0x6, System.Boolean },
            { "Hash1", 0x6, System.Int32 },
            { "Hash2", 0x6, System.Int32 },
            { "Salt", 0x6, System.String },
            { "SaveFolder", 0x6, System.String },
            { "Suffix", 0x6, System.String }
          },
          class = { "SaveSystemOptions", 0x6 }
        }
      end
    }
  end)
end)

end
do
local System = System
local Linq = System.Linq.Enumerable
local WCSharpApi = WCSharp.Api
local Listunit = System.List(WCSharpApi.unit)
local HashSetunit = System.HashSet(WCSharpApi.unit)
local ListDelegate = System.List(System.Delegate)
local DictObjectObject = System.Dictionary(System.Object, System.Object)
local KeyValuePairObjectObject = System.KeyValuePair(System.Object, System.Object)
local WCSharpSharedData
System.import(function (out)
  WCSharpSharedData = WCSharp.Shared.Data
end)
System.namespace("WCSharp.Shared", function (namespace)
  -- <summary>
  -- Conversion courtesy of http://lua-users.org/wiki/BaseSixtyFour
  -- </summary>
  namespace.class("Base64", function (namespace)
    local BASE64_CHARSET, default, encode, decode, ToBase64, FromBase64, Encode, Decode, 
    class, static, __ctor__
    static = function (this)
      default = class("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")
      encode = load("\r\nreturn function(data, b)\r\n    return ((data:gsub('.', function(x) \r\n        local r,b='',x:byte()\r\n        for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end\r\n        return r;\r\n    end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)\r\n        if (#x < 6) then return '' end\r\n        local c=0\r\n        for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end\r\n        return b:sub(c+1,c+1)\r\n    end)..({ '', '==', '=' })[#data%3+1])\r\nend\r\n")()
      decode = load("\r\nreturn function(data, b)\r\n    data = string.gsub(data, '[^'..b..'=]', '')\r\n    return (data:gsub('.', function(x)\r\n        if (x == '=') then return '' end\r\n        local r,f='',(b:find(x)-1)\r\n        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end\r\n        return r;\r\n    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)\r\n        if (#x ~= 8) then return '' end\r\n        local c=0\r\n        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end\r\n        return string.char(c)\r\n    end))\r\nend\r\n")()
    end
    -- <summary>
    -- Creates a new Base64 generator with the given character set.
    -- <para>A custom character set must be exactly 64 characters long and use the same set of characters as regular Base64. You can only change the order.</para>
    -- <para>Default: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</para>
    -- </summary>
    -- <param name="charset"></param>
    __ctor__ = function (this, charset)
      if charset == nil or #charset ~= #("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/") or Linq.Any("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", function (x)
        return not charset:Contains(x)
      end) then
        System.Console.WriteLine("Invalid base64 character set supplied. The character set must be the same length and be a scrambled version of the default Base64 character set.")
      else
        this.charset = charset
      end
    end
    BASE64_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    -- <summary>
    -- Converts the given text to Base64 with the default character set.
    -- </summary>
    ToBase64 = function (data)
      return Encode(default, data)
    end
    -- <summary>
    -- Converts the given Base64 to text with the default character set.
    -- </summary>
    FromBase64 = function (data)
      return Decode(default, data)
    end
    -- <summary>
    -- Converts the given string into a Base64 string.
    -- </summary>
    Encode = function (this, data)
      return System.cast(System.String, encode(data, this.charset))
    end
    -- <summary>
    -- Converts the given Base64 string into a regular string.
    -- </summary>
    Decode = function (this, data)
      return System.cast(System.String, decode(data, this.charset))
    end
    class = {
      ToBase64 = ToBase64,
      FromBase64 = FromBase64,
      Encode = Encode,
      Decode = Decode,
      static = static,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "charset", 0x1, System.String },
            { "decode", 0x9, System.Object },
            { "default", 0x9, class },
            { "encode", 0x9, System.Object }
          },
          methods = {
            { ".ctor", 0x106, nil, System.String },
            { "Decode", 0x186, Decode, System.String, System.String },
            { "Encode", 0x186, Encode, System.String, System.String },
            { "FromBase64", 0x18E, FromBase64, System.String, System.String },
            { "ToBase64", 0x18E, ToBase64, System.String, System.String }
          },
          class = { "Base64", 0x6 }
        }
      end
    }
    return class
  end)
  -- <summary>
  -- Basic helper class to create 0 second delays on executing actions.
  -- <para>This can be used to circumvent various issues, such as unit AI locking up if you give them a new order at the same time as they start an attack.</para>
  -- </summary>
  namespace.class("Delay", function (namespace)
    local timer, funcs, execute, EnableDebug, Add, ExecuteAll, ExecuteAllDebug, static
    static = function (this)
      timer = CreateTimer()
      funcs = ListDelegate()
      execute = ExecuteAll
    end
    -- <summary>
    -- Call this method to automatically wrap your actions in a try/catch, so that exceptions that lead back to <see cref="T:WCSharp.Shared.Delay" /> will automatically output information.
    -- <para>It is recommended to use compilation time conditions to not call this on release mode.</para>
    -- </summary>
    EnableDebug = function ()
      execute = ExecuteAllDebug
    end
    -- <summary>
    -- <para>Will execute the given action after a 0 second delay, which translates to a single frame.</para>
    -- <para>This can be used to circumvent various issues, such as unit AI locking up if you give them a new order at the same time as they start an attack.</para>
    -- </summary>
    Add = function (func)
      if #funcs == 0 then
        TimerStart(timer, 0, false, execute)
      end
      funcs:Add(func)
    end
    ExecuteAll = function ()
      for i = 0, #funcs - 1 do
        funcs:get(i)()
      end
      funcs:Clear()
    end
    ExecuteAllDebug = function ()
      System.try(function ()
        for i = 0, #funcs - 1 do
          funcs:get(i)()
        end
      end, function (default)
        local ex = default
        System.Console.WriteLine(ex:getMessage())
        System.Console.WriteLine(ex:getStackTrace())
      end)
      funcs:Clear()
    end
    return {
      EnableDebug = EnableDebug,
      Add = Add,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "execute", 0x9, System.Delegate },
            { "funcs", 0x9, System.List(System.Delegate) },
            { "timer", 0x9, out.WCSharp.Api.timer }
          },
          methods = {
            { "Add", 0x10E, Add, System.Delegate },
            { "EnableDebug", 0xE, EnableDebug },
            { "ExecuteAll", 0x9, ExecuteAll },
            { "ExecuteAllDebug", 0x9, ExecuteAllDebug }
          },
          class = { "Delay", 0x3E }
        }
      end
    }
  end)
  -- <summary>
  -- Represents a table in Lua in a way that is easier to work with from C#.
  -- </summary>
  -- Unfortunately this can't just extend <see cref="T:System.Collections.Generic.Dictionary`2" /> because
  -- adding properties/fields messes with the enumeration after transpilation to Lua.
  namespace.class("LuaTable", function (namespace)
    local getKeys, getValues, getCount, getIsReadOnly, get, set, AddKeyValue, ContainsKey, 
    RemoveKey, TryGetValue, Clear, GetEnumerator, GetEnumerator1, Add, Contains, CopyTo, 
    Remove, __ctor__
    -- <summary>
    -- Initialises a new <see cref="T:WCSharp.Shared.LuaTable" /> and adds all pairs located on the table into the dictionary.
    -- </summary>
    __ctor__ = function (this, table)
      this.dict = DictObjectObject()
      this.Table = table
      local obj = nil
      local obj2 = nil
      for obj,obj2 in pairs(table) do
      this.dict:AddKeyValue(obj, obj2)
      end
    end
    getKeys = function (this)
      return this.dict:getKeys()
    end
    getValues = function (this)
      return this.dict:getValues()
    end
    getCount = function (this)
      return this.dict:getCount()
    end
    getIsReadOnly = function (this)
      return this.dict:getIsReadOnly()
    end
    get = function (this, key)
      return this.dict:get(key)
    end
    set = function (this, key, value)
      this.dict:set(key, value)
    end
    -- <inheritdoc />
    AddKeyValue = function (this, key, value)
      this.dict:AddKeyValue(key, value)
    end
    -- <inheritdoc />
    ContainsKey = function (this, key)
      return this.dict:ContainsKey(key)
    end
    -- <inheritdoc />
    RemoveKey = function (this, key)
      return this.dict:RemoveKey(key)
    end
    -- <inheritdoc />
    TryGetValue = function (this, key, value)
      local default
      default, value = this.dict:TryGetValue(key, nil)
      return default, value
    end
    -- <inheritdoc />
    Clear = function (this)
      this.dict:Clear()
    end
    -- <inheritdoc />
    GetEnumerator = function (this)
      return this.dict:GetEnumerator()
    end
    GetEnumerator1 = function (this)
      return this.dict:GetEnumerator()
    end
    Add = function (this, item)
      this.dict:Add(item)
    end
    Contains = function (this, item)
      return this.dict:Contains(item)
    end
    CopyTo = function (this, array, arrayIndex)
      this.dict:CopyTo(array, arrayIndex)
    end
    Remove = function (this, item)
      return this.dict:RemoveKey(item)
    end
    return {
      __genericT__ = KeyValuePairObjectObject,
      base = function (out)
        return {
          System.IDictionary_2(System.Object, System.Object),
          System.ICollection_1(System.KeyValuePair(System.Object, System.Object)),
          System.IEnumerable_1(System.KeyValuePair(System.Object, System.Object)),
          System.IEnumerable
        }
      end,
      getKeys = getKeys,
      getValues = getValues,
      getCount = getCount,
      getIsReadOnly = getIsReadOnly,
      get = get,
      set = set,
      AddKeyValue = AddKeyValue,
      ContainsKey = ContainsKey,
      RemoveKey = RemoveKey,
      TryGetValue = TryGetValue,
      Clear = Clear,
      GetEnumerator = GetEnumerator,
      GetEnumerator1 = GetEnumerator1,
      Add = Add,
      Contains = Contains,
      CopyTo = CopyTo,
      Remove = Remove,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "dict", 0x1, System.Dictionary(System.Object, System.Object) }
          },
          properties = {
            { "Count", 0x206, System.Int32, getCount },
            { "Keys", 0x206, System.ICollection_1(System.Object), getKeys },
            { "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.IsReadOnly", 0x201, System.Boolean, getIsReadOnly },
            { "Table", 0x6, System.Object },
            { "Values", 0x206, System.ICollection_1(System.Object), getValues }
          },
          methods = {
            { ".ctor", 0x106, nil, System.Object },
            { "Add", 0x206, AddKeyValue, System.Object, System.Object },
            { "Clear", 0x6, Clear },
            { "ContainsKey", 0x186, ContainsKey, System.Object, System.Boolean },
            { "GetEnumerator", 0x86, GetEnumerator, System.IEnumerator_1(System.KeyValuePair(System.Object, System.Object)) },
            { "Remove", 0x186, RemoveKey, System.Object, System.Boolean },
            { "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Add", 0x101, Add, System.KeyValuePair(System.Object, System.Object) },
            { "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Contains", 0x181, Contains, System.KeyValuePair(System.Object, System.Object), System.Boolean },
            { "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.CopyTo", 0x201, CopyTo, System.Array(System.KeyValuePair(System.Object, System.Object)), System.Int32 },
            { "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Remove", 0x181, Remove, System.KeyValuePair(System.Object, System.Object), System.Boolean },
            { "System.Collections.IEnumerable.GetEnumerator", 0x81, GetEnumerator1, System.IEnumerator },
            { "TryGetValue", 0x286, TryGetValue, System.Object, System.Object, System.Boolean }
          },
          class = { "LuaTable", 0x6 }
        }
      end
    }
  end)
  -- <summary>
  -- Wrapper for WC3 handles to pass type inspection.
  -- <para>Sometimes some type casts or pattern matching is required for handles, however this doesn't work as they are not proper objects.</para>
  -- <para>By wrapping them in a C# object like this, we can properly cast and match handles.</para>
  -- </summary>
  namespace.class("TypeWrapper_1", function (namespace)
    return function (T)
      local __ctor__
      -- <summary>
      -- Wraps the given value in a C# type.
      -- </summary>
      __ctor__ = function (this, value)
        this.Value = System.default(T)
        this.Value = value
      end
      return {
        __ctor__ = __ctor__,
        __metadata__ = function (out)
          return {
            properties = {
              { "Value", 0x6, T }
            },
            methods = {
              { ".ctor", 0x106, nil, T }
            },
            class = { "TypeWrapper", 0x106, T }
          }
        end
      }
    end
  end)
  -- <summary>
  -- Defines a number of miscellaneous useful methods and constants.
  -- </summary>
  namespace.class("Util", function (namespace)
    local location, Debug, DistanceBetweenPoints, DistanceBetweenPoints1, DistanceBetweenPoints2, DistanceBetweenPoints3, AngleBetweenPoints1, AngleBetweenPoints2, 
    AngleBetweenPoints3, AngleBetweenPointsRad1, AngleBetweenPointsRad2, AngleBetweenPointsRad3, PositionWithPolarOffset, PositionWithPolarOffsetRad, IsAttackerBehindUnit, IsAttackerBehindUnit1, 
    IsAttackerBehindUnit2, IsAttackerInfrontUnit, EnumeratePlayers, EnumeratePlayers1, CreateDamageText, CreateFloatText, GetZ, static
    static = function (this)
      location = Location(0, 0)
    end
    -- <summary>
    -- Outputs the given data as text to the local player at the default position.
    -- </summary>
    Debug = function (obj)
      DisplayTextToPlayer(GetLocalPlayer(), 0, 0, System.ObjectToString(obj))
    end
    -- <summary>
    -- Calculates the distance from (<paramref name="x1" />, <paramref name="y1" />) to (<paramref name="x2" />, <paramref name="y2" />).
    -- </summary>
    DistanceBetweenPoints = function (x1, y1, x2, y2)
      local num = x1 - x2
      local num2 = y1 - y2
      return SquareRoot(num * num + num2 * num2)
    end
    -- <summary>
    -- Calculates the distance from <paramref name="source" /> unit to (<paramref name="x2" />, <paramref name="y2" />).
    -- </summary>
    DistanceBetweenPoints1 = function (source, x2, y2)
      local num = GetUnitX(source) - x2
      local num2 = GetUnitY(source) - y2
      return SquareRoot(num * num + num2 * num2)
    end
    -- <summary>
    -- Calculates the distance from (<paramref name="x1" />, <paramref name="y1" />) to <paramref name="target" /> unit.
    -- </summary>
    DistanceBetweenPoints2 = function (x1, y1, target)
      local num = x1 - GetUnitX(target)
      local num2 = y1 - GetUnitY(target)
      return SquareRoot(num * num + num2 * num2)
    end
    -- <summary>
    -- Calculates the distance from <paramref name="source" /> unit to <paramref name="target" /> unit.
    -- </summary>
    DistanceBetweenPoints3 = function (source, target)
      local num = GetUnitX(source) - GetUnitX(target)
      local num2 = GetUnitY(source) - GetUnitY(target)
      return SquareRoot(num * num + num2 * num2)
    end
    -- <summary>
    -- Calculates the angle in degrees from <paramref name="source" /> unit to (<paramref name="x2" />, <paramref name="y2" />).
    -- </summary>
    AngleBetweenPoints1 = function (source, x2, y2)
      return 180 + 57.2957764 --[[180f / (float)Math.PI]] * Atan2(GetUnitY(source) - y2, GetUnitX(source) - x2)
    end
    -- <summary>
    -- Calculates the angle in degrees from (<paramref name="x1" />, <paramref name="y1" />) to <paramref name="target" /> unit.
    -- </summary>
    AngleBetweenPoints2 = function (x1, y1, target)
      return 180 + 57.2957764 --[[180f / (float)Math.PI]] * Atan2(y1 - GetUnitY(target), x1 - GetUnitX(target))
    end
    -- <summary>
    -- Calculates the angle in degrees from <paramref name="source" /> unit to <paramref name="target" /> unit.
    -- </summary>
    AngleBetweenPoints3 = function (source, target)
      return 180 + 57.2957764 --[[180f / (float)Math.PI]] * Atan2(GetUnitY(source) - GetUnitY(target), GetUnitX(source) - GetUnitX(target))
    end
    -- <summary>
    -- Calculates the angle in radians from <paramref name="source" /> unit to (<paramref name="x2" />, <paramref name="y2" />).
    -- </summary>
    AngleBetweenPointsRad1 = function (source, x2, y2)
      return 3.14159274 --[[(float)Math.PI]] + Atan2(GetUnitY(source) - y2, GetUnitX(source) - x2)
    end
    -- <summary>
    -- Calculates the angle in radians from (<paramref name="x1" />, <paramref name="y1" />) to <paramref name="target" /> unit.
    -- </summary>
    AngleBetweenPointsRad2 = function (x1, y1, target)
      return 3.14159274 --[[(float)Math.PI]] + Atan2(y1 - GetUnitY(target), x1 - GetUnitX(target))
    end
    -- <summary>
    -- Calculates the angle in radians from <paramref name="source" /> unit to <paramref name="target" /> unit.
    -- </summary>
    AngleBetweenPointsRad3 = function (source, target)
      return 3.14159274 --[[(float)Math.PI]] + Atan2(GetUnitY(source) - GetUnitY(target), GetUnitX(source) - GetUnitX(target))
    end
    -- <summary>
    -- Calculates a point that is the given <paramref name="offset" /> away from (<paramref name="x" />, <paramref name="y" />) at the target <paramref name="degrees" />.
    -- </summary>
    PositionWithPolarOffset = function (x, y, offset, degrees)
      return System.ValueTuple(x + offset * Cos(0.0174532924 --[[(float)Math.PI / 180f]] * degrees), y + offset * Sin(0.0174532924 --[[(float)Math.PI / 180f]] * degrees))
    end
    -- <summary>
    -- Calculates a point that is the given <paramref name="offset" /> away from (<paramref name="x" />, <paramref name="y" />) at the target <paramref name="radians" />.
    -- </summary>
    PositionWithPolarOffsetRad = function (x, y, offset, radians)
      return System.ValueTuple(x + offset * Cos(radians), y + offset * Sin(radians))
    end
    -- <summary>
    -- <para>Determines whether the attacker is behind the attacked with the given tolerance in degrees.</para>
    -- <para>A tolerance of 360 would mean the target can be attacked from anywhere while being considered "behind".</para>
    -- </summary>
    -- <param name="attacker">The unit performing the attack.</param>
    -- <param name="attacked">The unit being attacked.</param>
    -- <param name="tolerance">In degrees.</param>
    IsAttackerBehindUnit = function (attacker, attacked, tolerance)
      return IsAttackerBehindUnit1(GetUnitX(attacker), GetUnitY(attacker), attacked, tolerance)
    end
    -- <summary>
    -- <para>Determines whether the attacker is behind the attacked with the given tolerance in degrees.</para>
    -- <para>A tolerance of 360 would mean the target can be attacked from anywhere while being considered "behind".</para>
    -- </summary>
    -- <param name="attackerX">The X position of the attacker.</param>
    -- <param name="attackerY">The Y position of the attacker.</param>
    -- <param name="attacked">The unit being attacked.</param>
    -- <param name="tolerance">In degrees.</param>
    IsAttackerBehindUnit1 = function (attackerX, attackerY, attacked, tolerance)
      return IsAttackerBehindUnit2((180 + (57.2957764 * Atan2(attackerY - GetUnitY(attacked), attackerX - GetUnitX(attacked)))), attacked, tolerance)
    end
    -- <summary>
    -- <para>Determines whether the attacker is behind the attacked with the given tolerance in degrees.</para>
    -- <para>A tolerance of 360 would mean the target can be attacked from anywhere while being considered "behind".</para>
    -- </summary>
    -- <param name="attackerAngle">The angle of the attacker.</param>
    -- <param name="attacked">The unit being attacked.</param>
    -- <param name="tolerance">In degrees.</param>
    IsAttackerBehindUnit2 = function (attackerAngle, attacked, tolerance)
      local unitFacing = GetUnitFacing(attacked)
      local num = 360 - 0.5 * tolerance
      local num2 = 0.5 * tolerance
      local num3 = math.Abs(attackerAngle - unitFacing)
      if not (num3 < num2) then
        return num3 > num
      end
      return true
    end
    -- <summary>
    -- <para>Determines whether the attacker is in front of the attacked with the given tolerance in degrees.</para>
    -- <para>A tolerance of 360 means the target can be attacked from anywhere while being considered "infront".</para>
    -- </summary>
    -- <param name="attacker">The unit performing the attack.</param>
    -- <param name="attacked">The unit being attacked.</param>
    -- <param name="tolerance">In degrees.</param>
    IsAttackerInfrontUnit = function (attacker, attacked, tolerance)
      local num = (180 + (57.2957764 * Atan2(GetUnitY(attacked) - GetUnitY(attacker), GetUnitX(attacked) - GetUnitX(attacker))))
      local unitFacing = GetUnitFacing(attacked)
      local num2 = 360 - 0.5 * tolerance
      local num3 = 0.5 * tolerance
      local num4 = math.Abs(num - unitFacing)
      if not (num4 < num3) then
        return num4 > num2
      end
      return true
    end
    -- <summary>
    -- Returns all players matching the given <paramref name="playerslotstate" /> and <paramref name="mapcontrol" />.
    -- </summary>
    -- <param name="playerslotstate">The <see cref="T:WCSharp.Api.playerslotstate" /> that players should have. Defaults to <see cref="F:WCSharp.Api.Common.PLAYER_SLOT_STATE_PLAYING" />.</param>
    -- <param name="mapcontrol">The <see cref="T:WCSharp.Api.mapcontrol" /> that players should have. Defaults to <see cref="F:WCSharp.Api.Common.MAP_CONTROL_USER" />.</param>
    -- <returns></returns>
    EnumeratePlayers = function (playerslotstate, mapcontrol)
      return System.yieldIEnumerable(function (playerslotstate, mapcontrol)
        if playerslotstate == nil then
          playerslotstate = PLAYER_SLOT_STATE_PLAYING
        end
        if mapcontrol == nil then
          mapcontrol = MAP_CONTROL_USER
        end
        local maxPlayers = GetBJMaxPlayers()
        for i = 0, maxPlayers - 1 do
          local player = Player(i)
          if GetPlayerSlotState(player) == playerslotstate and GetPlayerController(player) == mapcontrol then
            System.yield(player)
          end
        end
      end, WCSharpApi.player, playerslotstate, mapcontrol)
    end
    -- <summary>
    -- Returns all players.
    -- </summary>
    EnumeratePlayers1 = function ()
      return System.yieldIEnumerable(function ()
        local maxPlayers = GetBJMaxPlayers()
        for i = 0, maxPlayers - 1 do
          System.yield(Player(i))
        end
      end, WCSharpApi.player)
    end
    -- <summary>
    -- Creates a "damage text" style of floating text at the target location.
    -- <para>Size is expected to be GUI-like values (it gets multiplied by <see cref="F:WCSharp.Shared.Util.TEXT_SIZE_MULTIPLIER" />).</para>
    -- <para>By default, the text will start to fade after 2 seconds, and be fully removed after 4 seconds.</para>
    -- </summary>
    -- <param name="damage">The damage number to display (will round to whole numbers).</param>
    -- <param name="isHeal">If true, will color green.</param>
    -- <param name="isCritical">If true, will add an exclamation mark.</param>
    -- <param name="size">The size of the text. See GUI.</param>
    -- <param name="x">The x position that the text should be created at.</param>
    -- <param name="y">The y position that the text should be created at.</param>
    -- <param name="height">The height that the text should be created at, relative to the target (x, y) position.</param>
    CreateDamageText = function (damage, isHeal, isCritical, size, x, y, height)
      local texttag = CreateTextTag()
      local text = System.ToInt32(damage) .. ""
      if isHeal then
        SetTextTagColor(texttag, 0, 255, 0, 255)
        text = "+" .. System.toString(text)
      else
        SetTextTagColor(texttag, 255, 0, 0, 255)
      end
      if isCritical then
        text = System.toString(text) .. "!"
      end
      SetTextTagText(texttag, text, size * 0.0023)
      SetTextTagPos(texttag, x, y, height)
      SetTextTagAge(texttag, 0)
      SetTextTagVelocity(texttag, 0, 0.049921878)
      SetTextTagLifespan(texttag, 4)
      SetTextTagFadepoint(texttag, 2)
      SetTextTagPermanent(texttag, false)
      SetTextTagVisibility(texttag, true)
      return texttag
    end
    -- <summary>
    -- Creates a floating text at the target location.
    -- <para>Size is expected to be GUI-like values (it gets multiplied by <see cref="F:WCSharp.Shared.Util.TEXT_SIZE_MULTIPLIER" />).</para>
    -- <para>By default, the text will start to fade after 2 seconds, and be fully removed after 4 seconds.</para>
    -- </summary>
    -- <param name="text">The text to display.</param>
    -- <param name="size">The size of the text. See GUI.</param>
    -- <param name="x">The x position that the text should be created at.</param>
    -- <param name="y">The y position that the text should be created at.</param>
    -- <param name="height">The height that the text should be created at, relative to the target (x, y) position.</param>
    -- <param name="red">The red value of the text. Should be in the range of 0 (none) to 255 (pure red).</param>
    -- <param name="green">The green value of the text. Should be in the range of 0 (none) to 255 (pure green).</param>
    -- <param name="blue">The blue value of the text. Should be in the range of 0 (none) to 255 (pure blue).</param>
    CreateFloatText = function (text, size, x, y, height, red, green, blue)
      local texttag = CreateTextTag()
      SetTextTagText(texttag, text, size * 0.0023)
      SetTextTagPos(texttag, x, y, height)
      SetTextTagAge(texttag, 0)
      SetTextTagColor(texttag, red, green, blue, 255)
      SetTextTagVelocity(texttag, 0, 0.049921878)
      SetTextTagLifespan(texttag, 4)
      SetTextTagFadepoint(texttag, 2)
      SetTextTagPermanent(texttag, false)
      SetTextTagVisibility(texttag, true)
      return texttag
    end
    -- <summary>
    -- Retrieves the LocationZ at the given (X, Y) coordinates.
    -- <para>Re-uses an internal location to provide a faster and easier solution to <see cref="M:WCSharp.Api.Common.GetLocationZ(WCSharp.Api.location)" />.</para>
    -- </summary>
    GetZ = function (x, y)
      MoveLocation(location, x, y)
      return GetLocationZ(location)
    end
    return {
      Debug = Debug,
      DistanceBetweenPoints = DistanceBetweenPoints,
      DistanceBetweenPoints1 = DistanceBetweenPoints1,
      DistanceBetweenPoints2 = DistanceBetweenPoints2,
      DistanceBetweenPoints3 = DistanceBetweenPoints3,
      AngleBetweenPoints1 = AngleBetweenPoints1,
      AngleBetweenPoints2 = AngleBetweenPoints2,
      AngleBetweenPoints3 = AngleBetweenPoints3,
      AngleBetweenPointsRad1 = AngleBetweenPointsRad1,
      AngleBetweenPointsRad2 = AngleBetweenPointsRad2,
      AngleBetweenPointsRad3 = AngleBetweenPointsRad3,
      PositionWithPolarOffset = PositionWithPolarOffset,
      PositionWithPolarOffsetRad = PositionWithPolarOffsetRad,
      IsAttackerBehindUnit = IsAttackerBehindUnit,
      IsAttackerBehindUnit1 = IsAttackerBehindUnit1,
      IsAttackerBehindUnit2 = IsAttackerBehindUnit2,
      IsAttackerInfrontUnit = IsAttackerInfrontUnit,
      EnumeratePlayers = EnumeratePlayers,
      EnumeratePlayers1 = EnumeratePlayers1,
      CreateDamageText = CreateDamageText,
      CreateFloatText = CreateFloatText,
      GetZ = GetZ,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "location", 0x9, out.WCSharp.Api.location }
          },
          methods = {
            { "AngleBetweenPoints", 0x38E, AngleBetweenPoints1, out.WCSharp.Api.unit, System.Single, System.Single, System.Single },
            { "AngleBetweenPoints", 0x38E, AngleBetweenPoints2, System.Single, System.Single, out.WCSharp.Api.unit, System.Single },
            { "AngleBetweenPoints", 0x28E, AngleBetweenPoints3, out.WCSharp.Api.unit, out.WCSharp.Api.unit, System.Single },
            { "AngleBetweenPointsRad", 0x28E, AngleBetweenPointsRad3, out.WCSharp.Api.unit, out.WCSharp.Api.unit, System.Single },
            { "AngleBetweenPointsRad", 0x38E, AngleBetweenPointsRad2, System.Single, System.Single, out.WCSharp.Api.unit, System.Single },
            { "AngleBetweenPointsRad", 0x38E, AngleBetweenPointsRad1, out.WCSharp.Api.unit, System.Single, System.Single, System.Single },
            { "CreateDamageText", 0x78E, CreateDamageText, System.Single, System.Boolean, System.Boolean, System.Single, System.Single, System.Single, System.Single, out.WCSharp.Api.texttag },
            { "CreateFloatText", 0x88E, CreateFloatText, System.String, System.Single, System.Single, System.Single, System.Single, System.Int32, System.Int32, System.Int32, out.WCSharp.Api.texttag },
            { "Debug", 0x10E, Debug, System.Object },
            { "DistanceBetweenPoints", 0x38E, DistanceBetweenPoints2, System.Single, System.Single, out.WCSharp.Api.unit, System.Single },
            { "DistanceBetweenPoints", 0x38E, DistanceBetweenPoints1, out.WCSharp.Api.unit, System.Single, System.Single, System.Single },
            { "DistanceBetweenPoints", 0x48E, DistanceBetweenPoints, System.Single, System.Single, System.Single, System.Single, System.Single },
            { "DistanceBetweenPoints", 0x28E, DistanceBetweenPoints3, out.WCSharp.Api.unit, out.WCSharp.Api.unit, System.Single },
            { "EnumeratePlayers", 0x28E, EnumeratePlayers, out.WCSharp.Api.playerslotstate, out.WCSharp.Api.mapcontrol, System.IEnumerable_1(out.WCSharp.Api.player) },
            { "EnumeratePlayers", 0x8E, EnumeratePlayers1, System.IEnumerable_1(out.WCSharp.Api.player) },
            { "GetZ", 0x28E, GetZ, System.Single, System.Single, System.Single },
            { "IsAttackerBehindUnit", 0x38E, IsAttackerBehindUnit, out.WCSharp.Api.unit, out.WCSharp.Api.unit, System.Single, System.Boolean },
            { "IsAttackerBehindUnit", 0x48E, IsAttackerBehindUnit1, System.Single, System.Single, out.WCSharp.Api.unit, System.Single, System.Boolean },
            { "IsAttackerBehindUnit", 0x38E, IsAttackerBehindUnit2, System.Single, out.WCSharp.Api.unit, System.Single, System.Boolean },
            { "IsAttackerInfrontUnit", 0x38E, IsAttackerInfrontUnit, out.WCSharp.Api.unit, out.WCSharp.Api.unit, System.Single, System.Boolean },
            { "PositionWithPolarOffset", 0x48E, PositionWithPolarOffset, System.Single, System.Single, System.Single, System.Single, System.ValueTuple },
            { "PositionWithPolarOffsetRad", 0x48E, PositionWithPolarOffsetRad, System.Single, System.Single, System.Single, System.Single, System.ValueTuple }
          },
          class = { "Util", 0x3E }
        }
      end
    }
  end)
end)
System.namespace("WCSharp.Shared.Extensions", function (namespace)
  -- <summary>
  -- Extension class that defines a number of methods to simplify working with Warcraft III groups.
  -- </summary>
  namespace.class("GroupExtensions", function (namespace)
    local Enumerate, Enumerate1, FirstOrDefault, ToList, ToList1, ToHashSet, ToHashSet1
    -- <summary>
    -- Enumerates all units within the <paramref name="group" />. This will empty the group in the process.
    -- </summary>
    Enumerate = function (group)
      return System.yieldIEnumerable(function (group)
        while true do
          local unit = FirstOfGroup(group)
          if unit == nil then
            break
          end
          GroupRemoveUnit(group, unit)
          System.yield(unit)
        end
      end, WCSharpApi.unit, group)
    end
    -- <summary>
    -- Enumerates all units within the group that match the given filter. This will empty the group in the process.
    -- </summary>
    Enumerate1 = function (group, filter)
      return System.yieldIEnumerable(function (group, filter)
        while true do
          local unit = FirstOfGroup(group)
          if unit == nil then
            break
          end
          GroupRemoveUnit(group, unit)
          if filter(unit) then
            System.yield(unit)
          end
        end
      end, WCSharpApi.unit, group, filter)
    end
    -- <summary>
    -- Finds the first unit in the <paramref name="group" /> that matches the given <paramref name="predicate" />.
    -- <para>If you need to call this more than once, use ToList and Linq methods instead.</para>
    -- </summary>
    FirstOrDefault = function (group, predicate)
      local num = 0
      local unit
      while true do
        unit = BlzGroupUnitAt(group, num)
        if unit == nil then
          return nil
        end
        if predicate(unit) then
          break
        end
        num = num + 1
      end
      return unit
    end
    -- <summary>
    -- Returns a <see cref="T:System.Collections.Generic.List`1" /> containing all units within the given <paramref name="group" />.
    -- </summary>
    ToList = function (group)
      local num = BlzGroupGetSize(group)
      local list = Listunit()
      for i = 0, num - 1 do
        list:Add(BlzGroupUnitAt(group, i))
      end
      return list
    end
    -- <summary>
    -- Returns a <see cref="T:System.Collections.Generic.List`1" /> containing all units within the given <paramref name="group" /> that match the <paramref name="predicate" />.
    -- </summary>
    ToList1 = function (group, predicate)
      local num = BlzGroupGetSize(group)
      local list = Listunit()
      for i = 0, num - 1 do
        local unit = BlzGroupUnitAt(group, i)
        if predicate(unit) then
          list:Add(unit)
        end
      end
      return list
    end
    -- <summary>
    -- Returns a <see cref="T:System.Collections.Generic.HashSet`1" /> containing all units within the given <paramref name="group" />.
    -- </summary>
    ToHashSet = function (group)
      local num = BlzGroupGetSize(group)
      local hashSet = HashSetunit()
      for i = 0, num - 1 do
        hashSet:Add(BlzGroupUnitAt(group, i))
      end
      return hashSet
    end
    -- <summary>
    -- Returns a <see cref="T:System.Collections.Generic.HashSet`1" /> containing all units within the given <paramref name="group" /> that match the <paramref name="predicate" />.
    -- </summary>
    ToHashSet1 = function (group, predicate)
      local num = BlzGroupGetSize(group)
      local hashSet = HashSetunit()
      for i = 0, num - 1 do
        local unit = BlzGroupUnitAt(group, i)
        if predicate(unit) then
          hashSet:Add(unit)
        end
      end
      return hashSet
    end
    return {
      Enumerate = Enumerate,
      Enumerate1 = Enumerate1,
      FirstOrDefault = FirstOrDefault,
      ToList = ToList,
      ToList1 = ToList1,
      ToHashSet = ToHashSet,
      ToHashSet1 = ToHashSet1,
      __metadata__ = function (out)
        return {
          methods = {
            { "Enumerate", 0x18E, Enumerate, out.WCSharp.Api.group, System.IEnumerable_1(out.WCSharp.Api.unit) },
            { "Enumerate", 0x28E, Enumerate1, out.WCSharp.Api.group, System.Delegate(out.WCSharp.Api.unit, System.Boolean), System.IEnumerable_1(out.WCSharp.Api.unit) },
            { "FirstOrDefault", 0x28E, FirstOrDefault, out.WCSharp.Api.group, System.Delegate(out.WCSharp.Api.unit, System.Boolean), out.WCSharp.Api.unit },
            { "ToHashSet", 0x18E, ToHashSet, out.WCSharp.Api.group, System.HashSet(out.WCSharp.Api.unit) },
            { "ToHashSet", 0x28E, ToHashSet1, out.WCSharp.Api.group, System.Delegate(out.WCSharp.Api.unit, System.Boolean), System.HashSet(out.WCSharp.Api.unit) },
            { "ToList", 0x18E, ToList, out.WCSharp.Api.group, System.List(out.WCSharp.Api.unit) },
            { "ToList", 0x28E, ToList1, out.WCSharp.Api.group, System.Delegate(out.WCSharp.Api.unit, System.Boolean), System.List(out.WCSharp.Api.unit) }
          },
          class = { "GroupExtensions", 0x3E }
        }
      end
    }
  end)
  -- <summary>
  -- Extension class that defines a number of methods to simplify working with lists, in particular within context of Warcraft III.
  -- </summary>
  namespace.class("IListExtensions", function (namespace)
    local IterateWithRemoval
    -- <summary>
    -- Due to C# to Lua conversion difficulties, standard ways of enumerating a list while removing items from it may not work.
    -- This extension method will safely iterate the list, and remove any which return false.
    -- <para>Alternatively, you can use a standard reverse order iteration, as this will still work correctly.</para>
    -- </summary>
    IterateWithRemoval = function (list, func, T)
      local num = list:getCount()
      local num2 = 0
      while num2 < num do
        local continue
        repeat
          if func(list:get(num2), T) then
            num2 = num2 + 1
            continue = true
            break
          end
          num = num - 1
          list:set(num2, list:get(num))
          list:RemoveAt(num)
          continue = true
        until 1
        if not continue then
          break
        end
      end
    end
    return {
      IterateWithRemoval = IterateWithRemoval,
      __metadata__ = function (out)
        return {
          methods = {
            { "IterateWithRemoval", 0x1020E, IterateWithRemoval, function (T) return System.IList_1(T), System.Delegate(T, System.Boolean) end }
          },
          class = { "IListExtensions", 0x3E }
        }
      end
    }
  end)
end)
System.namespace("WCSharp.Shared.Data", function (namespace)
  -- <summary>
  -- Data class for a simple point coordinate.
  -- </summary>
  namespace.class("Point", function (namespace)
    local op_Equality, op_Inequality, Equals, EqualsObj, GetHashCode, class, __ctor__
    -- <summary>
    -- Creates a new point at the given X and Y cooridnates.
    -- </summary>
    __ctor__ = function (this, x, y)
      this.X = x
      this.Y = y
    end
    -- <summary>
    -- True if the X and Y coordinates of the two points match.
    -- </summary>
    op_Equality = function (point1, point2)
      local default = point1
      if default ~= nil then
        default = Equals(default, point2)
      end
      local extern = default
      if extern == nil then
        extern = (point2 == nil)
      end
      return extern
    end
    -- <summary>
    -- True if the X and Y coordinates of the two points do not match.
    -- </summary>
    op_Inequality = function (point1, point2)
      return not (op_Equality(point1, point2))
    end
    -- <inheritdoc />
    Equals = function (this, other)
      if other ~= nil and this.X == other.X then
        return this.Y == other.Y
      end
      return false
    end
    -- <inheritdoc />
    EqualsObj = function (this, obj)
      local other = obj
      if System.is(other, class) then
        return Equals(this, other)
      end
      return false
    end
    -- <inheritdoc />
    GetHashCode = function (this)
      return System.HashCode.Combine(this.X, this.Y, System.Single, System.Single)
    end
    class = {
      base = function (out)
        return {
          System.IEquatable_1(out.WCSharp.Shared.Data.Point)
        }
      end,
      X = 0,
      Y = 0,
      op_Equality = op_Equality,
      op_Inequality = op_Inequality,
      Equals = Equals,
      EqualsObj = EqualsObj,
      GetHashCode = GetHashCode,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "X", 0x6, System.Single },
            { "Y", 0x6, System.Single }
          },
          methods = {
            { ".ctor", 0x206, nil, System.Single, System.Single },
            { "Equals", 0x186, Equals, class, System.Boolean },
            { "Equals", 0x186, EqualsObj, System.Object, System.Boolean },
            { "GetHashCode", 0x86, GetHashCode, System.Int32 }
          },
          class = { "Point", 0x6 }
        }
      end
    }
    return class
  end)
  -- <summary>
  -- Data class that mimics the functions of the standard Rect.cs while providing access to WC3 rect and region representations.
  -- </summary>
  namespace.class("Rectangle", function (namespace)
    local WorldBounds, getRect, getRegion, getWidth, getHeight, getTopLeft, getTopRight, getBottomLeft, 
    getBottomRight, getCenter, getIsEmpty, op_Equality, op_Inequality, GetRandomPoint, Contains, Contains1, 
    Contains2, IntersectsWith, Union, Intersect, Offset, Inflate, Scale, Dispose, 
    Equals, EqualsObj, GetHashCode, class, static, __ctor1__, __ctor2__, __ctor3__
    static = function (this)
      WorldBounds = class(GetWorldBounds())
      this.WorldBounds = WorldBounds
    end
    -- <summary>
    -- Creates a new rectangle using the given Warcraft III rect as a base.
    -- </summary>
    __ctor1__ = function (this, rect)
      this.Left = GetRectMinX(rect)
      this.Bottom = GetRectMinY(rect)
      this.Right = GetRectMaxX(rect)
      this.Top = GetRectMaxY(rect)
      this.rect = rect
    end
    -- <summary>
    -- Creates a new rectangle with the given set of coordinates.
    -- </summary>
    __ctor2__ = function (this, left, bottom, right, top)
      this.Left = math.Min(left, right)
      this.Bottom = math.Min(bottom, top)
      this.Right = right
      this.Top = top
    end
    -- <summary>
    -- Creates a Rectangle that encompasses all of the given points within its surface area.
    -- </summary>
    __ctor3__ = function (this, points)
      local list = Linq.ToList(points)
      if #list ~= 0 then
        this.Left = WorldBounds.Right
        this.Bottom = WorldBounds.Top
        this.Right = WorldBounds.Left
        this.Top = WorldBounds.Bottom
        for i = 0, #list - 1 do
          local point = list:get(i)
          this.Left = math.Min(this.Left, point.X)
          this.Bottom = math.Min(this.Bottom, point.Y)
          this.Right = math.Max(this.Right, point.X)
          this.Top = math.Max(this.Top, point.Y)
        end
      end
    end
    getRect = function (this)
      if this.rect == nil then
        this.rect = Rect(this.Left, this.Bottom, this.Right, this.Top)
      end
      return this.rect
    end
    getRegion = function (this)
      if this.region == nil then
        this.region = CreateRegion()
        RegionAddRect(this.region, getRect(this))
      end
      return this.region
    end
    getWidth = function (this)
      return this.Right - this.Left
    end
    getHeight = function (this)
      return this.Top - this.Bottom
    end
    getTopLeft = function (this)
      return WCSharpSharedData.Point(this.Left, this.Top)
    end
    getTopRight = function (this)
      return WCSharpSharedData.Point(this.Right, this.Top)
    end
    getBottomLeft = function (this)
      return WCSharpSharedData.Point(this.Left, this.Bottom)
    end
    getBottomRight = function (this)
      return WCSharpSharedData.Point(this.Right, this.Bottom)
    end
    getCenter = function (this)
      return WCSharpSharedData.Point((this.Left + this.Right) / 2, (this.Bottom + this.Top) / 2)
    end
    getIsEmpty = function (this)
      if getWidth(this) ~= 0 then
        return getHeight(this) == 0
      end
      return true
    end
    -- <summary>
    -- True if all coordinates of <paramref name="rect1" /> match those of <paramref name="rect2" />.
    -- </summary>
    op_Equality = function (rect1, rect2)
      local default = rect1
      if default ~= nil then
        default = Equals(default, rect2)
      end
      local extern = default
      if extern == nil then
        extern = (rect2 == nil)
      end
      return extern
    end
    -- <summary>
    -- True if any coordinates of <paramref name="rect1" /> do not match those of <paramref name="rect2" />.
    -- </summary>
    op_Inequality = function (rect1, rect2)
      return not (op_Equality(rect1, rect2))
    end
    -- <summary>
    -- Retrieves a random (inclusive) point in this rectangle.
    -- </summary>
    GetRandomPoint = function (this)
      return WCSharpSharedData.Point(GetRandomReal(this.Left, this.Right), GetRandomReal(this.Bottom, this.Top))
    end
    -- <summary>
    -- Returns whether the given coordinates are located within this Rectangle.
    -- </summary>
    -- <param name="x"></param>
    -- <param name="y"></param>
    -- <returns></returns>
    Contains = function (this, x, y)
      if this.Left <= x and this.Bottom <= y and this.Right >= x then
        return this.Top >= y
      end
      return false
    end
    -- <summary>
    -- Returns whether the given Point is located within this Rectangle.
    -- </summary>
    -- <param name="point"></param>
    -- <returns></returns>
    Contains1 = function (this, point)
      return Contains(this, point.X, point.Y)
    end
    -- <summary>
    -- Returns whether the given Rectangle is located fully within this Rectangle.
    -- </summary>
    Contains2 = function (this, rect)
      if this.Left <= rect.Left and this.Bottom <= rect.Bottom and this.Right >= rect.Right then
        return this.Top >= rect.Top
      end
      return false
    end
    -- <summary>
    -- Returns whether this Rectangle has any point where it touches or overlaps with the given Rectangle.
    -- </summary>
    IntersectsWith = function (this, rect)
      if rect.Left <= this.Right and rect.Right >= this.Left and rect.Top <= this.Bottom then
        return rect.Bottom >= this.Top
      end
      return false
    end
    -- <summary>
    -- Returns a new Rectangle that represents the union of the two given Rectangles. Meaning, a new square that can encompass both.
    -- </summary>
    Union = function (rect1, rect2)
      return System.new(class, 2, math.Min(rect1.Left, rect2.Left), math.Min(rect1.Bottom, rect2.Bottom), math.Max(rect1.Right, rect2.Right), math.Max(rect1.Top, rect2.Top))
    end
    -- <summary>
    -- Returns a new Rectangle that represents the intersection of the two given Rectangles. Meaning, the area in which they overlap.
    -- </summary>
    Intersect = function (rect1, rect2)
      return System.new(class, 2, math.Max(rect1.Left, rect2.Left), math.Max(rect1.Bottom, rect2.Bottom), math.Min(rect1.Right, rect2.Right), math.Min(rect1.Top, rect2.Top))
    end
    -- <summary>
    -- Returns a new Rectangle that is offset by the given coordinates, using <see cref="P:WCSharp.Shared.Data.Rectangle.TopLeft" /> as the origin for movement.
    -- </summary>
    Offset = function (rect, x, y)
      return System.new(class, 2, rect.Left + x, rect.Bottom + y, rect.Right + x, rect.Top + y)
    end
    -- <summary>
    -- Returns a new Rectangle that is inflated by the given width and height in all directions.
    -- <para>The increase on each side is half the width/height.</para>
    -- </summary>
    Inflate = function (rect, width, height)
      return System.new(class, 2, rect.Left - width / 2, rect.Bottom - height / 2, rect.Right + width / 2, rect.Top + height / 2)
    end
    -- <summary>
    -- Returns a new Rectangle that is scaled up by the given scaling factors.
    -- </summary>
    Scale = function (rect, scaleWidth, scaleHeight)
      return Inflate(rect, getWidth(rect) * scaleWidth / 2, getWidth(rect) * scaleHeight / 2)
    end
    -- <summary>
    -- Must be called in order to safely garbage collect <see cref="P:WCSharp.Shared.Data.Rectangle.Rect" /> and <see cref="P:WCSharp.Shared.Data.Rectangle.Region" />.
    -- </summary>
    Dispose = function (this)
      if this.rect ~= nil then
        RemoveRect(this.rect)
        this.rect = nil
      end
      if this.region ~= nil then
        RemoveRegion(this.region)
        this.region = nil
      end
    end
    -- <inheritdoc />
    Equals = function (this, other)
      if other ~= nil and this.Left == other.Left and this.Bottom == other.Bottom and this.Right == other.Right then
        return this.Top == other.Top
      end
      return false
    end
    -- <inheritdoc />
    EqualsObj = function (this, obj)
      local other = obj
      if System.is(other, class) then
        return Equals(this, other)
      end
      return false
    end
    -- <inheritdoc />
    GetHashCode = function (this)
      return System.HashCode.Combine(this.Left, this.Bottom, this.Right, this.Top, System.Single, System.Single, System.Single, System.Single)
    end
    class = {
      base = function (out)
        return {
          System.IDisposable,
          System.IEquatable_1(out.WCSharp.Shared.Data.Rectangle)
        }
      end,
      Left = 0,
      Bottom = 0,
      Right = 0,
      Top = 0,
      getRect = getRect,
      getRegion = getRegion,
      getWidth = getWidth,
      getHeight = getHeight,
      getTopLeft = getTopLeft,
      getTopRight = getTopRight,
      getBottomLeft = getBottomLeft,
      getBottomRight = getBottomRight,
      getCenter = getCenter,
      getIsEmpty = getIsEmpty,
      op_Equality = op_Equality,
      op_Inequality = op_Inequality,
      GetRandomPoint = GetRandomPoint,
      Contains = Contains,
      Contains1 = Contains1,
      Contains2 = Contains2,
      IntersectsWith = IntersectsWith,
      Union = Union,
      Intersect = Intersect,
      Offset = Offset,
      Inflate = Inflate,
      Scale = Scale,
      Dispose = Dispose,
      Equals = Equals,
      EqualsObj = EqualsObj,
      GetHashCode = GetHashCode,
      static = static,
      __ctor__ = {
        __ctor1__,
        __ctor2__,
        __ctor3__
      },
      __metadata__ = function (out)
        return {
          fields = {
            { "rect", 0x1, out.WCSharp.Api.rect },
            { "region", 0x1, out.WCSharp.Api.region }
          },
          properties = {
            { "Bottom", 0x6, System.Single },
            { "BottomLeft", 0x206, out.WCSharp.Shared.Data.Point, getBottomLeft },
            { "BottomRight", 0x206, out.WCSharp.Shared.Data.Point, getBottomRight },
            { "Center", 0x206, out.WCSharp.Shared.Data.Point, getCenter },
            { "Height", 0x206, System.Single, getHeight },
            { "IsEmpty", 0x206, System.Boolean, getIsEmpty },
            { "Left", 0x6, System.Single },
            { "Rect", 0x206, out.WCSharp.Api.rect, getRect },
            { "Region", 0x206, out.WCSharp.Api.region, getRegion },
            { "Right", 0x6, System.Single },
            { "Top", 0x6, System.Single },
            { "TopLeft", 0x206, out.WCSharp.Shared.Data.Point, getTopLeft },
            { "TopRight", 0x206, out.WCSharp.Shared.Data.Point, getTopRight },
            { "Width", 0x206, System.Single, getWidth },
            { "WorldBounds", 0xE, class }
          },
          methods = {
            { ".ctor", 0x106, __ctor1__, out.WCSharp.Api.rect },
            { ".ctor", 0x406, __ctor2__, System.Single, System.Single, System.Single, System.Single },
            { ".ctor", 0x106, __ctor3__, System.IEnumerable_1(out.WCSharp.Shared.Data.Point) },
            { "Contains", 0x286, Contains, System.Single, System.Single, System.Boolean },
            { "Contains", 0x186, Contains1, out.WCSharp.Shared.Data.Point, System.Boolean },
            { "Contains", 0x186, Contains2, class, System.Boolean },
            { "Dispose", 0x6, Dispose },
            { "Equals", 0x186, Equals, class, System.Boolean },
            { "Equals", 0x186, EqualsObj, System.Object, System.Boolean },
            { "GetHashCode", 0x86, GetHashCode, System.Int32 },
            { "GetRandomPoint", 0x86, GetRandomPoint, out.WCSharp.Shared.Data.Point },
            { "Inflate", 0x38E, Inflate, class, System.Single, System.Single, class },
            { "Intersect", 0x28E, Intersect, class, class, class },
            { "IntersectsWith", 0x186, IntersectsWith, class, System.Boolean },
            { "Offset", 0x38E, Offset, class, System.Single, System.Single, class },
            { "Scale", 0x38E, Scale, class, System.Single, System.Single, class },
            { "Union", 0x28E, Union, class, class, class }
          },
          class = { "Rectangle", 0x6 }
        }
      end
    }
    return class
  end)
end)

end
do
local System = System
local Linq = System.Linq.Enumerable
local HashSetChar = System.HashSet(System.Char)
local WCSharpJson
local WCSharpShared
local WCSharpSync
local ListSyncPacket
local ListSyncHandler
local ListSyncTrigger
local DictInt32SyncMessage
System.import(function (out)
  WCSharpJson = WCSharp.Json
  WCSharpShared = WCSharp.Shared
  WCSharpSync = WCSharp.Sync
  ListSyncPacket = System.List(WCSharpSync.SyncPacket)
  ListSyncHandler = System.List(WCSharpSync.SyncHandler)
  ListSyncTrigger = System.List(WCSharpSync.SyncTrigger)
  DictInt32SyncMessage = System.Dictionary(System.Int32, WCSharpSync.SyncMessage)
end)
System.namespace("WCSharp.Sync", function (namespace)
  namespace.class("SyncHandler", function (namespace)
    local Create, class
    Create = function (action, T)
      local default = class()
      default.Action = function (x)
        action(System.cast(T, x), T)
      end
      default.InternalAction = action
      default.Type = System.typeof(T)
      return default
    end
    class = {
      Create = Create,
      __metadata__ = function (out)
        return {
          properties = {
            { "Action", 0x6, System.Delegate(System.Object, System.Void) },
            { "InternalAction", 0x6, System.Object },
            { "Type", 0x6, System.Type }
          },
          methods = {
            { "Create", 0x1018E, Create, function (T) return System.Delegate(T, System.Void), class end }
          },
          class = { "SyncHandler", 0x4 }
        }
      end
    }
    return class
  end)
  namespace.class("SyncHeader", function (namespace)
    return {
      PlayerId = 0,
      PacketCount = 0,
      __metadata__ = function (out)
        return {
          properties = {
            { "PacketCount", 0x6, System.Int32 },
            { "PlayerId", 0x6, System.Int32 },
            { "TypeName", 0x6, System.String }
          },
          class = { "SyncHeader", 0x4 }
        }
      end
    }
  end)
  namespace.class("SyncMessage", function (namespace)
    local getIsComplete, GetContents, __ctor__
    __ctor__ = function (this, header)
      this.SyncHeader = header
      this.Packets = ListSyncPacket()
    end
    getIsComplete = function (this)
      return this.SyncHeader.PacketCount == #this.Packets
    end
    GetContents = function (this)
      local stringBuilder = System.StringBuilder()
      for i = 0, #this.Packets - 1 do
        stringBuilder:Append(this.Packets:get(i).M)
      end
      return stringBuilder:ToString()
    end
    return {
      getIsComplete = getIsComplete,
      GetContents = GetContents,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          properties = {
            { "IsComplete", 0x206, System.Boolean, getIsComplete },
            { "Packets", 0x6, System.List(out.WCSharp.Sync.SyncPacket) },
            { "SyncHeader", 0x6, out.WCSharp.Sync.SyncHeader }
          },
          methods = {
            { ".ctor", 0x106, nil, out.WCSharp.Sync.SyncHeader },
            { "GetContents", 0x86, GetContents, System.String }
          },
          class = { "SyncMessage", 0x4 }
        }
      end
    }
  end)
  -- <summary>
  -- Represents a single packet of 255 characters being sent via sync. To send as much as possible per packet, the property names are shortened.
  -- </summary>
  namespace.class("SyncPacket", function (namespace)
    return {
      P = 0,
      __metadata__ = function (out)
        return {
          properties = {
            { "M", 0x6, System.String },
            { "P", 0x6, System.Int32 }
          },
          class = { "SyncPacket", 0x4 }
        }
      end
    }
  end)
  -- <summary>
  -- The <see cref="T:WCSharp.Sync.SyncSystem" /> sets up a communication channel via the BlzSync functions and allows for the transfer of generically typed data
  -- across it. Data is automatically split into packets to allow for any amount of data to be transferred across.
  -- </summary>
  -- <remarks>
  -- This system reserves the sync prefixes __WCSharpSyncHeaders and __WCSharpSyncPackets. Nothing else should use these prefixes to send data.
  -- </remarks>
  -- This system is set up so that it can process a single message type per player simultaneously. This is based on the assumption that messages
  -- will never be interrupted midway during sending, and always arrive in the same order as they were sent (tests seem to confirm this).
  -- Tests also seem to confirm that messages from different players do not get mixed, but since it's hard to be certain without large scale tests
  -- the system is set up to process one message for each player at any time. If it is true that the player sequence is always the same, this
  -- could be skipped. But realistically, this only saves a few table lookups anyway, and the table is kept empty when not receiving, meaning the
  -- memory footprint is basically the same as well.
  namespace.class("SyncSystem", function (namespace)
    local syncHandlers, messages, escapeChars, syncTriggers, RegisterForPrefix, HandleSyncHeader, HandleSyncPacket, FinalizeMessage, 
    Send, BuildPackets, Subscribe, Unsubscribe, headerAction, packetAction, EnableDebug, static
    static = function (this)
      syncHandlers = ListSyncHandler()
      messages = DictInt32SyncMessage()
      local default = HashSetChar()
      default:Add(34 --[['"']])
      default:Add(92 --[['\\']])
      default:Add(8 --[['\b']])
      default:Add(12 --[['\f']])
      default:Add(10 --[['\n']])
      default:Add(13 --[['\r']])
      default:Add(9 --[['\t']])
      escapeChars = default
      local default = ListSyncTrigger()
      default:Add(RegisterForPrefix(HandleSyncHeader, "__WCSharpSyncHeaders"))
      default:Add(RegisterForPrefix(HandleSyncPacket, "__WCSharpSyncPackets"))
      syncTriggers = default
    end
    RegisterForPrefix = function (action, prefix)
      local trigger = CreateTrigger()
      local condition = Condition(action)
      TriggerAddCondition(trigger, condition)
      for _, item in System.each(WCSharpShared.Util.EnumeratePlayers1()) do
        BlzTriggerRegisterPlayerSyncEvent(trigger, item, prefix, false)
      end
      local default = WCSharpSync.SyncTrigger()
      default.Condition = condition
      default.Trigger = trigger
      return default
    end
    HandleSyncHeader = function ()
      local syncHeader = WCSharpJson.JsonConvert.Deserialize(BlzGetTriggerSyncData(), WCSharpSync.SyncHeader)
      local default, value = messages:TryGetValue(syncHeader.PlayerId, nil)
      if default then
        System.Console.WriteLine("ERROR: A new sync message of type " .. System.toString(syncHeader.TypeName) .. " was received for player " .. syncHeader.PlayerId .. " while still processing " .. System.toString(value.SyncHeader.TypeName))
        return false
      end
      messages:AddKeyValue(syncHeader.PlayerId, WCSharpSync.SyncMessage(syncHeader))
      return false
    end
    HandleSyncPacket = function ()
      local syncPacket = WCSharpJson.JsonConvert.Deserialize(BlzGetTriggerSyncData(), WCSharpSync.SyncPacket)
      local default, value = messages:TryGetValue(syncPacket.P, nil)
      if not default then
        System.Console.WriteLine("ERROR: A sync packet was received without header.")
        System.Console.WriteLine(BlzGetTriggerSyncData())
      end
      value.Packets:Add(syncPacket)
      if value:getIsComplete() then
        FinalizeMessage(value)
      end
      return false
    end
    FinalizeMessage = function (message)
      messages:RemoveKey(message.SyncHeader.PlayerId)
      local obj = nil
      for i = 0, #syncHandlers - 1 do
        local syncHandler = syncHandlers:get(i)
        if syncHandler.Type:getFullName() == message.SyncHeader.TypeName then
          if obj == nil then
            obj = WCSharpJson.JsonConvert.Deserialize1(message:GetContents(), syncHandler.Type)
          end
          syncHandler.Action(obj)
        end
      end
    end
    -- <summary>
    -- Syncs the given data across all clients. Use <see cref="M:WCSharp.Sync.SyncSystem.Subscribe``1(System.Action{``0})" /> in order to set up receiving of certain types of messages.
    -- </summary>
    Send = function (message, T)
      if message ~= nil then
        local content = WCSharpJson.JsonConvert.Serialize(message, T)
        local playerId = GetPlayerId(GetLocalPlayer())
        local list = Linq.ToList(BuildPackets(content, playerId))
        local default = WCSharpSync.SyncHeader()
        default.PacketCount = #list
        default.PlayerId = playerId
        default.TypeName = System.typeof(T):getFullName()
        local input = default
        BlzSendSyncData("__WCSharpSyncHeaders", WCSharpJson.JsonConvert.Serialize(input, WCSharpSync.SyncHeader))
        for i = 0, #list - 1 do
          local data = WCSharpJson.JsonConvert.Serialize(list:get(i), WCSharpSync.SyncPacket)
          BlzSendSyncData("__WCSharpSyncPackets", data)
        end
      end
    end
    -- <summary>
    -- Splits packets, taking into account added length from escaping the message data.
    -- </summary>
    BuildPackets = function (content, playerId)
      return System.yieldIEnumerable(function (content, playerId)
        local num = 0
        local num2 = 0
        for i = 0, #content - 1 do
          num2 = ((not escapeChars:Contains(content:get(i))) and (num2 + 1) or (num2 + 2))
          repeat
            local default = num2
            if default == 240 then
              local extern = WCSharpSync.SyncPacket()
              extern.P = playerId
              extern.M = content:Substring(num, i - num)
              System.yield(extern)
              num = i
              num2 = 0
              break
            elseif default == 241 then
              local extern = WCSharpSync.SyncPacket()
              extern.P = playerId
              extern.M = content:Substring(num, i - num - 1)
              System.yield(extern)
              num = i - 1
              num2 = 2
              break
            end
          until 1
        end
        if num < #content then
          local default = WCSharpSync.SyncPacket()
          default.P = playerId
          default.M = content:Substring(num)
          System.yield(default)
        end
      end, WCSharpSync.SyncPacket, content, playerId)
    end
    -- <summary>
    -- Subscribes the given <paramref name="handler" /> to be called when messages of type <typeparamref name="T" /> are sent across the <see cref="T:WCSharp.Sync.SyncSystem" />.
    -- </summary>
    Subscribe = function (handler, T)
      if handler ~= nil then
        syncHandlers:Add(WCSharpSync.SyncHandler.Create(handler, T))
      end
    end
    -- <summary>
    -- Unsubscribes the given <paramref name="handler" /> from the <see cref="T:WCSharp.Sync.SyncSystem" />.
    -- </summary>
    Unsubscribe = function (handler, T)
      for i = 0, #syncHandlers - 1 do
        if System.ObjectEqualsObj(syncHandlers:get(i).InternalAction, handler) then
          local default = i
          i = default - 1
          syncHandlers:RemoveAt(default)
        end
      end
    end
    headerAction = function ()
      System.try(function ()
        HandleSyncHeader()
      end, function (default)
        local ex2 = default
        System.Console.WriteLine(ex2:getMessage())
        System.Console.WriteLine(ex2:getStackTrace())
      end)
      return false
    end
    packetAction = function ()
      System.try(function ()
        HandleSyncPacket()
      end, function (default)
        local ex = default
        System.Console.WriteLine(ex:getMessage())
        System.Console.WriteLine(ex:getStackTrace())
      end)
      return false
    end
    -- <summary>
    -- Call this method to automatically wrap your actions in a try/catch, so that exceptions that lead back to the SyncSystem will automatically output information.
    -- <para>It is recommended to use compilation time conditions to not call this on release mode.</para>
    -- </summary>
    EnableDebug = function ()
      for _, syncTrigger in System.each(syncTriggers) do
        DestroyCondition(syncTrigger.Condition)
        DisableTrigger(syncTrigger.Trigger)
        DestroyTrigger(syncTrigger.Trigger)
      end
      syncTriggers:Clear()
      syncTriggers:Add(RegisterForPrefix(headerAction, "__WCSharpSyncHeaders"))
      syncTriggers:Add(RegisterForPrefix(packetAction, "__WCSharpSyncPackets"))
    end
    return {
      Send = Send,
      Subscribe = Subscribe,
      Unsubscribe = Unsubscribe,
      EnableDebug = EnableDebug,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "escapeChars", 0x9, System.HashSet(System.Char) },
            { "messages", 0x9, System.Dictionary(System.Int32, out.WCSharp.Sync.SyncMessage) },
            { "syncHandlers", 0x9, System.List(out.WCSharp.Sync.SyncHandler) },
            { "syncTriggers", 0x9, System.List(out.WCSharp.Sync.SyncTrigger) }
          },
          methods = {
            { "BuildPackets", 0x289, BuildPackets, System.String, System.Int32, System.IEnumerable_1(out.WCSharp.Sync.SyncPacket) },
            { "EnableDebug", 0xE, EnableDebug },
            { "FinalizeMessage", 0x109, FinalizeMessage, out.WCSharp.Sync.SyncMessage },
            { "HandleSyncHeader", 0x89, HandleSyncHeader, System.Boolean },
            { "HandleSyncPacket", 0x89, HandleSyncPacket, System.Boolean },
            { "RegisterForPrefix", 0x289, RegisterForPrefix, System.Delegate(System.Boolean), System.String, out.WCSharp.Sync.SyncTrigger },
            { "Send", 0x1010E, Send, function (T) return T end },
            { "Subscribe", 0x1010E, Subscribe, function (T) return System.Delegate(T, System.Void) end },
            { "Unsubscribe", 0x1010E, Unsubscribe, function (T) return System.Delegate(T, System.Void) end }
          },
          class = { "SyncSystem", 0x3E }
        }
      end
    }
  end)
  namespace.class("SyncTrigger", function (namespace)
    return {
      __metadata__ = function (out)
        return {
          properties = {
            { "Condition", 0x6, out.WCSharp.Api.conditionfunc },
            { "Trigger", 0x6, out.WCSharp.Api.trigger }
          },
          class = { "SyncTrigger", 0x4 }
        }
      end
    }
  end)
end)

end
do
local System = System
local Linq = System.Linq.Enumerable
local ArrayChar = System.Array(System.Char)
local WCSharpW3MMD
System.import(function (out)
  WCSharpW3MMD = WCSharp.W3MMD
end)
System.namespace("WCSharp.W3MMD", function (namespace)
  -- <summary>
  -- An arbitrary W3MMD variable of any type.
  -- </summary>
  namespace.interface("IW3MmdVar", function ()
    return {
      __metadata__ = function (out)
        return {
          class = { "IW3MmdVar", 0x16 }
        }
      end
    }
  end)
  -- <summary>
  -- The main class responsible for creating and managing W3MMD variable and data emissions.
  -- <para>Note: You should define your variables and events a few seconds before interacting with them.</para>
  -- </summary>
  namespace.class("W3Mmd", function (namespace)
    local cache, messageId, Init, ForceInit, GetEmitter, DefineVar, Emit, SetPlayerFlag, 
    SetPlayerFlag1, EmitCustom, DefineEvent, DefineFloat, DefineInt, DefineString, static
    static = function (this)
      cache = Init()
    end
    messageId = 0
    Init = function ()
      FlushGameCache(InitGameCache("MMD.dat"))
      local gamecache = InitGameCache("MMD.dat")
      Emit("init version 1 1", gamecache)
      do
        local i = 0
        while i < GetBJMaxPlayers() do
          local whichPlayer = Player(i)
          if GetPlayerController(whichPlayer) == MAP_CONTROL_USER and GetPlayerSlotState(whichPlayer) ~= PLAYER_SLOT_STATE_EMPTY then
            Emit("init pid " .. i .. " " .. System.toString(WCSharpW3MMD.W3MmdExtensions.Pack(GetPlayerName(whichPlayer))), gamecache)
          end
          i = i + 1
        end
      end
      return gamecache
    end
    -- <summary>
    -- <para>W3MMD is automatically initialised when defining any event or variable.</para>
    -- As such, this method is only necessary to call if you exclusively use SetPlayerFlag and/or EmitCustom.
    -- </summary>
    ForceInit = function ()
    end
    -- <summary>
    -- Select a player to emit the message.
    -- </summary>
    GetEmitter = function ()
      local bJMaxPlayers = GetBJMaxPlayers()
      for i = 0, 999 do
        local player = Player(GetRandomInt(0, bJMaxPlayers))
        if GetPlayerController(player) == MAP_CONTROL_USER and GetPlayerSlotState(player) == PLAYER_SLOT_STATE_PLAYING then
          return player
        end
      end
      System.throw(System.Exception("w3mmd: could not find an emitter"))
    end
    DefineVar = function (packedName, variableType, goalType, suggestionType)
      Emit("DefVarP " .. System.toString(packedName) .. " " .. System.toString(WCSharpW3MMD.W3MmdExtensions.Pack4(variableType)) .. " " .. System.toString(WCSharpW3MMD.W3MmdExtensions.Pack2(goalType)) .. " " .. System.toString(WCSharpW3MMD.W3MmdExtensions.Pack3(suggestionType)))
    end
    -- <summary>
    -- Emits a message to be consumed by a parser.
    -- </summary>
    Emit = function (message, mmdCache)
      local default = messageId
      messageId = default + 1
      local num = default
      if GetEmitter() == GetLocalPlayer() then
        if mmdCache == nil then
          mmdCache = cache
        end
        StoreInteger(mmdCache, "val:" .. num, message, System.mod(num * #message, 127))
        SyncStoredInteger(mmdCache, "val:" .. num, message)
      end
    end
    -- <summary>
    -- Sets a player's flag to be consumed by a parser.
    -- </summary>
    -- <param name="player">Player for who the flag is set.</param>
    -- <param name="flag">The flag value to set.</param>
    SetPlayerFlag = function (player, flag)
      SetPlayerFlag1(GetPlayerId(player), flag)
    end
    -- <summary>
    -- Sets a player's flag to be consumed by a parser.
    -- </summary>
    -- <param name="playerId">PlayerId for who the flag is set.</param>
    -- <param name="flag">The flag value to set.</param>
    SetPlayerFlag1 = function (playerId, flag)
      Emit("FlagP " .. playerId .. " " .. System.toString(WCSharpW3MMD.W3MmdExtensions.Pack1(flag)))
    end
    -- <summary>
    -- Emits custom data that may be used by parsers/viewers.
    -- <para>See the W3MMD.spec at https://github.com/PBug90/w3gPlus for more information.</para>
    -- </summary>
    -- <param name="key">A key to identify the data.</param>
    -- <param name="data">The data emitted.</param>
    EmitCustom = function (key, data)
      Emit("custom " .. System.toString(WCSharpW3MMD.W3MmdExtensions.Pack(key)) .. " " .. System.toString(WCSharpW3MMD.W3MmdExtensions.Pack(data)))
    end
    -- <summary>
    -- Defines an event that can occur multiple times.
    -- <para>Equivalent to creating a new <see cref="T:WCSharp.W3MMD.W3MmdEvent" />.</para>
    -- </summary>
    -- <param name="name">Name of the event.</param>
    -- <param name="format">
    -- String to format an event into a user-consumable string.
    -- <para>e.g., for a player kills player event, we'd do "{0} killed {1}" where {0} is the first argument (the killer) and {1} is the second argument (the victim).</para>
    -- </param>
    -- <param name="arguments">Name of the arguments. e.g., ["killer", "victim"].</param>
    -- <exception cref="T:System.Exception">If the name is not between 1 and 32 characters long.</exception>
    DefineEvent = function (name, format, arguments)
      return WCSharpW3MMD.W3MmdEvent(name, format, arguments)
    end
    -- <summary>
    -- Defines a player float variable that can be mutated throughout the game.
    -- <para>Equivalent to creating a new <see cref="T:WCSharp.W3MMD.W3MmdFloatVar" />.</para>
    -- </summary>
    -- <param name="name">Name of the variable.</param>
    -- <param name="goalType">Whether the player is trying to get a high or low value (or none).</param>
    -- <param name="suggestionType">A suggestion for how a parser/viewer should treat the output values.</param>
    -- <exception cref="T:System.Exception">If the name is not between 1 and 32 characters long.</exception>
    DefineFloat = function (name, goalType, suggestionType)
      return WCSharpW3MMD.W3MmdFloatVar(name, goalType, suggestionType)
    end
    -- <summary>
    -- Defines a player int variable that can be mutated throughout the game.
    -- <para>Equivalent to creating a new <see cref="T:WCSharp.W3MMD.W3MmdIntVar" />.</para>
    -- </summary>
    -- <param name="name">Name of the variable.</param>
    -- <param name="goalType">Whether the player is trying to get a high or low value (or none).</param>
    -- <param name="suggestionType">A suggestion for how a parser/viewer should treat the output values.</param>
    -- <exception cref="T:System.Exception">If the name is not between 1 and 32 characters long.</exception>
    DefineInt = function (name, goalType, suggestionType)
      return WCSharpW3MMD.W3MmdIntVar(name, goalType, suggestionType)
    end
    -- <summary>
    -- Defines a player string variable that can be mutated throughout the game.
    -- <para>Useful for classifications.</para>
    -- <para>Equivalent to creating a new <see cref="T:WCSharp.W3MMD.W3MmdStringVar" />.</para>
    -- </summary>
    -- <param name="name">Name of the variable.</param>
    -- <param name="suggestionType">A suggestion for how a parser/viewer should treat the value.</param>
    -- <exception cref="T:System.Exception">If the name is not between 1 and 32 characters long.</exception>
    DefineString = function (name, suggestionType)
      return WCSharpW3MMD.W3MmdStringVar(name, suggestionType)
    end
    return {
      ForceInit = ForceInit,
      DefineVar = DefineVar,
      Emit = Emit,
      SetPlayerFlag = SetPlayerFlag,
      SetPlayerFlag1 = SetPlayerFlag1,
      EmitCustom = EmitCustom,
      DefineEvent = DefineEvent,
      DefineFloat = DefineFloat,
      DefineInt = DefineInt,
      DefineString = DefineString,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "cache", 0x9, out.WCSharp.Api.gamecache },
            { "messageId", 0x9, System.Int32 }
          },
          methods = {
            { "DefineEvent", 0x38E, DefineEvent, System.String, System.String, System.Array(System.String), out.WCSharp.W3MMD.W3MmdEvent },
            { "DefineFloat", 0x38E, DefineFloat, System.String, System.Int32, System.Int32, out.WCSharp.W3MMD.W3MmdFloatVar },
            { "DefineInt", 0x38E, DefineInt, System.String, System.Int32, System.Int32, out.WCSharp.W3MMD.W3MmdIntVar },
            { "DefineString", 0x28E, DefineString, System.String, System.Int32, out.WCSharp.W3MMD.W3MmdStringVar },
            { "DefineVar", 0x40C, DefineVar, System.String, System.Int32, System.Int32, System.Int32 },
            { "Emit", 0x20C, Emit, System.String, out.WCSharp.Api.gamecache },
            { "EmitCustom", 0x20E, EmitCustom, System.String, System.String },
            { "ForceInit", 0xE, ForceInit },
            { "GetEmitter", 0x89, GetEmitter, out.WCSharp.Api.player },
            { "Init", 0x89, Init, out.WCSharp.Api.gamecache },
            { "SetPlayerFlag", 0x20E, SetPlayerFlag, out.WCSharp.Api.player, System.Int32 },
            { "SetPlayerFlag", 0x20E, SetPlayerFlag1, System.Int32, System.Int32 }
          },
          class = { "W3Mmd", 0x3E }
        }
      end
    }
  end)
  -- <summary>
  -- Represents a W3MMD event. For example, "X killed Y".
  -- </summary>
  namespace.class("W3MmdEvent", function (namespace)
    local getArguments, getArgumentCount, Emit, __ctor__
    -- <summary>
    -- Defines an event that can occur multiple times.
    -- </summary>
    -- <param name="name">Name of the event.</param>
    -- <param name="format">
    -- String to format an event into a user-consumable string.
    -- <para>e.g., for a player kills player event, we'd do "{0} killed {1}" where {0} is the first argument (the killer) and {1} is the second argument (the victim).</para>
    -- </param>
    -- <param name="arguments">Name of the arguments. e.g., ["killer", "victim"].</param>
    -- <exception cref="T:System.Exception">If the name is not between 1 and 32 characters long.</exception>
    __ctor__ = function (this, name, format, arguments)
      if #name < 1 or #name > 32 then
        System.throw(System.Exception("w3mmd: invalid name (" .. System.toString(name) .. "), must be between 1 and 32 characters long"))
      end
      this.Name = name
      this.Format = format
      this.arguments = Linq.ToList(arguments)
      this.packedName = WCSharpW3MMD.W3MmdExtensions.Pack(name)
      this.packedArguments = System.String.JoinEnumerable(32 --[[' ']], Linq.Select(this.arguments, function (x)
        return WCSharpW3MMD.W3MmdExtensions.Pack(x)
      end, System.String))
      local default
      if (getArgumentCount(this) > 0) then
        default = getArgumentCount(this) .. " " .. System.toString(this.packedArguments)
      else
        default = System.Int32.ToString(getArgumentCount(this))
      end
      local value = default
      WCSharpW3MMD.W3Mmd.Emit("DefEvent " .. System.toString(this.packedName) .. " " .. System.toString(value) .. " " .. System.toString(WCSharpW3MMD.W3MmdExtensions.Pack(format)))
    end
    getArguments = function (this)
      return this.arguments
    end
    getArgumentCount = function (this)
      return #this.arguments
    end
    -- <summary>
    -- Emits a new event with the given parameters.
    -- </summary>
    -- <param name="args">A number of arguments equal to <see cref="P:WCSharp.W3MMD.W3MmdEvent.ArgumentCount" />.</param>
    -- <exception cref="T:System.Exception">If the number of arguments provided does not match <see cref="P:WCSharp.W3MMD.W3MmdEvent.ArgumentCount" />.</exception>
    Emit = function (this, args)
      if #args ~= getArgumentCount(this) then
        System.throw(System.Exception("w3mmd: event " .. System.toString(this.Name) .. " with " .. getArgumentCount(this) .. " arguments tried to emit with " .. #args .. " arguments."))
      end
      local text = System.String.JoinParams(32 --[[' ']], args)
      if #text > 0 then
        text = " " .. System.toString(text)
      end
      WCSharpW3MMD.W3Mmd.Emit("Event " .. System.toString(this.packedName) .. System.toString(text))
    end
    return {
      getArguments = getArguments,
      getArgumentCount = getArgumentCount,
      Emit = Emit,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "arguments", 0x1, System.List(System.String) },
            { "packedArguments", 0x1, System.String },
            { "packedName", 0x1, System.String }
          },
          properties = {
            { "ArgumentCount", 0x206, System.Int32, getArgumentCount },
            { "Arguments", 0x206, System.IEnumerable_1(System.String), getArguments },
            { "Format", 0x6, System.String },
            { "Name", 0x6, System.String }
          },
          methods = {
            { ".ctor", 0x306, nil, System.String, System.String, System.Array(System.String) },
            { "Emit", 0x106, Emit, System.Array(System.String) }
          },
          class = { "W3MmdEvent", 0x6 }
        }
      end
    }
  end)
  namespace.class("W3MmdExtensions", function (namespace)
    local escapedChars, Pack, Pack1, Pack2, Pack3, Pack4, static
    static = function (this)
      escapedChars = ArrayChar { 32 --[[' ']], 92 --[['\\']] }
    end
    -- <summary>
    -- Escapes the W3MMD control characters.
    -- </summary>
    Pack = function (value)
      local text = ""
      for i = 0, #value - 1 do
        local default
        if (not Linq.Contains(escapedChars, value:get(i))) then
          default = (System.toString(text) .. string.char(value:get(i)))
        else
          default = (System.toString(text) .. System.toString("\\" .. string.char(value:get(i))))
        end
        text = default
      end
      return text
    end
    Pack1 = function (f)
      local default
      local extern = f
      if extern == 0 --[[W3MmdFlag.Drawer]] then
        default = "drawer"
      elseif extern == 1 --[[W3MmdFlag.Loser]] then
        default = "loser"
      elseif extern == 2 --[[W3MmdFlag.Winner]] then
        default = "winner"
      elseif extern == 3 --[[W3MmdFlag.Leaver]] then
        default = "leaver"
      elseif extern == 4 --[[W3MmdFlag.Practicing]] then
        default = "practicing"
      else
        default = System.throw(System.NotImplementedException("w3mmd: unknown flag " .. System.EnumToString(f, WCSharpW3MMD.W3MmdFlag)))
      end
      return default
    end
    Pack2 = function (gt)
      local default
      local extern = gt
      if extern == 0 --[[W3MmdGoalType.None]] then
        default = "none"
      elseif extern == 1 --[[W3MmdGoalType.High]] then
        default = "high"
      elseif extern == 2 --[[W3MmdGoalType.Low]] then
        default = "low"
      else
        default = System.throw(System.NotImplementedException("w3mmd: unknown goal type " .. System.EnumToString(gt, WCSharpW3MMD.W3MmdGoalType)))
      end
      return default
    end
    Pack3 = function (st)
      local default
      local extern = st
      if extern == 0 --[[W3MmdSuggestionType.None]] then
        default = "none"
      elseif extern == 1 --[[W3MmdSuggestionType.Track]] then
        default = "track"
      elseif extern == 2 --[[W3MmdSuggestionType.Leaderboard]] then
        default = "leaderboard"
      else
        default = System.throw(System.NotImplementedException("w3mmd: unknown suggestion type " .. System.EnumToString(st, WCSharpW3MMD.W3MmdSuggestionType)))
      end
      return default
    end
    Pack4 = function (vt)
      local default
      local extern = vt
      if extern == 0 --[[W3MmdVariableType.String]] then
        default = "string"
      elseif extern == 1 --[[W3MmdVariableType.Integer]] then
        default = "int"
      elseif extern == 2 --[[W3MmdVariableType.Float]] then
        default = "real"
      else
        default = System.throw(System.NotImplementedException("w3mmd: unknown variable type " .. System.EnumToString(vt, WCSharpW3MMD.W3MmdVariableType)))
      end
      return default
    end
    return {
      Pack = Pack,
      Pack1 = Pack1,
      Pack2 = Pack2,
      Pack3 = Pack3,
      Pack4 = Pack4,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "escapedChars", 0x9, System.Array(System.Char) }
          },
          methods = {
            { "Pack", 0x18E, Pack, System.String, System.String },
            { "Pack", 0x18E, Pack1, System.Int32, System.String },
            { "Pack", 0x18E, Pack2, System.Int32, System.String },
            { "Pack", 0x18E, Pack3, System.Int32, System.String },
            { "Pack", 0x18E, Pack4, System.Int32, System.String }
          },
          class = { "W3MmdExtensions", 0x3C }
        }
      end
    }
  end)
  -- <summary>
  -- Represents the state of the player.
  -- <para>For any particular player, only the last value set over the course of a game matters.</para>
  -- </summary>
  namespace.enum("W3MmdFlag", function ()
    return {
      Drawer = 0,
      Loser = 1,
      Winner = 2,
      Leaver = 3,
      Practicing = 4,
      __metadata__ = function (out)
        return {
          fields = {
            { "Drawer", 0xE, System.Int32 },
            { "Leaver", 0xE, System.Int32 },
            { "Loser", 0xE, System.Int32 },
            { "Practicing", 0xE, System.Int32 },
            { "Winner", 0xE, System.Int32 }
          },
          class = { "W3MmdFlag", 0x26 }
        }
      end
    }
  end)
  -- <summary>
  -- Controls a W3MMD variable of type <see cref="F:WCSharp.W3MMD.W3MmdVariableType.Float" />.
  -- </summary>
  namespace.class("W3MmdFloatVar", function (namespace)
    local getName, getVariableType, getGoalType, getSuggestionType, Set, Set1, Add, Add1, 
    Subtract, Subtract1, __ctor__
    -- <summary>
    -- Defines a player float variable that can be mutated throughout the game.
    -- </summary>
    -- <param name="name">Name of the variable.</param>
    -- <param name="goalType">Whether the player is trying to get a high or low value (or none).</param>
    -- <param name="suggestionType">A suggestion for how a parser/viewer should treat the output values.</param>
    -- <exception cref="T:System.Exception">If the name is not between 1 and 32 characters long.</exception>
    __ctor__ = function (this, name, goalType, suggestionType)
      if #name < 1 or #name > 32 then
        System.throw(System.Exception("w3mmd: invalid name (" .. System.toString(name) .. "), must be between 1 and 32 characters long"))
      end
      this.Name = name
      this.GoalType = goalType
      this.SuggestionType = suggestionType
      this.packedName = WCSharpW3MMD.W3MmdExtensions.Pack(name)
      WCSharpW3MMD.W3Mmd.DefineVar(this.packedName, getVariableType(this), this.GoalType, this.SuggestionType)
    end
    getName = System.property("Name", true)
    getVariableType = function (this)
      return 2 --[[W3MmdVariableType.Float]]
    end
    getGoalType = System.property("GoalType", true)
    getSuggestionType = System.property("SuggestionType", true)
    -- <summary>
    -- Sets this variable to the given <paramref name="value" /> for the given <paramref name="player" />.
    -- </summary>
    Set = function (this, player, value)
      Set1(this, GetPlayerId(player), value)
    end
    -- <summary>
    -- Sets this variable to the given <paramref name="value" /> for the given <paramref name="playerId" />.
    -- </summary>
    Set1 = function (this, playerId, value)
      WCSharpW3MMD.W3Mmd.Emit("VarP " .. playerId .. " " .. System.toString(this.packedName) .. " = " .. value)
    end
    -- <summary>
    -- Adds the given <paramref name="value" /> to this variable for the given <paramref name="player" />.
    -- </summary>
    Add = function (this, player, value)
      Add1(this, GetPlayerId(player), value)
    end
    -- <summary>
    -- Adds the given <paramref name="value" /> to this variable for the given <paramref name="playerId" />.
    -- </summary>
    Add1 = function (this, playerId, value)
      WCSharpW3MMD.W3Mmd.Emit("VarP " .. playerId .. " " .. System.toString(this.packedName) .. " += " .. value)
    end
    -- <summary>
    -- Subtracts the given <paramref name="value" /> to this variable for the given <paramref name="player" />.
    -- </summary>
    Subtract = function (this, player, value)
      Subtract1(this, GetPlayerId(player), value)
    end
    -- <summary>
    -- Subtracts the given <paramref name="value" /> to this variable for the given <paramref name="playerId" />.
    -- </summary>
    Subtract1 = function (this, playerId, value)
      WCSharpW3MMD.W3Mmd.Emit("VarP " .. playerId .. " " .. System.toString(this.packedName) .. " -= " .. value)
    end
    return {
      base = function (out)
        return {
          out.WCSharp.W3MMD.IW3MmdVar
        }
      end,
      getName = getName,
      getVariableType = getVariableType,
      GoalType = 0,
      getGoalType = getGoalType,
      SuggestionType = 0,
      getSuggestionType = getSuggestionType,
      Set = Set,
      Set1 = Set1,
      Add = Add,
      Add1 = Add1,
      Subtract = Subtract,
      Subtract1 = Subtract1,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "packedName", 0x1, System.String }
          },
          properties = {
            { "GoalType", 0x206, System.Int32, getGoalType },
            { "Name", 0x206, System.String, getName },
            { "SuggestionType", 0x206, System.Int32, getSuggestionType },
            { "VariableType", 0x206, System.Int32, getVariableType }
          },
          methods = {
            { ".ctor", 0x306, nil, System.String, System.Int32, System.Int32 },
            { "Add", 0x206, Add, out.WCSharp.Api.player, System.Single },
            { "Add", 0x206, Add1, System.Int32, System.Single },
            { "Set", 0x206, Set, out.WCSharp.Api.player, System.Single },
            { "Set", 0x206, Set1, System.Int32, System.Single },
            { "Subtract", 0x206, Subtract, out.WCSharp.Api.player, System.Single },
            { "Subtract", 0x206, Subtract1, System.Int32, System.Single }
          },
          class = { "W3MmdFloatVar", 0x6 }
        }
      end
    }
  end)
  -- <summary>
  -- Defines the sort order on the variable, i.e. whether it's better to have high or low values.
  -- </summary>
  namespace.enum("W3MmdGoalType", function ()
    return {
      None = 0,
      High = 1,
      Low = 2,
      __metadata__ = function (out)
        return {
          fields = {
            { "High", 0xE, System.Int32 },
            { "Low", 0xE, System.Int32 },
            { "None", 0xE, System.Int32 }
          },
          class = { "W3MmdGoalType", 0x26 }
        }
      end
    }
  end)
  -- <summary>
  -- Controls a W3MMD variable of type <see cref="F:WCSharp.W3MMD.W3MmdVariableType.Integer" />.
  -- </summary>
  namespace.class("W3MmdIntVar", function (namespace)
    local getName, getVariableType, getGoalType, getSuggestionType, Set, Set1, Add, Add1, 
    Subtract, Subtract1, __ctor__
    -- <summary>
    -- Defines a player int variable that can be mutated throughout the game.
    -- </summary>
    -- <param name="name">Name of the variable.</param>
    -- <param name="goalType">Whether the player is trying to get a high or low value (or none).</param>
    -- <param name="suggestionType">A suggestion for how a parser/viewer should treat the output values.</param>
    -- <exception cref="T:System.Exception">If the name is not between 1 and 32 characters long.</exception>
    __ctor__ = function (this, name, goalType, suggestionType)
      if #name < 1 or #name > 32 then
        System.throw(System.Exception("w3mmd: invalid name (" .. System.toString(name) .. "), must be between 1 and 32 characters long"))
      end
      this.Name = name
      this.GoalType = goalType
      this.SuggestionType = suggestionType
      this.packedName = WCSharpW3MMD.W3MmdExtensions.Pack(name)
      WCSharpW3MMD.W3Mmd.DefineVar(this.packedName, getVariableType(this), this.GoalType, this.SuggestionType)
    end
    getName = System.property("Name", true)
    getVariableType = function (this)
      return 1 --[[W3MmdVariableType.Integer]]
    end
    getGoalType = System.property("GoalType", true)
    getSuggestionType = System.property("SuggestionType", true)
    -- <summary>
    -- Sets this variable to the given <paramref name="value" /> for the given <paramref name="player" />.
    -- </summary>
    Set = function (this, player, value)
      Set1(this, GetPlayerId(player), value)
    end
    -- <summary>
    -- Sets this variable to the given <paramref name="value" /> for the given <paramref name="playerId" />.
    -- </summary>
    Set1 = function (this, playerId, value)
      WCSharpW3MMD.W3Mmd.Emit("VarP " .. playerId .. " " .. System.toString(this.packedName) .. " = " .. value)
    end
    -- <summary>
    -- Adds the given <paramref name="value" /> to this variable for the given <paramref name="player" />.
    -- </summary>
    Add = function (this, player, value)
      Add1(this, GetPlayerId(player), value)
    end
    -- <summary>
    -- Adds the given <paramref name="value" /> to this variable for the given <paramref name="playerId" />.
    -- </summary>
    Add1 = function (this, playerId, value)
      WCSharpW3MMD.W3Mmd.Emit("VarP " .. playerId .. " " .. System.toString(this.packedName) .. " += " .. value)
    end
    -- <summary>
    -- Subtracts the given <paramref name="value" /> to this variable for the given <paramref name="player" />.
    -- </summary>
    Subtract = function (this, player, value)
      Subtract1(this, GetPlayerId(player), value)
    end
    -- <summary>
    -- Subtracts the given <paramref name="value" /> to this variable for the given <paramref name="playerId" />.
    -- </summary>
    Subtract1 = function (this, playerId, value)
      WCSharpW3MMD.W3Mmd.Emit("VarP " .. playerId .. " " .. System.toString(this.packedName) .. " -= " .. value)
    end
    return {
      base = function (out)
        return {
          out.WCSharp.W3MMD.IW3MmdVar
        }
      end,
      getName = getName,
      getVariableType = getVariableType,
      GoalType = 0,
      getGoalType = getGoalType,
      SuggestionType = 0,
      getSuggestionType = getSuggestionType,
      Set = Set,
      Set1 = Set1,
      Add = Add,
      Add1 = Add1,
      Subtract = Subtract,
      Subtract1 = Subtract1,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "packedName", 0x1, System.String }
          },
          properties = {
            { "GoalType", 0x206, System.Int32, getGoalType },
            { "Name", 0x206, System.String, getName },
            { "SuggestionType", 0x206, System.Int32, getSuggestionType },
            { "VariableType", 0x206, System.Int32, getVariableType }
          },
          methods = {
            { ".ctor", 0x306, nil, System.String, System.Int32, System.Int32 },
            { "Add", 0x206, Add, out.WCSharp.Api.player, System.Int32 },
            { "Add", 0x206, Add1, System.Int32, System.Int32 },
            { "Set", 0x206, Set, out.WCSharp.Api.player, System.Int32 },
            { "Set", 0x206, Set1, System.Int32, System.Int32 },
            { "Subtract", 0x206, Subtract, out.WCSharp.Api.player, System.Int32 },
            { "Subtract", 0x206, Subtract1, System.Int32, System.Int32 }
          },
          class = { "W3MmdIntVar", 0x6 }
        }
      end
    }
  end)
  -- <summary>
  -- Controls a W3MMD variable of type <see cref="F:WCSharp.W3MMD.W3MmdVariableType.String" />.
  -- </summary>
  namespace.class("W3MmdStringVar", function (namespace)
    local getName, getVariableType, getGoalType, getSuggestionType, Set, Set1, __ctor__
    -- <summary>
    -- Defines a player string variable that can be mutated throughout the game.
    -- <para>Useful to classifications.</para>
    -- </summary>
    -- <param name="name">Name of the variable.</param>
    -- <param name="suggestionType">A suggestion for how a parser/viewer should treat the output values.</param>
    -- <exception cref="T:System.Exception">If the name is not between 1 and 32 characters long.</exception>
    __ctor__ = function (this, name, suggestionType)
      if #name < 1 or #name > 32 then
        System.throw(System.Exception("w3mmd: invalid name (" .. System.toString(name) .. "), must be between 1 and 32 characters long"))
      end
      this.Name = name
      this.SuggestionType = suggestionType
      this.packedName = WCSharpW3MMD.W3MmdExtensions.Pack(name)
      WCSharpW3MMD.W3Mmd.DefineVar(this.packedName, getVariableType(this), getGoalType(this), this.SuggestionType)
    end
    getName = System.property("Name", true)
    getVariableType = function (this)
      return 0 --[[W3MmdVariableType.String]]
    end
    getGoalType = function (this)
      return 0 --[[W3MmdGoalType.None]]
    end
    getSuggestionType = System.property("SuggestionType", true)
    -- <summary>
    -- Sets this variable to the given <paramref name="value" /> for the given <paramref name="player" />.
    -- </summary>
    Set = function (this, player, value)
      Set1(this, GetPlayerId(player), value)
    end
    -- <summary>
    -- Sets this variable to the given <paramref name="value" /> for the given <paramref name="playerId" />.
    -- </summary>
    Set1 = function (this, playerId, value)
      WCSharpW3MMD.W3Mmd.Emit("VarP " .. playerId .. " " .. System.toString(this.packedName) .. " = " .. System.toString(WCSharpW3MMD.W3MmdExtensions.Pack(value)))
    end
    return {
      base = function (out)
        return {
          out.WCSharp.W3MMD.IW3MmdVar
        }
      end,
      getName = getName,
      getVariableType = getVariableType,
      getGoalType = getGoalType,
      SuggestionType = 0,
      getSuggestionType = getSuggestionType,
      Set = Set,
      Set1 = Set1,
      __ctor__ = __ctor__,
      __metadata__ = function (out)
        return {
          fields = {
            { "packedName", 0x1, System.String }
          },
          properties = {
            { "GoalType", 0x206, System.Int32, getGoalType },
            { "Name", 0x206, System.String, getName },
            { "SuggestionType", 0x206, System.Int32, getSuggestionType },
            { "VariableType", 0x206, System.Int32, getVariableType }
          },
          methods = {
            { ".ctor", 0x206, nil, System.String, System.Int32 },
            { "Set", 0x206, Set, out.WCSharp.Api.player, System.String },
            { "Set", 0x206, Set1, System.Int32, System.String }
          },
          class = { "W3MmdStringVar", 0x6 }
        }
      end
    }
  end)
  -- <summary>
  -- A suggestion for what the parser should do for tracking the variable.
  -- </summary>
  namespace.enum("W3MmdSuggestionType", function ()
    return {
      None = 0,
      Track = 1,
      Leaderboard = 2,
      __metadata__ = function (out)
        return {
          fields = {
            { "Leaderboard", 0xE, System.Int32 },
            { "None", 0xE, System.Int32 },
            { "Track", 0xE, System.Int32 }
          },
          class = { "W3MmdSuggestionType", 0x26 }
        }
      end
    }
  end)
  -- <summary>
  -- The type of the W3MMD variable.
  -- </summary>
  namespace.enum("W3MmdVariableType", function ()
    return {
      String = 0,
      Integer = 1,
      Float = 2,
      __metadata__ = function (out)
        return {
          fields = {
            { "Float", 0xE, System.Int32 },
            { "Integer", 0xE, System.Int32 },
            { "String", 0xE, System.Int32 }
          },
          class = { "W3MmdVariableType", 0x26 }
        }
      end
    }
  end)
end)

end
local InitCSharp = function ()
  System.init({
    types = {
      "WCSharp.Events.IPeriodicDisposableAction",
      "WCSharp.Buffs.Buff",
      "WCSharp.Events.EventHandlers.PlayerUnitEventHandlers.IPlayerUnitEventHandler",
      "WCSharp.Missiles.Missile",
      "WCSharp.Buffs.IAura",
      "WCSharp.Buffs.AuraBuffDuration_1",
      "WCSharp.Buffs.BoundBuff",
      "WCSharp.DateTime.WcDateTime",
      "WCSharp.Events.IPeriodicAction",
      "WCSharp.Events.EventHandlers.IEventSet",
      "WCSharp.Events.EventHandlers.PlayerUnitEventHandlers.AbstractPlayerUnitEventHandler",
      "WCSharp.Missiles.BasicMissile",
      "WCSharp.Missiles.CurveMissile",
      "WCSharp.Missiles.HomingMissile",
      "WCSharp.Missiles.MomentumMissile",
      "WCSharp.Missiles.OrbitalMissile",
      "WCSharp.SaveLoad.SaveLoadedMessage_1",
      "WCSharp.SaveLoad.Save_1",
      "WCSharp.W3MMD.IW3MmdVar",
      "Constants",
      "Source.Program",
      "WCSharp.Api.Enums.TargetsAllowed",
      "WCSharp.Buffs.Aura_1",
      "WCSharp.Buffs.AuraBoundBuff",
      "WCSharp.Buffs.AuraSystem",
      "WCSharp.Buffs.AutoBuff",
      "WCSharp.Buffs.BuffSystem",
      "WCSharp.Buffs.Dispel",
      "WCSharp.Buffs.PassiveBuff",
      "WCSharp.Buffs.RollingBuff_1",
      "WCSharp.Buffs.StackBehaviour",
      "WCSharp.Buffs.StackResult",
      "WCSharp.Buffs.TickingBuff",
      "WCSharp.DateTime.DateTimeSyncMessage",
      "WCSharp.DateTime.DateTimeSyncMethod",
      "WCSharp.DateTime.DateTimeSystem",
      "WCSharp.DateTime.Os",
      "WCSharp.DateTime.WcDateTime.DatePart",
      "WCSharp.DateTime.WcTimeSpan",
      "WCSharp.Dummies.DummyBeingRecycled",
      "WCSharp.Dummies.DummySystem",
      "WCSharp.Effects.EffectSystem",
      "WCSharp.Effects.TimedEffect",
      "WCSharp.Events.EventHandlers.EventSet",
      "WCSharp.Events.EventHandlers.EventSetHandleFilter",
      "WCSharp.Events.EventHandlers.EventSetIntFilter",
      "WCSharp.Events.EventHandlers.PlayerUnitEventHandlers.PlayerUnitEventHandler",
      "WCSharp.Events.EventHandlers.PlayerUnitEventHandlers.UnitCreatedHandler",
      "WCSharp.Events.HeroEvent",
      "WCSharp.Events.HeroTypeEvent",
      "WCSharp.Events.ItemEvent",
      "WCSharp.Events.ItemTypeEvent",
      "WCSharp.Events.PeriodicDisposableTrigger_1",
      "WCSharp.Events.PeriodicEvent",
      "WCSharp.Events.PeriodicEvents",
      "WCSharp.Events.PeriodicTrigger_1",
      "WCSharp.Events.PlayerEvent",
      "WCSharp.Events.PlayerUnitEvents",
      "WCSharp.Events.ResearchEvent",
      "WCSharp.Events.SpellEvent",
      "WCSharp.Events.UnitEvent",
      "WCSharp.Events.UnitTypeEvent",
      "WCSharp.Json.Deserialization",
      "WCSharp.Json.JsonConvert",
      "WCSharp.Json.Serialization",
      "WCSharp.Knockbacks.Knockback",
      "WCSharp.Knockbacks.KnockbackSystem",
      "WCSharp.Lightnings.Lightning",
      "WCSharp.Lightnings.LightningSystem",
      "WCSharp.Missiles.BasicMissile.FlightMode",
      "WCSharp.Missiles.CurveMissile.FlightMode",
      "WCSharp.Missiles.HomingMissile.FlightMode",
      "WCSharp.Missiles.MissileSystem",
      "WCSharp.Missiles.MomentumMissile.FlightMode",
      "WCSharp.Missiles.OrbitalMissile.FlightMode",
      "WCSharp.SaveLoad.LoadResult",
      "WCSharp.SaveLoad.LoadResultExtensions",
      "WCSharp.SaveLoad.SaveHandler",
      "WCSharp.SaveLoad.SaveSystem",
      "WCSharp.SaveLoad.SaveSystem_1",
      "WCSharp.SaveLoad.SaveSystemOptions",
      "WCSharp.SaveLoad.Saveable",
      "WCSharp.SaveLoad.SaveableExtensions",
      "WCSharp.Shared.Base64",
      "WCSharp.Shared.Data.Point",
      "WCSharp.Shared.Data.Rectangle",
      "WCSharp.Shared.Delay",
      "WCSharp.Shared.Extensions.GroupExtensions",
      "WCSharp.Shared.Extensions.IListExtensions",
      "WCSharp.Shared.LuaTable",
      "WCSharp.Shared.TypeWrapper_1",
      "WCSharp.Shared.Util",
      "WCSharp.Sync.SyncHandler",
      "WCSharp.Sync.SyncHeader",
      "WCSharp.Sync.SyncMessage",
      "WCSharp.Sync.SyncPacket",
      "WCSharp.Sync.SyncSystem",
      "WCSharp.Sync.SyncTrigger",
      "WCSharp.W3MMD.W3Mmd",
      "WCSharp.W3MMD.W3MmdEvent",
      "WCSharp.W3MMD.W3MmdExtensions",
      "WCSharp.W3MMD.W3MmdFlag",
      "WCSharp.W3MMD.W3MmdFloatVar",
      "WCSharp.W3MMD.W3MmdGoalType",
      "WCSharp.W3MMD.W3MmdIntVar",
      "WCSharp.W3MMD.W3MmdStringVar",
      "WCSharp.W3MMD.W3MmdSuggestionType",
      "WCSharp.W3MMD.W3MmdVariableType"
    }
  })

  Source.Program.Main()
end

function InitGlobals()
end

function InitCustomPlayerSlots()
    SetPlayerStartLocation(Player(0), 0)
    SetPlayerColor(Player(0), ConvertPlayerColor(0))
    SetPlayerRacePreference(Player(0), RACE_PREF_HUMAN)
    SetPlayerRaceSelectable(Player(0), true)
    SetPlayerController(Player(0), MAP_CONTROL_USER)
end

function InitCustomTeams()
    SetPlayerTeam(Player(0), 0)
end

function main()
    SetCameraBounds(-3328.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), -3584.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM), 3328.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), 3072.0 - GetCameraMargin(CAMERA_MARGIN_TOP), -3328.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), 3072.0 - GetCameraMargin(CAMERA_MARGIN_TOP), 3328.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), -3584.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM))
    SetDayNightModels("Environment\\DNC\\DNCLordaeron\\DNCLordaeronTerrain\\DNCLordaeronTerrain.mdl", "Environment\\DNC\\DNCLordaeron\\DNCLordaeronUnit\\DNCLordaeronUnit.mdl")
    NewSoundEnvironment("Default")
    SetAmbientDaySound("LordaeronSummerDay")
    SetAmbientNightSound("LordaeronSummerNight")
    SetMapMusic("Music", true, 0)
    InitBlizzard()
    InitGlobals()
    InitCSharp()
end

function config()
    SetMapName("TRIGSTR_001")
    SetMapDescription("TRIGSTR_003")
    SetPlayers(1)
    SetTeams(1)
    SetGamePlacement(MAP_PLACEMENT_USE_MAP_SETTINGS)
    DefineStartLocation(0, 512.0, -1216.0)
    InitCustomPlayerSlots()
    SetPlayerSlotAvailable(Player(0), MAP_CONTROL_USER)
    InitGenericPlayerSlots()
end

